
tdse-tp2_01-model_integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b8c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08003c98  08003c98  00004c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004200  08004200  000060dc  2**0
                  CONTENTS
  4 .ARM          00000008  08004200  08004200  00005200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004208  08004208  000060dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004208  08004208  00005208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800420c  0800420c  0000520c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000dc  20000000  08004210  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  200000dc  080042ec  000060dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  080042ec  000063b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049bf  00000000  00000000  00006105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a1d  00000000  00000000  0000aac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000518  00000000  00000000  0000c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000038f  00000000  00000000  0000ca00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181de  00000000  00000000  0000cd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097d8  00000000  00000000  00024f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008154d  00000000  00000000  0002e745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afc92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d30  00000000  00000000  000afcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000b1a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000dc 	.word	0x200000dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c80 	.word	0x08003c80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e0 	.word	0x200000e0
 8000148:	08003c80 	.word	0x08003c80

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000160:	f002 fbd8 	bl	8002914 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 f9de 	bl	8000524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f807 	bl	800017a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f846 	bl	80001fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  /* Application Init */
  app_init();
 8000170:	f001 f926 	bl	80013c0 <app_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  app_update();
 8000174:	f001 f9da 	bl	800152c <app_update>
 8000178:	e7fc      	b.n	8000174 <main+0x18>

0800017a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017a:	b580      	push	{r7, lr}
 800017c:	b090      	sub	sp, #64	@ 0x40
 800017e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000180:	f107 0318 	add.w	r3, r7, #24
 8000184:	2228      	movs	r2, #40	@ 0x28
 8000186:	2100      	movs	r1, #0
 8000188:	4618      	mov	r0, r3
 800018a:	f002 fe48 	bl	8002e1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018e:	1d3b      	adds	r3, r7, #4
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
 8000198:	60da      	str	r2, [r3, #12]
 800019a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800019c:	2302      	movs	r3, #2
 800019e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a0:	2301      	movs	r3, #1
 80001a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a4:	2310      	movs	r3, #16
 80001a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a8:	2302      	movs	r3, #2
 80001aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001ac:	2300      	movs	r3, #0
 80001ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b0:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b6:	f107 0318 	add.w	r3, r7, #24
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 fd22 	bl	8000c04 <HAL_RCC_OscConfig>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001c6:	f000 f8dd 	bl	8000384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ca:	230f      	movs	r3, #15
 80001cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ce:	2302      	movs	r3, #2
 80001d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2102      	movs	r1, #2
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 ff8f 	bl	8001108 <HAL_RCC_ClockConfig>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f0:	f000 f8c8 	bl	8000384 <Error_Handler>
  }
}
 80001f4:	bf00      	nop
 80001f6:	3740      	adds	r7, #64	@ 0x40
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b088      	sub	sp, #32
 8000200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000202:	f107 0310 	add.w	r3, r7, #16
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000210:	4b57      	ldr	r3, [pc, #348]	@ (8000370 <MX_GPIO_Init+0x174>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	4a56      	ldr	r2, [pc, #344]	@ (8000370 <MX_GPIO_Init+0x174>)
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6193      	str	r3, [r2, #24]
 800021c:	4b54      	ldr	r3, [pc, #336]	@ (8000370 <MX_GPIO_Init+0x174>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	f003 0310 	and.w	r3, r3, #16
 8000224:	60fb      	str	r3, [r7, #12]
 8000226:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000228:	4b51      	ldr	r3, [pc, #324]	@ (8000370 <MX_GPIO_Init+0x174>)
 800022a:	699b      	ldr	r3, [r3, #24]
 800022c:	4a50      	ldr	r2, [pc, #320]	@ (8000370 <MX_GPIO_Init+0x174>)
 800022e:	f043 0320 	orr.w	r3, r3, #32
 8000232:	6193      	str	r3, [r2, #24]
 8000234:	4b4e      	ldr	r3, [pc, #312]	@ (8000370 <MX_GPIO_Init+0x174>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	f003 0320 	and.w	r3, r3, #32
 800023c:	60bb      	str	r3, [r7, #8]
 800023e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000240:	4b4b      	ldr	r3, [pc, #300]	@ (8000370 <MX_GPIO_Init+0x174>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	4a4a      	ldr	r2, [pc, #296]	@ (8000370 <MX_GPIO_Init+0x174>)
 8000246:	f043 0304 	orr.w	r3, r3, #4
 800024a:	6193      	str	r3, [r2, #24]
 800024c:	4b48      	ldr	r3, [pc, #288]	@ (8000370 <MX_GPIO_Init+0x174>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	f003 0304 	and.w	r3, r3, #4
 8000254:	607b      	str	r3, [r7, #4]
 8000256:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000258:	4b45      	ldr	r3, [pc, #276]	@ (8000370 <MX_GPIO_Init+0x174>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a44      	ldr	r2, [pc, #272]	@ (8000370 <MX_GPIO_Init+0x174>)
 800025e:	f043 0308 	orr.w	r3, r3, #8
 8000262:	6193      	str	r3, [r2, #24]
 8000264:	4b42      	ldr	r3, [pc, #264]	@ (8000370 <MX_GPIO_Init+0x174>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	f003 0308 	and.w	r3, r3, #8
 800026c:	603b      	str	r3, [r7, #0]
 800026e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D8_Pin, GPIO_PIN_RESET);
 8000270:	2200      	movs	r2, #0
 8000272:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000276:	483f      	ldr	r0, [pc, #252]	@ (8000374 <MX_GPIO_Init+0x178>)
 8000278:	f000 fc89 	bl	8000b8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_Pin|D10_Pin, GPIO_PIN_RESET);
 800027c:	2200      	movs	r2, #0
 800027e:	2148      	movs	r1, #72	@ 0x48
 8000280:	483d      	ldr	r0, [pc, #244]	@ (8000378 <MX_GPIO_Init+0x17c>)
 8000282:	f000 fc84 	bl	8000b8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000286:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800028a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800028c:	4b3b      	ldr	r3, [pc, #236]	@ (800037c <MX_GPIO_Init+0x180>)
 800028e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000290:	2301      	movs	r3, #1
 8000292:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000294:	f107 0310 	add.w	r3, r7, #16
 8000298:	4619      	mov	r1, r3
 800029a:	4839      	ldr	r0, [pc, #228]	@ (8000380 <MX_GPIO_Init+0x184>)
 800029c:	f000 fadc 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_TX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 80002a0:	2304      	movs	r3, #4
 80002a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002a4:	2302      	movs	r3, #2
 80002a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002a8:	2303      	movs	r3, #3
 80002aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80002ac:	f107 0310 	add.w	r3, r7, #16
 80002b0:	4619      	mov	r1, r3
 80002b2:	4830      	ldr	r0, [pc, #192]	@ (8000374 <MX_GPIO_Init+0x178>)
 80002b4:	f000 fad0 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 80002b8:	2308      	movs	r3, #8
 80002ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002bc:	2300      	movs	r3, #0
 80002be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c0:	2300      	movs	r3, #0
 80002c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	4619      	mov	r1, r3
 80002ca:	482a      	ldr	r0, [pc, #168]	@ (8000374 <MX_GPIO_Init+0x178>)
 80002cc:	f000 fac4 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D8_Pin;
 80002d0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80002d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d6:	2301      	movs	r3, #1
 80002d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002da:	2302      	movs	r3, #2
 80002dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002de:	2302      	movs	r3, #2
 80002e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e2:	f107 0310 	add.w	r3, r7, #16
 80002e6:	4619      	mov	r1, r3
 80002e8:	4822      	ldr	r0, [pc, #136]	@ (8000374 <MX_GPIO_Init+0x178>)
 80002ea:	f000 fab5 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 80002ee:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 80002f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002f4:	2300      	movs	r3, #0
 80002f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002f8:	2301      	movs	r3, #1
 80002fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002fc:	f107 0310 	add.w	r3, r7, #16
 8000300:	4619      	mov	r1, r3
 8000302:	481d      	ldr	r0, [pc, #116]	@ (8000378 <MX_GPIO_Init+0x17c>)
 8000304:	f000 faa8 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 8000308:	2380      	movs	r3, #128	@ 0x80
 800030a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800030c:	2300      	movs	r3, #0
 800030e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000310:	2301      	movs	r3, #1
 8000312:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8000314:	f107 0310 	add.w	r3, r7, #16
 8000318:	4619      	mov	r1, r3
 800031a:	4819      	ldr	r0, [pc, #100]	@ (8000380 <MX_GPIO_Init+0x184>)
 800031c:	f000 fa9c 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pin : D2_Pin */
  GPIO_InitStruct.Pin = D2_Pin;
 8000320:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800032a:	2301      	movs	r3, #1
 800032c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D2_GPIO_Port, &GPIO_InitStruct);
 800032e:	f107 0310 	add.w	r3, r7, #16
 8000332:	4619      	mov	r1, r3
 8000334:	480f      	ldr	r0, [pc, #60]	@ (8000374 <MX_GPIO_Init+0x178>)
 8000336:	f000 fa8f 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D10_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D10_Pin;
 800033a:	2348      	movs	r3, #72	@ 0x48
 800033c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	2301      	movs	r3, #1
 8000340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000342:	2302      	movs	r3, #2
 8000344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000346:	2302      	movs	r3, #2
 8000348:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	4619      	mov	r1, r3
 8000350:	4809      	ldr	r0, [pc, #36]	@ (8000378 <MX_GPIO_Init+0x17c>)
 8000352:	f000 fa81 	bl	8000858 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000356:	2200      	movs	r2, #0
 8000358:	2100      	movs	r1, #0
 800035a:	2028      	movs	r0, #40	@ 0x28
 800035c:	f000 fa3f 	bl	80007de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000360:	2028      	movs	r0, #40	@ 0x28
 8000362:	f000 fa58 	bl	8000816 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000366:	bf00      	nop
 8000368:	3720      	adds	r7, #32
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000
 8000374:	40010800 	.word	0x40010800
 8000378:	40010c00 	.word	0x40010c00
 800037c:	10110000 	.word	0x10110000
 8000380:	40011000 	.word	0x40011000

08000384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000388:	b672      	cpsid	i
}
 800038a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800038c:	bf00      	nop
 800038e:	e7fd      	b.n	800038c <Error_Handler+0x8>

08000390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000396:	4b15      	ldr	r3, [pc, #84]	@ (80003ec <HAL_MspInit+0x5c>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4a14      	ldr	r2, [pc, #80]	@ (80003ec <HAL_MspInit+0x5c>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6193      	str	r3, [r2, #24]
 80003a2:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <HAL_MspInit+0x5c>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ae:	4b0f      	ldr	r3, [pc, #60]	@ (80003ec <HAL_MspInit+0x5c>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	4a0e      	ldr	r2, [pc, #56]	@ (80003ec <HAL_MspInit+0x5c>)
 80003b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003b8:	61d3      	str	r3, [r2, #28]
 80003ba:	4b0c      	ldr	r3, [pc, #48]	@ (80003ec <HAL_MspInit+0x5c>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003c6:	4b0a      	ldr	r3, [pc, #40]	@ (80003f0 <HAL_MspInit+0x60>)
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	4a04      	ldr	r2, [pc, #16]	@ (80003f0 <HAL_MspInit+0x60>)
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e2:	bf00      	nop
 80003e4:	3714      	adds	r7, #20
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40010000 	.word	0x40010000

080003f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <NMI_Handler+0x4>

080003fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <HardFault_Handler+0x4>

08000404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <MemManage_Handler+0x4>

0800040c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <BusFault_Handler+0x4>

08000414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000418:	bf00      	nop
 800041a:	e7fd      	b.n	8000418 <UsageFault_Handler+0x4>

0800041c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000444:	f000 f8b4 	bl	80005b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000448:	f000 f9ff 	bl	800084a <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}

08000450 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000454:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000458:	f000 fbb2 	bl	8000bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}

08000460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000468:	4a14      	ldr	r2, [pc, #80]	@ (80004bc <_sbrk+0x5c>)
 800046a:	4b15      	ldr	r3, [pc, #84]	@ (80004c0 <_sbrk+0x60>)
 800046c:	1ad3      	subs	r3, r2, r3
 800046e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000474:	4b13      	ldr	r3, [pc, #76]	@ (80004c4 <_sbrk+0x64>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d102      	bne.n	8000482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800047c:	4b11      	ldr	r3, [pc, #68]	@ (80004c4 <_sbrk+0x64>)
 800047e:	4a12      	ldr	r2, [pc, #72]	@ (80004c8 <_sbrk+0x68>)
 8000480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000482:	4b10      	ldr	r3, [pc, #64]	@ (80004c4 <_sbrk+0x64>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4413      	add	r3, r2
 800048a:	693a      	ldr	r2, [r7, #16]
 800048c:	429a      	cmp	r2, r3
 800048e:	d207      	bcs.n	80004a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000490:	f002 fd14 	bl	8002ebc <__errno>
 8000494:	4603      	mov	r3, r0
 8000496:	220c      	movs	r2, #12
 8000498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800049a:	f04f 33ff 	mov.w	r3, #4294967295
 800049e:	e009      	b.n	80004b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004a0:	4b08      	ldr	r3, [pc, #32]	@ (80004c4 <_sbrk+0x64>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004a6:	4b07      	ldr	r3, [pc, #28]	@ (80004c4 <_sbrk+0x64>)
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4413      	add	r3, r2
 80004ae:	4a05      	ldr	r2, [pc, #20]	@ (80004c4 <_sbrk+0x64>)
 80004b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004b2:	68fb      	ldr	r3, [r7, #12]
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	3718      	adds	r7, #24
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20005000 	.word	0x20005000
 80004c0:	00000400 	.word	0x00000400
 80004c4:	200000f8 	.word	0x200000f8
 80004c8:	200003b8 	.word	0x200003b8

080004cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004d8:	f7ff fff8 	bl	80004cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004dc:	480b      	ldr	r0, [pc, #44]	@ (800050c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004de:	490c      	ldr	r1, [pc, #48]	@ (8000510 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000514 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e4:	e002      	b.n	80004ec <LoopCopyDataInit>

080004e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ea:	3304      	adds	r3, #4

080004ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f0:	d3f9      	bcc.n	80004e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f2:	4a09      	ldr	r2, [pc, #36]	@ (8000518 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004f4:	4c09      	ldr	r4, [pc, #36]	@ (800051c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f8:	e001      	b.n	80004fe <LoopFillZerobss>

080004fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004fc:	3204      	adds	r2, #4

080004fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000500:	d3fb      	bcc.n	80004fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000502:	f002 fce1 	bl	8002ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000506:	f7ff fe29 	bl	800015c <main>
  bx lr
 800050a:	4770      	bx	lr
  ldr r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000510:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8000514:	08004210 	.word	0x08004210
  ldr r2, =_sbss
 8000518:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 800051c:	200003b8 	.word	0x200003b8

08000520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000520:	e7fe      	b.n	8000520 <ADC1_2_IRQHandler>
	...

08000524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000528:	4b08      	ldr	r3, [pc, #32]	@ (800054c <HAL_Init+0x28>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a07      	ldr	r2, [pc, #28]	@ (800054c <HAL_Init+0x28>)
 800052e:	f043 0310 	orr.w	r3, r3, #16
 8000532:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000534:	2003      	movs	r0, #3
 8000536:	f000 f947 	bl	80007c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800053a:	2000      	movs	r0, #0
 800053c:	f000 f808 	bl	8000550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000540:	f7ff ff26 	bl	8000390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000544:	2300      	movs	r3, #0
}
 8000546:	4618      	mov	r0, r3
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40022000 	.word	0x40022000

08000550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000558:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <HAL_InitTick+0x54>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b12      	ldr	r3, [pc, #72]	@ (80005a8 <HAL_InitTick+0x58>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4619      	mov	r1, r3
 8000562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000566:	fbb3 f3f1 	udiv	r3, r3, r1
 800056a:	fbb2 f3f3 	udiv	r3, r2, r3
 800056e:	4618      	mov	r0, r3
 8000570:	f000 f95f 	bl	8000832 <HAL_SYSTICK_Config>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057a:	2301      	movs	r3, #1
 800057c:	e00e      	b.n	800059c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2b0f      	cmp	r3, #15
 8000582:	d80a      	bhi.n	800059a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000584:	2200      	movs	r2, #0
 8000586:	6879      	ldr	r1, [r7, #4]
 8000588:	f04f 30ff 	mov.w	r0, #4294967295
 800058c:	f000 f927 	bl	80007de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000590:	4a06      	ldr	r2, [pc, #24]	@ (80005ac <HAL_InitTick+0x5c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000596:	2300      	movs	r3, #0
 8000598:	e000      	b.n	800059c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059a:	2301      	movs	r3, #1
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000000 	.word	0x20000000
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000004 	.word	0x20000004

080005b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b4:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <HAL_IncTick+0x1c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <HAL_IncTick+0x20>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	4a03      	ldr	r2, [pc, #12]	@ (80005d0 <HAL_IncTick+0x20>)
 80005c2:	6013      	str	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	20000008 	.word	0x20000008
 80005d0:	200000fc 	.word	0x200000fc

080005d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  return uwTick;
 80005d8:	4b02      	ldr	r3, [pc, #8]	@ (80005e4 <HAL_GetTick+0x10>)
 80005da:	681b      	ldr	r3, [r3, #0]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	200000fc 	.word	0x200000fc

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff fff0 	bl	80005d4 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000602:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <HAL_Delay+0x44>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffe0 	bl	80005d4 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000008 	.word	0x20000008

08000630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800065c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000662:	4a04      	ldr	r2, [pc, #16]	@ (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b04      	ldr	r3, [pc, #16]	@ (8000690 <__NVIC_GetPriorityGrouping+0x18>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	f003 0307 	and.w	r3, r3, #7
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db0b      	blt.n	80006be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 021f 	and.w	r2, r3, #31
 80006ac:	4906      	ldr	r1, [pc, #24]	@ (80006c8 <__NVIC_EnableIRQ+0x34>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	095b      	lsrs	r3, r3, #5
 80006b4:	2001      	movs	r0, #1
 80006b6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	e000e100 	.word	0xe000e100

080006cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	@ (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	@ (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000720:	b480      	push	{r7}
 8000722:	b089      	sub	sp, #36	@ 0x24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f1c3 0307 	rsb	r3, r3, #7
 800073a:	2b04      	cmp	r3, #4
 800073c:	bf28      	it	cs
 800073e:	2304      	movcs	r3, #4
 8000740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3304      	adds	r3, #4
 8000746:	2b06      	cmp	r3, #6
 8000748:	d902      	bls.n	8000750 <NVIC_EncodePriority+0x30>
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3b03      	subs	r3, #3
 800074e:	e000      	b.n	8000752 <NVIC_EncodePriority+0x32>
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43da      	mvns	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	401a      	ands	r2, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43d9      	mvns	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	4313      	orrs	r3, r2
         );
}
 800077a:	4618      	mov	r0, r3
 800077c:	3724      	adds	r7, #36	@ 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000794:	d301      	bcc.n	800079a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000796:	2301      	movs	r3, #1
 8000798:	e00f      	b.n	80007ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079a:	4a0a      	ldr	r2, [pc, #40]	@ (80007c4 <SysTick_Config+0x40>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a2:	210f      	movs	r1, #15
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295
 80007a8:	f7ff ff90 	bl	80006cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <SysTick_Config+0x40>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b2:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <SysTick_Config+0x40>)
 80007b4:	2207      	movs	r2, #7
 80007b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	e000e010 	.word	0xe000e010

080007c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ff2d 	bl	8000630 <__NVIC_SetPriorityGrouping>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007de:	b580      	push	{r7, lr}
 80007e0:	b086      	sub	sp, #24
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
 80007ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f0:	f7ff ff42 	bl	8000678 <__NVIC_GetPriorityGrouping>
 80007f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	68b9      	ldr	r1, [r7, #8]
 80007fa:	6978      	ldr	r0, [r7, #20]
 80007fc:	f7ff ff90 	bl	8000720 <NVIC_EncodePriority>
 8000800:	4602      	mov	r2, r0
 8000802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff5f 	bl	80006cc <__NVIC_SetPriority>
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff35 	bl	8000694 <__NVIC_EnableIRQ>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ffa2 	bl	8000784 <SysTick_Config>
 8000840:	4603      	mov	r3, r0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800084e:	f000 fed5 	bl	80015fc <HAL_SYSTICK_Callback>
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000858:	b480      	push	{r7}
 800085a:	b08b      	sub	sp, #44	@ 0x2c
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800086a:	e169      	b.n	8000b40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800086c:	2201      	movs	r2, #1
 800086e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	69fa      	ldr	r2, [r7, #28]
 800087c:	4013      	ands	r3, r2
 800087e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	429a      	cmp	r2, r3
 8000886:	f040 8158 	bne.w	8000b3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	4a9a      	ldr	r2, [pc, #616]	@ (8000af8 <HAL_GPIO_Init+0x2a0>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d05e      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 8000894:	4a98      	ldr	r2, [pc, #608]	@ (8000af8 <HAL_GPIO_Init+0x2a0>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d875      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 800089a:	4a98      	ldr	r2, [pc, #608]	@ (8000afc <HAL_GPIO_Init+0x2a4>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d058      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008a0:	4a96      	ldr	r2, [pc, #600]	@ (8000afc <HAL_GPIO_Init+0x2a4>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d86f      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008a6:	4a96      	ldr	r2, [pc, #600]	@ (8000b00 <HAL_GPIO_Init+0x2a8>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d052      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008ac:	4a94      	ldr	r2, [pc, #592]	@ (8000b00 <HAL_GPIO_Init+0x2a8>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d869      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008b2:	4a94      	ldr	r2, [pc, #592]	@ (8000b04 <HAL_GPIO_Init+0x2ac>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d04c      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008b8:	4a92      	ldr	r2, [pc, #584]	@ (8000b04 <HAL_GPIO_Init+0x2ac>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d863      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008be:	4a92      	ldr	r2, [pc, #584]	@ (8000b08 <HAL_GPIO_Init+0x2b0>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d046      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008c4:	4a90      	ldr	r2, [pc, #576]	@ (8000b08 <HAL_GPIO_Init+0x2b0>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d85d      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008ca:	2b12      	cmp	r3, #18
 80008cc:	d82a      	bhi.n	8000924 <HAL_GPIO_Init+0xcc>
 80008ce:	2b12      	cmp	r3, #18
 80008d0:	d859      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008d2:	a201      	add	r2, pc, #4	@ (adr r2, 80008d8 <HAL_GPIO_Init+0x80>)
 80008d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d8:	08000953 	.word	0x08000953
 80008dc:	0800092d 	.word	0x0800092d
 80008e0:	0800093f 	.word	0x0800093f
 80008e4:	08000981 	.word	0x08000981
 80008e8:	08000987 	.word	0x08000987
 80008ec:	08000987 	.word	0x08000987
 80008f0:	08000987 	.word	0x08000987
 80008f4:	08000987 	.word	0x08000987
 80008f8:	08000987 	.word	0x08000987
 80008fc:	08000987 	.word	0x08000987
 8000900:	08000987 	.word	0x08000987
 8000904:	08000987 	.word	0x08000987
 8000908:	08000987 	.word	0x08000987
 800090c:	08000987 	.word	0x08000987
 8000910:	08000987 	.word	0x08000987
 8000914:	08000987 	.word	0x08000987
 8000918:	08000987 	.word	0x08000987
 800091c:	08000935 	.word	0x08000935
 8000920:	08000949 	.word	0x08000949
 8000924:	4a79      	ldr	r2, [pc, #484]	@ (8000b0c <HAL_GPIO_Init+0x2b4>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d013      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800092a:	e02c      	b.n	8000986 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	623b      	str	r3, [r7, #32]
          break;
 8000932:	e029      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	3304      	adds	r3, #4
 800093a:	623b      	str	r3, [r7, #32]
          break;
 800093c:	e024      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	3308      	adds	r3, #8
 8000944:	623b      	str	r3, [r7, #32]
          break;
 8000946:	e01f      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	330c      	adds	r3, #12
 800094e:	623b      	str	r3, [r7, #32]
          break;
 8000950:	e01a      	b.n	8000988 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d102      	bne.n	8000960 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800095a:	2304      	movs	r3, #4
 800095c:	623b      	str	r3, [r7, #32]
          break;
 800095e:	e013      	b.n	8000988 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d105      	bne.n	8000974 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000968:	2308      	movs	r3, #8
 800096a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	69fa      	ldr	r2, [r7, #28]
 8000970:	611a      	str	r2, [r3, #16]
          break;
 8000972:	e009      	b.n	8000988 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000974:	2308      	movs	r3, #8
 8000976:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	69fa      	ldr	r2, [r7, #28]
 800097c:	615a      	str	r2, [r3, #20]
          break;
 800097e:	e003      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
          break;
 8000984:	e000      	b.n	8000988 <HAL_GPIO_Init+0x130>
          break;
 8000986:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	2bff      	cmp	r3, #255	@ 0xff
 800098c:	d801      	bhi.n	8000992 <HAL_GPIO_Init+0x13a>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	e001      	b.n	8000996 <HAL_GPIO_Init+0x13e>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3304      	adds	r3, #4
 8000996:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	2bff      	cmp	r3, #255	@ 0xff
 800099c:	d802      	bhi.n	80009a4 <HAL_GPIO_Init+0x14c>
 800099e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	e002      	b.n	80009aa <HAL_GPIO_Init+0x152>
 80009a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a6:	3b08      	subs	r3, #8
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	210f      	movs	r1, #15
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	fa01 f303 	lsl.w	r3, r1, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	401a      	ands	r2, r3
 80009bc:	6a39      	ldr	r1, [r7, #32]
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	431a      	orrs	r2, r3
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 80b1 	beq.w	8000b3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009d8:	4b4d      	ldr	r3, [pc, #308]	@ (8000b10 <HAL_GPIO_Init+0x2b8>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a4c      	ldr	r2, [pc, #304]	@ (8000b10 <HAL_GPIO_Init+0x2b8>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b4a      	ldr	r3, [pc, #296]	@ (8000b10 <HAL_GPIO_Init+0x2b8>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009f0:	4a48      	ldr	r2, [pc, #288]	@ (8000b14 <HAL_GPIO_Init+0x2bc>)
 80009f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f4:	089b      	lsrs	r3, r3, #2
 80009f6:	3302      	adds	r3, #2
 80009f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a00:	f003 0303 	and.w	r3, r3, #3
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	220f      	movs	r2, #15
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a40      	ldr	r2, [pc, #256]	@ (8000b18 <HAL_GPIO_Init+0x2c0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d013      	beq.n	8000a44 <HAL_GPIO_Init+0x1ec>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a3f      	ldr	r2, [pc, #252]	@ (8000b1c <HAL_GPIO_Init+0x2c4>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d00d      	beq.n	8000a40 <HAL_GPIO_Init+0x1e8>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a3e      	ldr	r2, [pc, #248]	@ (8000b20 <HAL_GPIO_Init+0x2c8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d007      	beq.n	8000a3c <HAL_GPIO_Init+0x1e4>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b24 <HAL_GPIO_Init+0x2cc>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d101      	bne.n	8000a38 <HAL_GPIO_Init+0x1e0>
 8000a34:	2303      	movs	r3, #3
 8000a36:	e006      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a38:	2304      	movs	r3, #4
 8000a3a:	e004      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	e002      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a40:	2301      	movs	r3, #1
 8000a42:	e000      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a44:	2300      	movs	r3, #0
 8000a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a48:	f002 0203 	and.w	r2, r2, #3
 8000a4c:	0092      	lsls	r2, r2, #2
 8000a4e:	4093      	lsls	r3, r2
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a56:	492f      	ldr	r1, [pc, #188]	@ (8000b14 <HAL_GPIO_Init+0x2bc>)
 8000a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a5a:	089b      	lsrs	r3, r3, #2
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d006      	beq.n	8000a7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a70:	4b2d      	ldr	r3, [pc, #180]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	492c      	ldr	r1, [pc, #176]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	608b      	str	r3, [r1, #8]
 8000a7c:	e006      	b.n	8000a8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	4928      	ldr	r1, [pc, #160]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a88:	4013      	ands	r3, r2
 8000a8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a98:	4b23      	ldr	r3, [pc, #140]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a9a:	68da      	ldr	r2, [r3, #12]
 8000a9c:	4922      	ldr	r1, [pc, #136]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	60cb      	str	r3, [r1, #12]
 8000aa4:	e006      	b.n	8000ab4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aa6:	4b20      	ldr	r3, [pc, #128]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000aa8:	68da      	ldr	r2, [r3, #12]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	491e      	ldr	r1, [pc, #120]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d006      	beq.n	8000ace <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ac0:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	4918      	ldr	r1, [pc, #96]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	604b      	str	r3, [r1, #4]
 8000acc:	e006      	b.n	8000adc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ace:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	4914      	ldr	r1, [pc, #80]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	4013      	ands	r3, r2
 8000ada:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d021      	beq.n	8000b2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	490e      	ldr	r1, [pc, #56]	@ (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	600b      	str	r3, [r1, #0]
 8000af4:	e021      	b.n	8000b3a <HAL_GPIO_Init+0x2e2>
 8000af6:	bf00      	nop
 8000af8:	10320000 	.word	0x10320000
 8000afc:	10310000 	.word	0x10310000
 8000b00:	10220000 	.word	0x10220000
 8000b04:	10210000 	.word	0x10210000
 8000b08:	10120000 	.word	0x10120000
 8000b0c:	10110000 	.word	0x10110000
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010000 	.word	0x40010000
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	40010c00 	.word	0x40010c00
 8000b20:	40011000 	.word	0x40011000
 8000b24:	40011400 	.word	0x40011400
 8000b28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <HAL_GPIO_Init+0x304>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	43db      	mvns	r3, r3
 8000b34:	4909      	ldr	r1, [pc, #36]	@ (8000b5c <HAL_GPIO_Init+0x304>)
 8000b36:	4013      	ands	r3, r2
 8000b38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b46:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f47f ae8e 	bne.w	800086c <HAL_GPIO_Init+0x14>
  }
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	372c      	adds	r7, #44	@ 0x2c
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	40010400 	.word	0x40010400

08000b60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689a      	ldr	r2, [r3, #8]
 8000b70:	887b      	ldrh	r3, [r7, #2]
 8000b72:	4013      	ands	r3, r2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d002      	beq.n	8000b7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	73fb      	strb	r3, [r7, #15]
 8000b7c:	e001      	b.n	8000b82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	460b      	mov	r3, r1
 8000b98:	807b      	strh	r3, [r7, #2]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b9e:	787b      	ldrb	r3, [r7, #1]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ba4:	887a      	ldrh	r2, [r7, #2]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000baa:	e003      	b.n	8000bb4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bac:	887b      	ldrh	r3, [r7, #2]
 8000bae:	041a      	lsls	r2, r3, #16
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	611a      	str	r2, [r3, #16]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
	...

08000bc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bcc:	695a      	ldr	r2, [r3, #20]
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d006      	beq.n	8000be4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bd6:	4a05      	ldr	r2, [pc, #20]	@ (8000bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f806 	bl	8000bf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40010400 	.word	0x40010400

08000bf0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d101      	bne.n	8000c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e272      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 8087 	beq.w	8000d32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c24:	4b92      	ldr	r3, [pc, #584]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 030c 	and.w	r3, r3, #12
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	d00c      	beq.n	8000c4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c30:	4b8f      	ldr	r3, [pc, #572]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 030c 	and.w	r3, r3, #12
 8000c38:	2b08      	cmp	r3, #8
 8000c3a:	d112      	bne.n	8000c62 <HAL_RCC_OscConfig+0x5e>
 8000c3c:	4b8c      	ldr	r3, [pc, #560]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c48:	d10b      	bne.n	8000c62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c4a:	4b89      	ldr	r3, [pc, #548]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d06c      	beq.n	8000d30 <HAL_RCC_OscConfig+0x12c>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d168      	bne.n	8000d30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e24c      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c6a:	d106      	bne.n	8000c7a <HAL_RCC_OscConfig+0x76>
 8000c6c:	4b80      	ldr	r3, [pc, #512]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a7f      	ldr	r2, [pc, #508]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	e02e      	b.n	8000cd8 <HAL_RCC_OscConfig+0xd4>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10c      	bne.n	8000c9c <HAL_RCC_OscConfig+0x98>
 8000c82:	4b7b      	ldr	r3, [pc, #492]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a7a      	ldr	r2, [pc, #488]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	4b78      	ldr	r3, [pc, #480]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a77      	ldr	r2, [pc, #476]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	e01d      	b.n	8000cd8 <HAL_RCC_OscConfig+0xd4>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ca4:	d10c      	bne.n	8000cc0 <HAL_RCC_OscConfig+0xbc>
 8000ca6:	4b72      	ldr	r3, [pc, #456]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a71      	ldr	r2, [pc, #452]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	4b6f      	ldr	r3, [pc, #444]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a6e      	ldr	r2, [pc, #440]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	e00b      	b.n	8000cd8 <HAL_RCC_OscConfig+0xd4>
 8000cc0:	4b6b      	ldr	r3, [pc, #428]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a6a      	ldr	r2, [pc, #424]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b68      	ldr	r3, [pc, #416]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a67      	ldr	r2, [pc, #412]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000cd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d013      	beq.n	8000d08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fc78 	bl	80005d4 <HAL_GetTick>
 8000ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce6:	e008      	b.n	8000cfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ce8:	f7ff fc74 	bl	80005d4 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b64      	cmp	r3, #100	@ 0x64
 8000cf4:	d901      	bls.n	8000cfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e200      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0f0      	beq.n	8000ce8 <HAL_RCC_OscConfig+0xe4>
 8000d06:	e014      	b.n	8000d32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fc64 	bl	80005d4 <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d10:	f7ff fc60 	bl	80005d4 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b64      	cmp	r3, #100	@ 0x64
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e1ec      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d22:	4b53      	ldr	r3, [pc, #332]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1f0      	bne.n	8000d10 <HAL_RCC_OscConfig+0x10c>
 8000d2e:	e000      	b.n	8000d32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d063      	beq.n	8000e06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d3e:	4b4c      	ldr	r3, [pc, #304]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 030c 	and.w	r3, r3, #12
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d00b      	beq.n	8000d62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d4a:	4b49      	ldr	r3, [pc, #292]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 030c 	and.w	r3, r3, #12
 8000d52:	2b08      	cmp	r3, #8
 8000d54:	d11c      	bne.n	8000d90 <HAL_RCC_OscConfig+0x18c>
 8000d56:	4b46      	ldr	r3, [pc, #280]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d116      	bne.n	8000d90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d62:	4b43      	ldr	r3, [pc, #268]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d005      	beq.n	8000d7a <HAL_RCC_OscConfig+0x176>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d001      	beq.n	8000d7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e1c0      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	4939      	ldr	r1, [pc, #228]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8e:	e03a      	b.n	8000e06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d020      	beq.n	8000dda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d98:	4b36      	ldr	r3, [pc, #216]	@ (8000e74 <HAL_RCC_OscConfig+0x270>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9e:	f7ff fc19 	bl	80005d4 <HAL_GetTick>
 8000da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da4:	e008      	b.n	8000db8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000da6:	f7ff fc15 	bl	80005d4 <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d901      	bls.n	8000db8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	e1a1      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db8:	4b2d      	ldr	r3, [pc, #180]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0f0      	beq.n	8000da6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	4927      	ldr	r1, [pc, #156]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	600b      	str	r3, [r1, #0]
 8000dd8:	e015      	b.n	8000e06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dda:	4b26      	ldr	r3, [pc, #152]	@ (8000e74 <HAL_RCC_OscConfig+0x270>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de0:	f7ff fbf8 	bl	80005d4 <HAL_GetTick>
 8000de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000de8:	f7ff fbf4 	bl	80005d4 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e180      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f0      	bne.n	8000de8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d03a      	beq.n	8000e88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d019      	beq.n	8000e4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e1a:	4b17      	ldr	r3, [pc, #92]	@ (8000e78 <HAL_RCC_OscConfig+0x274>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e20:	f7ff fbd8 	bl	80005d4 <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e28:	f7ff fbd4 	bl	80005d4 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e160      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f0      	beq.n	8000e28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e46:	2001      	movs	r0, #1
 8000e48:	f000 fa9c 	bl	8001384 <RCC_Delay>
 8000e4c:	e01c      	b.n	8000e88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <HAL_RCC_OscConfig+0x274>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e54:	f7ff fbbe 	bl	80005d4 <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e5a:	e00f      	b.n	8000e7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e5c:	f7ff fbba 	bl	80005d4 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d908      	bls.n	8000e7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e146      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000
 8000e74:	42420000 	.word	0x42420000
 8000e78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e7c:	4b92      	ldr	r3, [pc, #584]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1e9      	bne.n	8000e5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 80a6 	beq.w	8000fe2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e9a:	4b8b      	ldr	r3, [pc, #556]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10d      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	4b88      	ldr	r3, [pc, #544]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a87      	ldr	r2, [pc, #540]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b85      	ldr	r3, [pc, #532]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec2:	4b82      	ldr	r3, [pc, #520]	@ (80010cc <HAL_RCC_OscConfig+0x4c8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d118      	bne.n	8000f00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ece:	4b7f      	ldr	r3, [pc, #508]	@ (80010cc <HAL_RCC_OscConfig+0x4c8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a7e      	ldr	r2, [pc, #504]	@ (80010cc <HAL_RCC_OscConfig+0x4c8>)
 8000ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eda:	f7ff fb7b 	bl	80005d4 <HAL_GetTick>
 8000ede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee0:	e008      	b.n	8000ef4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ee2:	f7ff fb77 	bl	80005d4 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b64      	cmp	r3, #100	@ 0x64
 8000eee:	d901      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e103      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef4:	4b75      	ldr	r3, [pc, #468]	@ (80010cc <HAL_RCC_OscConfig+0x4c8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d0f0      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d106      	bne.n	8000f16 <HAL_RCC_OscConfig+0x312>
 8000f08:	4b6f      	ldr	r3, [pc, #444]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	4a6e      	ldr	r2, [pc, #440]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6213      	str	r3, [r2, #32]
 8000f14:	e02d      	b.n	8000f72 <HAL_RCC_OscConfig+0x36e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10c      	bne.n	8000f38 <HAL_RCC_OscConfig+0x334>
 8000f1e:	4b6a      	ldr	r3, [pc, #424]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	4a69      	ldr	r2, [pc, #420]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	f023 0301 	bic.w	r3, r3, #1
 8000f28:	6213      	str	r3, [r2, #32]
 8000f2a:	4b67      	ldr	r3, [pc, #412]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	4a66      	ldr	r2, [pc, #408]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f30:	f023 0304 	bic.w	r3, r3, #4
 8000f34:	6213      	str	r3, [r2, #32]
 8000f36:	e01c      	b.n	8000f72 <HAL_RCC_OscConfig+0x36e>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	2b05      	cmp	r3, #5
 8000f3e:	d10c      	bne.n	8000f5a <HAL_RCC_OscConfig+0x356>
 8000f40:	4b61      	ldr	r3, [pc, #388]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	4a60      	ldr	r2, [pc, #384]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	6213      	str	r3, [r2, #32]
 8000f4c:	4b5e      	ldr	r3, [pc, #376]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	4a5d      	ldr	r2, [pc, #372]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6213      	str	r3, [r2, #32]
 8000f58:	e00b      	b.n	8000f72 <HAL_RCC_OscConfig+0x36e>
 8000f5a:	4b5b      	ldr	r3, [pc, #364]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	4a5a      	ldr	r2, [pc, #360]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	6213      	str	r3, [r2, #32]
 8000f66:	4b58      	ldr	r3, [pc, #352]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	6a1b      	ldr	r3, [r3, #32]
 8000f6a:	4a57      	ldr	r2, [pc, #348]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	f023 0304 	bic.w	r3, r3, #4
 8000f70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d015      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7a:	f7ff fb2b 	bl	80005d4 <HAL_GetTick>
 8000f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f80:	e00a      	b.n	8000f98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f82:	f7ff fb27 	bl	80005d4 <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e0b1      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f98:	4b4b      	ldr	r3, [pc, #300]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0ee      	beq.n	8000f82 <HAL_RCC_OscConfig+0x37e>
 8000fa4:	e014      	b.n	8000fd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa6:	f7ff fb15 	bl	80005d4 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fac:	e00a      	b.n	8000fc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fae:	f7ff fb11 	bl	80005d4 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e09b      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fc4:	4b40      	ldr	r3, [pc, #256]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1ee      	bne.n	8000fae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fd0:	7dfb      	ldrb	r3, [r7, #23]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d105      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fd6:	4b3c      	ldr	r3, [pc, #240]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	4a3b      	ldr	r2, [pc, #236]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000fe0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 8087 	beq.w	80010fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fec:	4b36      	ldr	r3, [pc, #216]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 030c 	and.w	r3, r3, #12
 8000ff4:	2b08      	cmp	r3, #8
 8000ff6:	d061      	beq.n	80010bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d146      	bne.n	800108e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001000:	4b33      	ldr	r3, [pc, #204]	@ (80010d0 <HAL_RCC_OscConfig+0x4cc>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001006:	f7ff fae5 	bl	80005d4 <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800100e:	f7ff fae1 	bl	80005d4 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e06d      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001020:	4b29      	ldr	r3, [pc, #164]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f0      	bne.n	800100e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001034:	d108      	bne.n	8001048 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001036:	4b24      	ldr	r3, [pc, #144]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	4921      	ldr	r1, [pc, #132]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8001044:	4313      	orrs	r3, r2
 8001046:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001048:	4b1f      	ldr	r3, [pc, #124]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a19      	ldr	r1, [r3, #32]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001058:	430b      	orrs	r3, r1
 800105a:	491b      	ldr	r1, [pc, #108]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 800105c:	4313      	orrs	r3, r2
 800105e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001060:	4b1b      	ldr	r3, [pc, #108]	@ (80010d0 <HAL_RCC_OscConfig+0x4cc>)
 8001062:	2201      	movs	r2, #1
 8001064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001066:	f7ff fab5 	bl	80005d4 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800106e:	f7ff fab1 	bl	80005d4 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e03d      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f0      	beq.n	800106e <HAL_RCC_OscConfig+0x46a>
 800108c:	e035      	b.n	80010fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800108e:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <HAL_RCC_OscConfig+0x4cc>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fa9e 	bl	80005d4 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800109c:	f7ff fa9a 	bl	80005d4 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e026      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ae:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0x498>
 80010ba:	e01e      	b.n	80010fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d107      	bne.n	80010d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e019      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40007000 	.word	0x40007000
 80010d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <HAL_RCC_OscConfig+0x500>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d001      	beq.n	80010fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40021000 	.word	0x40021000

08001108 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e0d0      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800111c:	4b6a      	ldr	r3, [pc, #424]	@ (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d910      	bls.n	800114c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112a:	4b67      	ldr	r3, [pc, #412]	@ (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 0207 	bic.w	r2, r3, #7
 8001132:	4965      	ldr	r1, [pc, #404]	@ (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	4313      	orrs	r3, r2
 8001138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800113a:	4b63      	ldr	r3, [pc, #396]	@ (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d001      	beq.n	800114c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e0b8      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d020      	beq.n	800119a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001164:	4b59      	ldr	r3, [pc, #356]	@ (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4a58      	ldr	r2, [pc, #352]	@ (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 800116a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800116e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0308 	and.w	r3, r3, #8
 8001178:	2b00      	cmp	r3, #0
 800117a:	d005      	beq.n	8001188 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800117c:	4b53      	ldr	r3, [pc, #332]	@ (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	4a52      	ldr	r2, [pc, #328]	@ (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001182:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001186:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001188:	4b50      	ldr	r3, [pc, #320]	@ (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	494d      	ldr	r1, [pc, #308]	@ (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001196:	4313      	orrs	r3, r2
 8001198:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d040      	beq.n	8001228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d107      	bne.n	80011be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	4b47      	ldr	r3, [pc, #284]	@ (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d115      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e07f      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d107      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011c6:	4b41      	ldr	r3, [pc, #260]	@ (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d109      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e073      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d6:	4b3d      	ldr	r3, [pc, #244]	@ (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e06b      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011e6:	4b39      	ldr	r3, [pc, #228]	@ (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f023 0203 	bic.w	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	4936      	ldr	r1, [pc, #216]	@ (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011f8:	f7ff f9ec 	bl	80005d4 <HAL_GetTick>
 80011fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fe:	e00a      	b.n	8001216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001200:	f7ff f9e8 	bl	80005d4 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800120e:	4293      	cmp	r3, r2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e053      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001216:	4b2d      	ldr	r3, [pc, #180]	@ (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 020c 	and.w	r2, r3, #12
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	429a      	cmp	r2, r3
 8001226:	d1eb      	bne.n	8001200 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001228:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d210      	bcs.n	8001258 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001236:	4b24      	ldr	r3, [pc, #144]	@ (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f023 0207 	bic.w	r2, r3, #7
 800123e:	4922      	ldr	r1, [pc, #136]	@ (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001246:	4b20      	ldr	r3, [pc, #128]	@ (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d001      	beq.n	8001258 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e032      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	2b00      	cmp	r3, #0
 8001262:	d008      	beq.n	8001276 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001264:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	4916      	ldr	r1, [pc, #88]	@ (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	4313      	orrs	r3, r2
 8001274:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d009      	beq.n	8001296 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001282:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	490e      	ldr	r1, [pc, #56]	@ (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	4313      	orrs	r3, r2
 8001294:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001296:	f000 f821 	bl	80012dc <HAL_RCC_GetSysClockFreq>
 800129a:	4602      	mov	r2, r0
 800129c:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	490a      	ldr	r1, [pc, #40]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c8>)
 80012a8:	5ccb      	ldrb	r3, [r1, r3]
 80012aa:	fa22 f303 	lsr.w	r3, r2, r3
 80012ae:	4a09      	ldr	r2, [pc, #36]	@ (80012d4 <HAL_RCC_ClockConfig+0x1cc>)
 80012b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012b2:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <HAL_RCC_ClockConfig+0x1d0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f94a 	bl	8000550 <HAL_InitTick>

  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40022000 	.word	0x40022000
 80012cc:	40021000 	.word	0x40021000
 80012d0:	080040c0 	.word	0x080040c0
 80012d4:	20000000 	.word	0x20000000
 80012d8:	20000004 	.word	0x20000004

080012dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <HAL_RCC_GetSysClockFreq+0x94>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b04      	cmp	r3, #4
 8001304:	d002      	beq.n	800130c <HAL_RCC_GetSysClockFreq+0x30>
 8001306:	2b08      	cmp	r3, #8
 8001308:	d003      	beq.n	8001312 <HAL_RCC_GetSysClockFreq+0x36>
 800130a:	e027      	b.n	800135c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800130c:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <HAL_RCC_GetSysClockFreq+0x98>)
 800130e:	613b      	str	r3, [r7, #16]
      break;
 8001310:	e027      	b.n	8001362 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	0c9b      	lsrs	r3, r3, #18
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	4a17      	ldr	r2, [pc, #92]	@ (8001378 <HAL_RCC_GetSysClockFreq+0x9c>)
 800131c:	5cd3      	ldrb	r3, [r2, r3]
 800131e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d010      	beq.n	800134c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <HAL_RCC_GetSysClockFreq+0x94>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	0c5b      	lsrs	r3, r3, #17
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	4a11      	ldr	r2, [pc, #68]	@ (800137c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001336:	5cd3      	ldrb	r3, [r2, r3]
 8001338:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <HAL_RCC_GetSysClockFreq+0x98>)
 800133e:	fb03 f202 	mul.w	r2, r3, r2
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	fbb2 f3f3 	udiv	r3, r2, r3
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	e004      	b.n	8001356 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a0c      	ldr	r2, [pc, #48]	@ (8001380 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001350:	fb02 f303 	mul.w	r3, r2, r3
 8001354:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	613b      	str	r3, [r7, #16]
      break;
 800135a:	e002      	b.n	8001362 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800135c:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <HAL_RCC_GetSysClockFreq+0x98>)
 800135e:	613b      	str	r3, [r7, #16]
      break;
 8001360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001362:	693b      	ldr	r3, [r7, #16]
}
 8001364:	4618      	mov	r0, r3
 8001366:	371c      	adds	r7, #28
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000
 8001374:	007a1200 	.word	0x007a1200
 8001378:	080040d0 	.word	0x080040d0
 800137c:	080040e0 	.word	0x080040e0
 8001380:	003d0900 	.word	0x003d0900

08001384 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800138c:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <RCC_Delay+0x34>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <RCC_Delay+0x38>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	0a5b      	lsrs	r3, r3, #9
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013a0:	bf00      	nop
  }
  while (Delay --);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	1e5a      	subs	r2, r3, #1
 80013a6:	60fa      	str	r2, [r7, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f9      	bne.n	80013a0 <RCC_Delay+0x1c>
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	20000000 	.word	0x20000000
 80013bc:	10624dd3 	.word	0x10624dd3

080013c0 <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 80013c6:	b672      	cpsid	i
 80013c8:	4b4a      	ldr	r3, [pc, #296]	@ (80014f4 <app_init+0x134>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a4a      	ldr	r2, [pc, #296]	@ (80014f8 <app_init+0x138>)
 80013ce:	213f      	movs	r1, #63	@ 0x3f
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 fcad 	bl	8002d30 <sniprintf>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a48      	ldr	r2, [pc, #288]	@ (80014fc <app_init+0x13c>)
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b45      	ldr	r3, [pc, #276]	@ (80014f4 <app_init+0x134>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f92d 	bl	8001640 <logger_log_print_>
 80013e6:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)HAL_GetTick());
 80013e8:	b672      	cpsid	i
 80013ea:	4b42      	ldr	r3, [pc, #264]	@ (80014f4 <app_init+0x134>)
 80013ec:	681c      	ldr	r4, [r3, #0]
 80013ee:	f7ff f8f1 	bl	80005d4 <HAL_GetTick>
 80013f2:	4603      	mov	r3, r0
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	4b42      	ldr	r3, [pc, #264]	@ (8001500 <app_init+0x140>)
 80013f8:	4a42      	ldr	r2, [pc, #264]	@ (8001504 <app_init+0x144>)
 80013fa:	213f      	movs	r1, #63	@ 0x3f
 80013fc:	4620      	mov	r0, r4
 80013fe:	f001 fc97 	bl	8002d30 <sniprintf>
 8001402:	4603      	mov	r3, r0
 8001404:	4a3d      	ldr	r2, [pc, #244]	@ (80014fc <app_init+0x13c>)
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b3a      	ldr	r3, [pc, #232]	@ (80014f4 <app_init+0x134>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f000 f917 	bl	8001640 <logger_log_print_>
 8001412:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 8001414:	b672      	cpsid	i
 8001416:	4b37      	ldr	r3, [pc, #220]	@ (80014f4 <app_init+0x134>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a3b      	ldr	r2, [pc, #236]	@ (8001508 <app_init+0x148>)
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	213f      	movs	r1, #63	@ 0x3f
 8001420:	4618      	mov	r0, r3
 8001422:	f001 fc85 	bl	8002d30 <sniprintf>
 8001426:	4603      	mov	r3, r0
 8001428:	4a34      	ldr	r2, [pc, #208]	@ (80014fc <app_init+0x13c>)
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b31      	ldr	r3, [pc, #196]	@ (80014f4 <app_init+0x134>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 f905 	bl	8001640 <logger_log_print_>
 8001436:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 8001438:	b672      	cpsid	i
 800143a:	4b2e      	ldr	r3, [pc, #184]	@ (80014f4 <app_init+0x134>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a33      	ldr	r2, [pc, #204]	@ (800150c <app_init+0x14c>)
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	213f      	movs	r1, #63	@ 0x3f
 8001444:	4618      	mov	r0, r3
 8001446:	f001 fc73 	bl	8002d30 <sniprintf>
 800144a:	4603      	mov	r3, r0
 800144c:	4a2b      	ldr	r2, [pc, #172]	@ (80014fc <app_init+0x13c>)
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <app_init+0x134>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 f8f3 	bl	8001640 <logger_log_print_>
 800145a:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 800145c:	4b2c      	ldr	r3, [pc, #176]	@ (8001510 <app_init+0x150>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %d\r\n", GET_NAME(g_app_cnt), (int)g_app_cnt);
 8001462:	b672      	cpsid	i
 8001464:	4b23      	ldr	r3, [pc, #140]	@ (80014f4 <app_init+0x134>)
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <app_init+0x150>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <app_init+0x154>)
 8001470:	4a29      	ldr	r2, [pc, #164]	@ (8001518 <app_init+0x158>)
 8001472:	213f      	movs	r1, #63	@ 0x3f
 8001474:	f001 fc5c 	bl	8002d30 <sniprintf>
 8001478:	4603      	mov	r3, r0
 800147a:	4a20      	ldr	r2, [pc, #128]	@ (80014fc <app_init+0x13c>)
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <app_init+0x134>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f8dc 	bl	8001640 <logger_log_print_>
 8001488:	b662      	cpsie	i

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	e01a      	b.n	80014c6 <app_init+0x106>
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 8001490:	4922      	ldr	r1, [pc, #136]	@ (800151c <app_init+0x15c>)
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	6819      	ldr	r1, [r3, #0]
 80014a0:	481e      	ldr	r0, [pc, #120]	@ (800151c <app_init+0x15c>)
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4403      	add	r3, r0
 80014ae:	3308      	adds	r3, #8
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 80014b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001520 <app_init+0x160>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2100      	movs	r1, #0
 80014bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; TASK_QTY > index; index++)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3301      	adds	r3, #1
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d9e1      	bls.n	8001490 <app_init+0xd0>
	}

	cycle_counter_init();
 80014cc:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <app_init+0x164>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	4a14      	ldr	r2, [pc, #80]	@ (8001524 <app_init+0x164>)
 80014d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014d6:	60d3      	str	r3, [r2, #12]
 80014d8:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <app_init+0x168>)
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <app_init+0x168>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a11      	ldr	r2, [pc, #68]	@ (8001528 <app_init+0x168>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6013      	str	r3, [r2, #0]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	080040e4 	.word	0x080040e4
 80014f8:	08003ce4 	.word	0x08003ce4
 80014fc:	20000158 	.word	0x20000158
 8001500:	08003ce8 	.word	0x08003ce8
 8001504:	08003cf4 	.word	0x08003cf4
 8001508:	20000030 	.word	0x20000030
 800150c:	20000034 	.word	0x20000034
 8001510:	20000100 	.word	0x20000100
 8001514:	08003d18 	.word	0x08003d18
 8001518:	08003d24 	.word	0x08003d24
 800151c:	2000000c 	.word	0x2000000c
 8001520:	2000010c 	.word	0x2000010c
 8001524:	e000edf0 	.word	0xe000edf0
 8001528:	e0001000 	.word	0xe0001000

0800152c <app_update>:

void app_update(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
	uint32_t index;
	uint32_t cycle_counter;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 8001532:	4b2a      	ldr	r3, [pc, #168]	@ (80015dc <app_update+0xb0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d04c      	beq.n	80015d4 <app_update+0xa8>
    {
    	g_app_tick_cnt--;
 800153a:	4b28      	ldr	r3, [pc, #160]	@ (80015dc <app_update+0xb0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3b01      	subs	r3, #1
 8001540:	4a26      	ldr	r2, [pc, #152]	@ (80015dc <app_update+0xb0>)
 8001542:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 8001544:	4b26      	ldr	r3, [pc, #152]	@ (80015e0 <app_update+0xb4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	4a25      	ldr	r2, [pc, #148]	@ (80015e0 <app_update+0xb4>)
 800154c:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 800154e:	4b25      	ldr	r3, [pc, #148]	@ (80015e4 <app_update+0xb8>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

    	/* Go through the task arrays */
    	for (index = 0; TASK_QTY > index; index++)
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	e039      	b.n	80015ce <app_update+0xa2>
    	{
			//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
			cycle_counter_reset();
 800155a:	4b23      	ldr	r3, [pc, #140]	@ (80015e8 <app_update+0xbc>)
 800155c:	2200      	movs	r2, #0
 800155e:	605a      	str	r2, [r3, #4]

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 8001560:	4922      	ldr	r1, [pc, #136]	@ (80015ec <app_update+0xc0>)
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	3304      	adds	r3, #4
 8001570:	6819      	ldr	r1, [r3, #0]
 8001572:	481e      	ldr	r0, [pc, #120]	@ (80015ec <app_update+0xc0>)
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4403      	add	r3, r0
 8001580:	3308      	adds	r3, #8
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	4788      	blx	r1

			cycle_counter = cycle_counter_get();
 8001588:	4b17      	ldr	r3, [pc, #92]	@ (80015e8 <app_update+0xbc>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	60bb      	str	r3, [r7, #8]
			cycle_counter_time_us = cycle_counter_time_us();
 800158e:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <app_update+0xbc>)
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <app_update+0xc4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4917      	ldr	r1, [pc, #92]	@ (80015f4 <app_update+0xc8>)
 8001598:	fba1 1303 	umull	r1, r3, r1, r3
 800159c:	0c9b      	lsrs	r3, r3, #18
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	607b      	str	r3, [r7, #4]
			//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);

			/* Update variables */
	    	g_app_time_us += cycle_counter_time_us;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <app_update+0xb8>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4413      	add	r3, r2
 80015ac:	4a0d      	ldr	r2, [pc, #52]	@ (80015e4 <app_update+0xb8>)
 80015ae:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 80015b0:	4a11      	ldr	r2, [pc, #68]	@ (80015f8 <app_update+0xcc>)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d904      	bls.n	80015c8 <app_update+0x9c>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 80015be:	490e      	ldr	r1, [pc, #56]	@ (80015f8 <app_update+0xcc>)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	for (index = 0; TASK_QTY > index; index++)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3301      	adds	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d9c2      	bls.n	800155a <app_update+0x2e>
			}
	    }
    }
}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000108 	.word	0x20000108
 80015e0:	20000100 	.word	0x20000100
 80015e4:	20000104 	.word	0x20000104
 80015e8:	e0001000 	.word	0xe0001000
 80015ec:	2000000c 	.word	0x2000000c
 80015f0:	20000000 	.word	0x20000000
 80015f4:	431bde83 	.word	0x431bde83
 80015f8:	2000010c 	.word	0x2000010c

080015fc <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 8001600:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <HAL_SYSTICK_Callback+0x34>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <HAL_SYSTICK_Callback+0x34>)
 8001608:	6013      	str	r3, [r2, #0]

	g_task_sensor_tick_cnt++;
 800160a:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <HAL_SYSTICK_Callback+0x38>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	4a08      	ldr	r2, [pc, #32]	@ (8001634 <HAL_SYSTICK_Callback+0x38>)
 8001612:	6013      	str	r3, [r2, #0]
	g_task_system_tick_cnt++;
 8001614:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <HAL_SYSTICK_Callback+0x3c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	4a07      	ldr	r2, [pc, #28]	@ (8001638 <HAL_SYSTICK_Callback+0x3c>)
 800161c:	6013      	str	r3, [r2, #0]
	g_task_actuator_tick_cnt++;
 800161e:	4b07      	ldr	r3, [pc, #28]	@ (800163c <HAL_SYSTICK_Callback+0x40>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	4a05      	ldr	r2, [pc, #20]	@ (800163c <HAL_SYSTICK_Callback+0x40>)
 8001626:	6013      	str	r3, [r2, #0]

	//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	20000108 	.word	0x20000108
 8001634:	20000198 	.word	0x20000198
 8001638:	200001a0 	.word	0x200001a0
 800163c:	20000160 	.word	0x20000160

08001640 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	printf(msg);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f001 fb5f 	bl	8002d0c <iprintf>
	fflush(stdout);
 800164e:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <logger_log_print_+0x24>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	4618      	mov	r0, r3
 8001656:	f001 fa83 	bl	8002b60 <fflush>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000008c 	.word	0x2000008c

08001668 <task_actuator_init>:
uint32_t g_task_actuator_cnt;
volatile uint32_t g_task_actuator_tick_cnt;

/********************** external functions definition ************************/
void task_actuator_init(void *parameters)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af02      	add	r7, sp, #8
 800166e:	6078      	str	r0, [r7, #4]
	task_actuator_st_t state;
	task_actuator_ev_t event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_actuator_init), p_task_actuator);
 8001670:	b672      	cpsid	i
 8001672:	4b5f      	ldr	r3, [pc, #380]	@ (80017f0 <task_actuator_init+0x188>)
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	4b5f      	ldr	r3, [pc, #380]	@ (80017f4 <task_actuator_init+0x18c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	4b5e      	ldr	r3, [pc, #376]	@ (80017f8 <task_actuator_init+0x190>)
 800167e:	4a5f      	ldr	r2, [pc, #380]	@ (80017fc <task_actuator_init+0x194>)
 8001680:	213f      	movs	r1, #63	@ 0x3f
 8001682:	f001 fb55 	bl	8002d30 <sniprintf>
 8001686:	4603      	mov	r3, r0
 8001688:	4a5d      	ldr	r2, [pc, #372]	@ (8001800 <task_actuator_init+0x198>)
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4b58      	ldr	r3, [pc, #352]	@ (80017f0 <task_actuator_init+0x188>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ffd5 	bl	8001640 <logger_log_print_>
 8001696:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_actuator), p_task_actuator_);
 8001698:	b672      	cpsid	i
 800169a:	4b55      	ldr	r3, [pc, #340]	@ (80017f0 <task_actuator_init+0x188>)
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	4b59      	ldr	r3, [pc, #356]	@ (8001804 <task_actuator_init+0x19c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	4b58      	ldr	r3, [pc, #352]	@ (8001808 <task_actuator_init+0x1a0>)
 80016a6:	4a59      	ldr	r2, [pc, #356]	@ (800180c <task_actuator_init+0x1a4>)
 80016a8:	213f      	movs	r1, #63	@ 0x3f
 80016aa:	f001 fb41 	bl	8002d30 <sniprintf>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4a53      	ldr	r2, [pc, #332]	@ (8001800 <task_actuator_init+0x198>)
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	4b4e      	ldr	r3, [pc, #312]	@ (80017f0 <task_actuator_init+0x188>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ffc1 	bl	8001640 <logger_log_print_>
 80016be:	b662      	cpsie	i

	g_task_actuator_cnt = G_TASK_ACT_CNT_INIT;
 80016c0:	4b53      	ldr	r3, [pc, #332]	@ (8001810 <task_actuator_init+0x1a8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_actuator_cnt), g_task_actuator_cnt);
 80016c6:	b672      	cpsid	i
 80016c8:	4b49      	ldr	r3, [pc, #292]	@ (80017f0 <task_actuator_init+0x188>)
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	4b50      	ldr	r3, [pc, #320]	@ (8001810 <task_actuator_init+0x1a8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	4b50      	ldr	r3, [pc, #320]	@ (8001814 <task_actuator_init+0x1ac>)
 80016d4:	4a50      	ldr	r2, [pc, #320]	@ (8001818 <task_actuator_init+0x1b0>)
 80016d6:	213f      	movs	r1, #63	@ 0x3f
 80016d8:	f001 fb2a 	bl	8002d30 <sniprintf>
 80016dc:	4603      	mov	r3, r0
 80016de:	4a48      	ldr	r2, [pc, #288]	@ (8001800 <task_actuator_init+0x198>)
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4b43      	ldr	r3, [pc, #268]	@ (80017f0 <task_actuator_init+0x188>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ffaa 	bl	8001640 <logger_log_print_>
 80016ec:	b662      	cpsie	i

	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e072      	b.n	80017da <task_actuator_init+0x172>
	{
		/* Update Task Actuator Configuration & Data Pointer */
		p_task_actuator_cfg = &task_actuator_cfg_list[index];
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4a47      	ldr	r2, [pc, #284]	@ (800181c <task_actuator_init+0x1b4>)
 8001700:	4413      	add	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
		p_task_actuator_dta = &task_actuator_dta_list[index];
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4a45      	ldr	r2, [pc, #276]	@ (8001820 <task_actuator_init+0x1b8>)
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 800170e:	b672      	cpsid	i
 8001710:	4b37      	ldr	r3, [pc, #220]	@ (80017f0 <task_actuator_init+0x188>)
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	4b42      	ldr	r3, [pc, #264]	@ (8001824 <task_actuator_init+0x1bc>)
 800171a:	4a43      	ldr	r2, [pc, #268]	@ (8001828 <task_actuator_init+0x1c0>)
 800171c:	213f      	movs	r1, #63	@ 0x3f
 800171e:	f001 fb07 	bl	8002d30 <sniprintf>
 8001722:	4603      	mov	r3, r0
 8001724:	4a36      	ldr	r2, [pc, #216]	@ (8001800 <task_actuator_init+0x198>)
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b31      	ldr	r3, [pc, #196]	@ (80017f0 <task_actuator_init+0x188>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff87 	bl	8001640 <logger_log_print_>
 8001732:	b662      	cpsie	i

		state = p_task_actuator_dta->state;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	791b      	ldrb	r3, [r3, #4]
 8001738:	72fb      	strb	r3, [r7, #11]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 800173a:	b672      	cpsid	i
 800173c:	4b2c      	ldr	r3, [pc, #176]	@ (80017f0 <task_actuator_init+0x188>)
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	7afb      	ldrb	r3, [r7, #11]
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	4b39      	ldr	r3, [pc, #228]	@ (800182c <task_actuator_init+0x1c4>)
 8001746:	4a38      	ldr	r2, [pc, #224]	@ (8001828 <task_actuator_init+0x1c0>)
 8001748:	213f      	movs	r1, #63	@ 0x3f
 800174a:	f001 faf1 	bl	8002d30 <sniprintf>
 800174e:	4603      	mov	r3, r0
 8001750:	4a2b      	ldr	r2, [pc, #172]	@ (8001800 <task_actuator_init+0x198>)
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b26      	ldr	r3, [pc, #152]	@ (80017f0 <task_actuator_init+0x188>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff71 	bl	8001640 <logger_log_print_>
 800175e:	b662      	cpsie	i

		event = p_task_actuator_dta->event;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	795b      	ldrb	r3, [r3, #5]
 8001764:	72bb      	strb	r3, [r7, #10]
		LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8001766:	b672      	cpsid	i
 8001768:	4b21      	ldr	r3, [pc, #132]	@ (80017f0 <task_actuator_init+0x188>)
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	7abb      	ldrb	r3, [r7, #10]
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	4b2f      	ldr	r3, [pc, #188]	@ (8001830 <task_actuator_init+0x1c8>)
 8001772:	4a2d      	ldr	r2, [pc, #180]	@ (8001828 <task_actuator_init+0x1c0>)
 8001774:	213f      	movs	r1, #63	@ 0x3f
 8001776:	f001 fadb 	bl	8002d30 <sniprintf>
 800177a:	4603      	mov	r3, r0
 800177c:	4a20      	ldr	r2, [pc, #128]	@ (8001800 <task_actuator_init+0x198>)
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <task_actuator_init+0x188>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff5b 	bl	8001640 <logger_log_print_>
 800178a:	b662      	cpsie	i

		b_event = p_task_actuator_dta->flag;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	799b      	ldrb	r3, [r3, #6]
 8001790:	727b      	strb	r3, [r7, #9]
		LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 8001792:	b672      	cpsid	i
 8001794:	4b16      	ldr	r3, [pc, #88]	@ (80017f0 <task_actuator_init+0x188>)
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	7a7b      	ldrb	r3, [r7, #9]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <task_actuator_init+0x13a>
 800179e:	4b25      	ldr	r3, [pc, #148]	@ (8001834 <task_actuator_init+0x1cc>)
 80017a0:	e000      	b.n	80017a4 <task_actuator_init+0x13c>
 80017a2:	4b25      	ldr	r3, [pc, #148]	@ (8001838 <task_actuator_init+0x1d0>)
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	4b25      	ldr	r3, [pc, #148]	@ (800183c <task_actuator_init+0x1d4>)
 80017a8:	4a25      	ldr	r2, [pc, #148]	@ (8001840 <task_actuator_init+0x1d8>)
 80017aa:	213f      	movs	r1, #63	@ 0x3f
 80017ac:	f001 fac0 	bl	8002d30 <sniprintf>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4a13      	ldr	r2, [pc, #76]	@ (8001800 <task_actuator_init+0x198>)
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <task_actuator_init+0x188>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff40 	bl	8001640 <logger_log_print_>
 80017c0:	b662      	cpsie	i

		HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	6858      	ldr	r0, [r3, #4]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	8919      	ldrh	r1, [r3, #8]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	7adb      	ldrb	r3, [r3, #11]
 80017ce:	461a      	mov	r2, r3
 80017d0:	f7ff f9dd 	bl	8000b8e <HAL_GPIO_WritePin>
	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3301      	adds	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d989      	bls.n	80016f4 <task_actuator_init+0x8c>
	}

	g_task_actuator_tick_cnt = G_TASK_ACT_TICK_CNT_INI;
 80017e0:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <task_actuator_init+0x1dc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	080040e4 	.word	0x080040e4
 80017f4:	20000058 	.word	0x20000058
 80017f8:	08003d78 	.word	0x08003d78
 80017fc:	08003d8c 	.word	0x08003d8c
 8001800:	20000158 	.word	0x20000158
 8001804:	2000005c 	.word	0x2000005c
 8001808:	08003da4 	.word	0x08003da4
 800180c:	08003db4 	.word	0x08003db4
 8001810:	2000015c 	.word	0x2000015c
 8001814:	08003dc4 	.word	0x08003dc4
 8001818:	08003dd8 	.word	0x08003dd8
 800181c:	080040e8 	.word	0x080040e8
 8001820:	20000038 	.word	0x20000038
 8001824:	08003de8 	.word	0x08003de8
 8001828:	08003df0 	.word	0x08003df0
 800182c:	08003dfc 	.word	0x08003dfc
 8001830:	08003e04 	.word	0x08003e04
 8001834:	08003e0c 	.word	0x08003e0c
 8001838:	08003e14 	.word	0x08003e14
 800183c:	08003e1c 	.word	0x08003e1c
 8001840:	08003e24 	.word	0x08003e24
 8001844:	20000160 	.word	0x20000160

08001848 <task_actuator_update>:

void task_actuator_update(void *parameters)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_actuator_cfg_t *p_task_actuator_cfg;
	task_actuator_dta_t *p_task_actuator_dta;
	bool b_time_update_required = false;
 8001850:	2300      	movs	r3, #0
 8001852:	74fb      	strb	r3, [r7, #19]

	/* Update Task Actuator Counter */
	g_task_actuator_cnt++;
 8001854:	4b92      	ldr	r3, [pc, #584]	@ (8001aa0 <task_actuator_update+0x258>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	4a91      	ldr	r2, [pc, #580]	@ (8001aa0 <task_actuator_update+0x258>)
 800185c:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_actuator_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 800185e:	b672      	cpsid	i
    if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 8001860:	4b90      	ldr	r3, [pc, #576]	@ (8001aa4 <task_actuator_update+0x25c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d006      	beq.n	8001876 <task_actuator_update+0x2e>
    {
    	g_task_actuator_tick_cnt--;
 8001868:	4b8e      	ldr	r3, [pc, #568]	@ (8001aa4 <task_actuator_update+0x25c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3b01      	subs	r3, #1
 800186e:	4a8d      	ldr	r2, [pc, #564]	@ (8001aa4 <task_actuator_update+0x25c>)
 8001870:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8001872:	2301      	movs	r3, #1
 8001874:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8001876:	b662      	cpsie	i

    while (b_time_update_required)
 8001878:	e190      	b.n	8001b9c <task_actuator_update+0x354>
    {
		/* Protect shared resource (g_task_actuator_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 800187a:	b672      	cpsid	i
		if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 800187c:	4b89      	ldr	r3, [pc, #548]	@ (8001aa4 <task_actuator_update+0x25c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d007      	beq.n	8001894 <task_actuator_update+0x4c>
		{
			g_task_actuator_tick_cnt--;
 8001884:	4b87      	ldr	r3, [pc, #540]	@ (8001aa4 <task_actuator_update+0x25c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3b01      	subs	r3, #1
 800188a:	4a86      	ldr	r2, [pc, #536]	@ (8001aa4 <task_actuator_update+0x25c>)
 800188c:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 800188e:	2301      	movs	r3, #1
 8001890:	74fb      	strb	r3, [r7, #19]
 8001892:	e001      	b.n	8001898 <task_actuator_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8001894:	2300      	movs	r3, #0
 8001896:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8001898:	b662      	cpsie	i

    	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	e179      	b.n	8001b94 <task_actuator_update+0x34c>
		{
    		/* Update Task Actuator Configuration & Data Pointer */
			p_task_actuator_cfg = &task_actuator_cfg_list[index];
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4a7f      	ldr	r2, [pc, #508]	@ (8001aa8 <task_actuator_update+0x260>)
 80018ac:	4413      	add	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]
			p_task_actuator_dta = &task_actuator_dta_list[index];
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4a7d      	ldr	r2, [pc, #500]	@ (8001aac <task_actuator_update+0x264>)
 80018b6:	4413      	add	r3, r2
 80018b8:	60bb      	str	r3, [r7, #8]

			switch (p_task_actuator_dta->state)
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	791b      	ldrb	r3, [r3, #4]
 80018be:	2b04      	cmp	r3, #4
 80018c0:	f200 815a 	bhi.w	8001b78 <task_actuator_update+0x330>
 80018c4:	a201      	add	r2, pc, #4	@ (adr r2, 80018cc <task_actuator_update+0x84>)
 80018c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ca:	bf00      	nop
 80018cc:	080018e1 	.word	0x080018e1
 80018d0:	08001969 	.word	0x08001969
 80018d4:	080019f3 	.word	0x080019f3
 80018d8:	08001ac5 	.word	0x08001ac5
 80018dc:	08001b49 	.word	0x08001b49
			{
				case ST_LED_XX_OFF:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_ON == p_task_actuator_dta->event))
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	799b      	ldrb	r3, [r3, #6]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d012      	beq.n	800190e <task_actuator_update+0xc6>
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	795b      	ldrb	r3, [r3, #5]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d10e      	bne.n	800190e <task_actuator_update+0xc6>
					{
						p_task_actuator_dta->flag = false;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2200      	movs	r2, #0
 80018f4:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6858      	ldr	r0, [r3, #4]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8919      	ldrh	r1, [r3, #8]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	7a9b      	ldrb	r3, [r3, #10]
 8001902:	461a      	mov	r2, r3
 8001904:	f7ff f943 	bl	8000b8e <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_ON;
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2201      	movs	r2, #1
 800190c:	711a      	strb	r2, [r3, #4]
					}
					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_PULSE == p_task_actuator_dta->event))
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	799b      	ldrb	r3, [r3, #6]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 8132 	beq.w	8001b7c <task_actuator_update+0x334>
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	795b      	ldrb	r3, [r3, #5]
 800191c:	2b04      	cmp	r3, #4
 800191e:	f040 812d 	bne.w	8001b7c <task_actuator_update+0x334>
					{
						p_task_actuator_dta->flag = false;
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2200      	movs	r2, #0
 8001926:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6858      	ldr	r0, [r3, #4]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8919      	ldrh	r1, [r3, #8]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	7a9b      	ldrb	r3, [r3, #10]
 8001934:	461a      	mov	r2, r3
 8001936:	f7ff f92a 	bl	8000b8e <HAL_GPIO_WritePin>
						HAL_Delay(p_task_actuator_cfg->tick_pulse);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fe52 	bl	80005e8 <HAL_Delay>
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6858      	ldr	r0, [r3, #4]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8919      	ldrh	r1, [r3, #8]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	7adb      	ldrb	r3, [r3, #11]
 8001950:	461a      	mov	r2, r3
 8001952:	f7ff f91c 	bl	8000b8e <HAL_GPIO_WritePin>
						HAL_Delay(p_task_actuator_cfg->tick_pulse);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fe44 	bl	80005e8 <HAL_Delay>
						p_task_actuator_dta->state = ST_LED_XX_PULSE;
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2204      	movs	r2, #4
 8001964:	711a      	strb	r2, [r3, #4]
					}  //Caso extra: si llega a entrar un pulso en el system (hoy no esta implementado)


					break;
 8001966:	e109      	b.n	8001b7c <task_actuator_update+0x334>

				case ST_LED_XX_ON:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	799b      	ldrb	r3, [r3, #6]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d012      	beq.n	8001996 <task_actuator_update+0x14e>
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	795b      	ldrb	r3, [r3, #5]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10e      	bne.n	8001996 <task_actuator_update+0x14e>
					{
						p_task_actuator_dta->flag = false;
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2200      	movs	r2, #0
 800197c:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6858      	ldr	r0, [r3, #4]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8919      	ldrh	r1, [r3, #8]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	7adb      	ldrb	r3, [r3, #11]
 800198a:	461a      	mov	r2, r3
 800198c:	f7ff f8ff 	bl	8000b8e <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2200      	movs	r2, #0
 8001994:	711a      	strb	r2, [r3, #4]
					}

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_BLINK == p_task_actuator_dta->event))
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	799b      	ldrb	r3, [r3, #6]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80f0 	beq.w	8001b80 <task_actuator_update+0x338>
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	795b      	ldrb	r3, [r3, #5]
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	f040 80eb 	bne.w	8001b80 <task_actuator_update+0x338>
					{
						LOGGER_LOG("evento de blink on \n");
 80019aa:	b672      	cpsid	i
 80019ac:	4b40      	ldr	r3, [pc, #256]	@ (8001ab0 <task_actuator_update+0x268>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a40      	ldr	r2, [pc, #256]	@ (8001ab4 <task_actuator_update+0x26c>)
 80019b2:	213f      	movs	r1, #63	@ 0x3f
 80019b4:	4618      	mov	r0, r3
 80019b6:	f001 f9bb 	bl	8002d30 <sniprintf>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a3e      	ldr	r2, [pc, #248]	@ (8001ab8 <task_actuator_update+0x270>)
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab0 <task_actuator_update+0x268>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fe3b 	bl	8001640 <logger_log_print_>
 80019ca:	b662      	cpsie	i
						p_task_actuator_dta->flag = false;
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2200      	movs	r2, #0
 80019d0:	719a      	strb	r2, [r3, #6]
						p_task_actuator_dta->tick = DEL_LED_XX_BLI;
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2205      	movs	r2, #5
 80019d6:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6858      	ldr	r0, [r3, #4]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8919      	ldrh	r1, [r3, #8]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	7a9b      	ldrb	r3, [r3, #10]
 80019e4:	461a      	mov	r2, r3
 80019e6:	f7ff f8d2 	bl	8000b8e <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_BLINK_ON;
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2202      	movs	r2, #2
 80019ee:	711a      	strb	r2, [r3, #4]
					}

					break;
 80019f0:	e0c6      	b.n	8001b80 <task_actuator_update+0x338>

				case ST_LED_XX_BLINK_ON:

					if (p_task_actuator_dta->tick>0){
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d017      	beq.n	8001a2a <task_actuator_update+0x1e2>
						p_task_actuator_dta->tick --;
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	1e5a      	subs	r2, r3, #1
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	601a      	str	r2, [r3, #0]
						LOGGER_LOG("tick = %lu\n",p_task_actuator_dta->tick);
 8001a04:	b672      	cpsid	i
 8001a06:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab0 <task_actuator_update+0x268>)
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a2b      	ldr	r2, [pc, #172]	@ (8001abc <task_actuator_update+0x274>)
 8001a10:	213f      	movs	r1, #63	@ 0x3f
 8001a12:	f001 f98d 	bl	8002d30 <sniprintf>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4a27      	ldr	r2, [pc, #156]	@ (8001ab8 <task_actuator_update+0x270>)
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b24      	ldr	r3, [pc, #144]	@ (8001ab0 <task_actuator_update+0x268>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fe0d 	bl	8001640 <logger_log_print_>
 8001a26:	b662      	cpsie	i
 8001a28:	e01f      	b.n	8001a6a <task_actuator_update+0x222>
					}else{
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6858      	ldr	r0, [r3, #4]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8919      	ldrh	r1, [r3, #8]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	7adb      	ldrb	r3, [r3, #11]
 8001a36:	461a      	mov	r2, r3
 8001a38:	f7ff f8a9 	bl	8000b8e <HAL_GPIO_WritePin>
						p_task_actuator_dta->tick = DEL_LED_XX_BLI;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2205      	movs	r2, #5
 8001a40:	601a      	str	r2, [r3, #0]
						p_task_actuator_dta->state = ST_LED_XX_BLINK_OFF;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2203      	movs	r2, #3
 8001a46:	711a      	strb	r2, [r3, #4]
						LOGGER_LOG("paso a blink off \n");
 8001a48:	b672      	cpsid	i
 8001a4a:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <task_actuator_update+0x268>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac0 <task_actuator_update+0x278>)
 8001a50:	213f      	movs	r1, #63	@ 0x3f
 8001a52:	4618      	mov	r0, r3
 8001a54:	f001 f96c 	bl	8002d30 <sniprintf>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4a17      	ldr	r2, [pc, #92]	@ (8001ab8 <task_actuator_update+0x270>)
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <task_actuator_update+0x268>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fdec 	bl	8001640 <logger_log_print_>
 8001a68:	b662      	cpsie	i
					}



					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	799b      	ldrb	r3, [r3, #6]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 8088 	beq.w	8001b84 <task_actuator_update+0x33c>
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	795b      	ldrb	r3, [r3, #5]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f040 8083 	bne.w	8001b84 <task_actuator_update+0x33c>
					{
						p_task_actuator_dta->flag = false;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2200      	movs	r2, #0
 8001a82:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6858      	ldr	r0, [r3, #4]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8919      	ldrh	r1, [r3, #8]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	7adb      	ldrb	r3, [r3, #11]
 8001a90:	461a      	mov	r2, r3
 8001a92:	f7ff f87c 	bl	8000b8e <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	711a      	strb	r2, [r3, #4]
					}

					break;
 8001a9c:	e072      	b.n	8001b84 <task_actuator_update+0x33c>
 8001a9e:	bf00      	nop
 8001aa0:	2000015c 	.word	0x2000015c
 8001aa4:	20000160 	.word	0x20000160
 8001aa8:	080040e8 	.word	0x080040e8
 8001aac:	20000038 	.word	0x20000038
 8001ab0:	080040e4 	.word	0x080040e4
 8001ab4:	08003e34 	.word	0x08003e34
 8001ab8:	20000158 	.word	0x20000158
 8001abc:	08003e4c 	.word	0x08003e4c
 8001ac0:	08003e58 	.word	0x08003e58

				case ST_LED_XX_BLINK_OFF:
					LOGGER_LOG("estoy en blink off \n");
 8001ac4:	b672      	cpsid	i
 8001ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb0 <task_actuator_update+0x368>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a3a      	ldr	r2, [pc, #232]	@ (8001bb4 <task_actuator_update+0x36c>)
 8001acc:	213f      	movs	r1, #63	@ 0x3f
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f001 f92e 	bl	8002d30 <sniprintf>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4a38      	ldr	r2, [pc, #224]	@ (8001bb8 <task_actuator_update+0x370>)
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b35      	ldr	r3, [pc, #212]	@ (8001bb0 <task_actuator_update+0x368>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fdae 	bl	8001640 <logger_log_print_>
 8001ae4:	b662      	cpsie	i
					if (p_task_actuator_dta->tick>0){
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d005      	beq.n	8001afa <task_actuator_update+0x2b2>
						p_task_actuator_dta->tick--;
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	1e5a      	subs	r2, r3, #1
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e00e      	b.n	8001b18 <task_actuator_update+0x2d0>
					}else{
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6858      	ldr	r0, [r3, #4]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8919      	ldrh	r1, [r3, #8]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	7a9b      	ldrb	r3, [r3, #10]
 8001b06:	461a      	mov	r2, r3
 8001b08:	f7ff f841 	bl	8000b8e <HAL_GPIO_WritePin>
						p_task_actuator_dta->tick = DEL_LED_XX_BLI;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2205      	movs	r2, #5
 8001b10:	601a      	str	r2, [r3, #0]
						p_task_actuator_dta->state = ST_LED_XX_BLINK_ON;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2202      	movs	r2, #2
 8001b16:	711a      	strb	r2, [r3, #4]
										}
					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	799b      	ldrb	r3, [r3, #6]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d033      	beq.n	8001b88 <task_actuator_update+0x340>
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	795b      	ldrb	r3, [r3, #5]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d12f      	bne.n	8001b88 <task_actuator_update+0x340>
					{
						p_task_actuator_dta->flag = false;
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6858      	ldr	r0, [r3, #4]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8919      	ldrh	r1, [r3, #8]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	7adb      	ldrb	r3, [r3, #11]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f7ff f827 	bl	8000b8e <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2200      	movs	r2, #0
 8001b44:	711a      	strb	r2, [r3, #4]
					}
					break;
 8001b46:	e01f      	b.n	8001b88 <task_actuator_update+0x340>

				case ST_LED_XX_PULSE:
					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	799b      	ldrb	r3, [r3, #6]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01d      	beq.n	8001b8c <task_actuator_update+0x344>
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	795b      	ldrb	r3, [r3, #5]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d119      	bne.n	8001b8c <task_actuator_update+0x344>
					{
						p_task_actuator_dta->flag = false;
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6858      	ldr	r0, [r3, #4]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8919      	ldrh	r1, [r3, #8]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	7adb      	ldrb	r3, [r3, #11]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f7ff f80f 	bl	8000b8e <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2200      	movs	r2, #0
 8001b74:	711a      	strb	r2, [r3, #4]
					}
					break;
 8001b76:	e009      	b.n	8001b8c <task_actuator_update+0x344>

				default:

					break;
 8001b78:	bf00      	nop
 8001b7a:	e008      	b.n	8001b8e <task_actuator_update+0x346>
					break;
 8001b7c:	bf00      	nop
 8001b7e:	e006      	b.n	8001b8e <task_actuator_update+0x346>
					break;
 8001b80:	bf00      	nop
 8001b82:	e004      	b.n	8001b8e <task_actuator_update+0x346>
					break;
 8001b84:	bf00      	nop
 8001b86:	e002      	b.n	8001b8e <task_actuator_update+0x346>
					break;
 8001b88:	bf00      	nop
 8001b8a:	e000      	b.n	8001b8e <task_actuator_update+0x346>
					break;
 8001b8c:	bf00      	nop
    	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	3301      	adds	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	f67f ae82 	bls.w	80018a0 <task_actuator_update+0x58>
    while (b_time_update_required)
 8001b9c:	7cfb      	ldrb	r3, [r7, #19]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f47f ae6b 	bne.w	800187a <task_actuator_update+0x32>
			}
		}
    }
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	080040e4 	.word	0x080040e4
 8001bb4:	08003e6c 	.word	0x08003e6c
 8001bb8:	20000158 	.word	0x20000158

08001bbc <put_event_task_actuator>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void put_event_task_actuator(task_actuator_ev_t event, task_actuator_id_t identifier)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	460a      	mov	r2, r1
 8001bc6:	71fb      	strb	r3, [r7, #7]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	71bb      	strb	r3, [r7, #6]
	task_actuator_dta_t *p_task_actuator_dta;

	p_task_actuator_dta = &task_actuator_dta_list[identifier];
 8001bcc:	79bb      	ldrb	r3, [r7, #6]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4a06      	ldr	r2, [pc, #24]	@ (8001bec <put_event_task_actuator+0x30>)
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]

	p_task_actuator_dta->event = event;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	79fa      	ldrb	r2, [r7, #7]
 8001bda:	715a      	strb	r2, [r3, #5]
	p_task_actuator_dta->flag = true;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	719a      	strb	r2, [r3, #6]
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	20000038 	.word	0x20000038

08001bf0 <task_sensor_init>:
uint32_t g_task_sensor_cnt;
volatile uint32_t g_task_sensor_tick_cnt;

/********************** external functions definition ************************/
void task_sensor_init(void *parameters)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	6078      	str	r0, [r7, #4]
	task_sensor_dta_t *p_task_sensor_dta;
	task_sensor_st_t state;
	task_sensor_ev_t event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_sensor_init), p_task_sensor);
 8001bf8:	b672      	cpsid	i
 8001bfa:	4b49      	ldr	r3, [pc, #292]	@ (8001d20 <task_sensor_init+0x130>)
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	4b49      	ldr	r3, [pc, #292]	@ (8001d24 <task_sensor_init+0x134>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	4b48      	ldr	r3, [pc, #288]	@ (8001d28 <task_sensor_init+0x138>)
 8001c06:	4a49      	ldr	r2, [pc, #292]	@ (8001d2c <task_sensor_init+0x13c>)
 8001c08:	213f      	movs	r1, #63	@ 0x3f
 8001c0a:	f001 f891 	bl	8002d30 <sniprintf>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4a47      	ldr	r2, [pc, #284]	@ (8001d30 <task_sensor_init+0x140>)
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b42      	ldr	r3, [pc, #264]	@ (8001d20 <task_sensor_init+0x130>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fd11 	bl	8001640 <logger_log_print_>
 8001c1e:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_sensor), p_task_sensor_);
 8001c20:	b672      	cpsid	i
 8001c22:	4b3f      	ldr	r3, [pc, #252]	@ (8001d20 <task_sensor_init+0x130>)
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	4b43      	ldr	r3, [pc, #268]	@ (8001d34 <task_sensor_init+0x144>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	4b42      	ldr	r3, [pc, #264]	@ (8001d38 <task_sensor_init+0x148>)
 8001c2e:	4a43      	ldr	r2, [pc, #268]	@ (8001d3c <task_sensor_init+0x14c>)
 8001c30:	213f      	movs	r1, #63	@ 0x3f
 8001c32:	f001 f87d 	bl	8002d30 <sniprintf>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4a3d      	ldr	r2, [pc, #244]	@ (8001d30 <task_sensor_init+0x140>)
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b38      	ldr	r3, [pc, #224]	@ (8001d20 <task_sensor_init+0x130>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fcfd 	bl	8001640 <logger_log_print_>
 8001c46:	b662      	cpsie	i

	g_task_sensor_cnt = G_TASK_SEN_CNT_INIT;
 8001c48:	4b3d      	ldr	r3, [pc, #244]	@ (8001d40 <task_sensor_init+0x150>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_sensor_cnt), g_task_sensor_cnt);
 8001c4e:	b672      	cpsid	i
 8001c50:	4b33      	ldr	r3, [pc, #204]	@ (8001d20 <task_sensor_init+0x130>)
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	4b3a      	ldr	r3, [pc, #232]	@ (8001d40 <task_sensor_init+0x150>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d44 <task_sensor_init+0x154>)
 8001c5c:	4a3a      	ldr	r2, [pc, #232]	@ (8001d48 <task_sensor_init+0x158>)
 8001c5e:	213f      	movs	r1, #63	@ 0x3f
 8001c60:	f001 f866 	bl	8002d30 <sniprintf>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4a32      	ldr	r2, [pc, #200]	@ (8001d30 <task_sensor_init+0x140>)
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d20 <task_sensor_init+0x130>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fce6 	bl	8001640 <logger_log_print_>
 8001c74:	b662      	cpsie	i

	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e046      	b.n	8001d0a <task_sensor_init+0x11a>
	{
		/* Update Task Sensor Data Pointer */
		p_task_sensor_dta = &task_sensor_dta_list[index];
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4a32      	ldr	r2, [pc, #200]	@ (8001d4c <task_sensor_init+0x15c>)
 8001c82:	4413      	add	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 8001c86:	b672      	cpsid	i
 8001c88:	4b25      	ldr	r3, [pc, #148]	@ (8001d20 <task_sensor_init+0x130>)
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	4b2f      	ldr	r3, [pc, #188]	@ (8001d50 <task_sensor_init+0x160>)
 8001c92:	4a30      	ldr	r2, [pc, #192]	@ (8001d54 <task_sensor_init+0x164>)
 8001c94:	213f      	movs	r1, #63	@ 0x3f
 8001c96:	f001 f84b 	bl	8002d30 <sniprintf>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4a24      	ldr	r2, [pc, #144]	@ (8001d30 <task_sensor_init+0x140>)
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d20 <task_sensor_init+0x130>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fccb 	bl	8001640 <logger_log_print_>
 8001caa:	b662      	cpsie	i

		state = p_task_sensor_dta->state;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	791b      	ldrb	r3, [r3, #4]
 8001cb0:	73fb      	strb	r3, [r7, #15]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8001cb2:	b672      	cpsid	i
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d20 <task_sensor_init+0x130>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	4b26      	ldr	r3, [pc, #152]	@ (8001d58 <task_sensor_init+0x168>)
 8001cbe:	4a25      	ldr	r2, [pc, #148]	@ (8001d54 <task_sensor_init+0x164>)
 8001cc0:	213f      	movs	r1, #63	@ 0x3f
 8001cc2:	f001 f835 	bl	8002d30 <sniprintf>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4a19      	ldr	r2, [pc, #100]	@ (8001d30 <task_sensor_init+0x140>)
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b14      	ldr	r3, [pc, #80]	@ (8001d20 <task_sensor_init+0x130>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fcb5 	bl	8001640 <logger_log_print_>
 8001cd6:	b662      	cpsie	i

		event = p_task_sensor_dta->event;
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	795b      	ldrb	r3, [r3, #5]
 8001cdc:	73bb      	strb	r3, [r7, #14]
		LOGGER_LOG("   %s = %lu\r\n", GET_NAME(event), (uint32_t)event);
 8001cde:	b672      	cpsid	i
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d20 <task_sensor_init+0x130>)
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	7bbb      	ldrb	r3, [r7, #14]
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d5c <task_sensor_init+0x16c>)
 8001cea:	4a17      	ldr	r2, [pc, #92]	@ (8001d48 <task_sensor_init+0x158>)
 8001cec:	213f      	movs	r1, #63	@ 0x3f
 8001cee:	f001 f81f 	bl	8002d30 <sniprintf>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4a0e      	ldr	r2, [pc, #56]	@ (8001d30 <task_sensor_init+0x140>)
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <task_sensor_init+0x130>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fc9f 	bl	8001640 <logger_log_print_>
 8001d02:	b662      	cpsie	i
	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	3301      	adds	r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	d9b5      	bls.n	8001c7c <task_sensor_init+0x8c>
	}
	g_task_sensor_tick_cnt = G_TASK_SEN_TICK_CNT_INI;
 8001d10:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <task_sensor_init+0x170>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	080040e4 	.word	0x080040e4
 8001d24:	20000060 	.word	0x20000060
 8001d28:	08003ec8 	.word	0x08003ec8
 8001d2c:	08003edc 	.word	0x08003edc
 8001d30:	20000158 	.word	0x20000158
 8001d34:	20000064 	.word	0x20000064
 8001d38:	08003ef4 	.word	0x08003ef4
 8001d3c:	08003f00 	.word	0x08003f00
 8001d40:	20000194 	.word	0x20000194
 8001d44:	08003f10 	.word	0x08003f10
 8001d48:	08003f24 	.word	0x08003f24
 8001d4c:	20000164 	.word	0x20000164
 8001d50:	08003f34 	.word	0x08003f34
 8001d54:	08003f3c 	.word	0x08003f3c
 8001d58:	08003f48 	.word	0x08003f48
 8001d5c:	08003f50 	.word	0x08003f50
 8001d60:	20000198 	.word	0x20000198

08001d64 <task_sensor_update>:


void task_sensor_update(void *parameters)
{
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_sensor_cfg_t *p_task_sensor_cfg;
	task_sensor_dta_t *p_task_sensor_dta;
	bool b_time_update_required = false;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	74fb      	strb	r3, [r7, #19]

	/* Update Task Sensor Counter */
	g_task_sensor_cnt++;
 8001d70:	4b8b      	ldr	r3, [pc, #556]	@ (8001fa0 <task_sensor_update+0x23c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	3301      	adds	r3, #1
 8001d76:	4a8a      	ldr	r2, [pc, #552]	@ (8001fa0 <task_sensor_update+0x23c>)
 8001d78:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_sensor_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 8001d7a:	b672      	cpsid	i
    if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8001d7c:	4b89      	ldr	r3, [pc, #548]	@ (8001fa4 <task_sensor_update+0x240>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d006      	beq.n	8001d92 <task_sensor_update+0x2e>
    {
    	g_task_sensor_tick_cnt--;
 8001d84:	4b87      	ldr	r3, [pc, #540]	@ (8001fa4 <task_sensor_update+0x240>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	4a86      	ldr	r2, [pc, #536]	@ (8001fa4 <task_sensor_update+0x240>)
 8001d8c:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8001d92:	b662      	cpsie	i

    while (b_time_update_required)
 8001d94:	e0fb      	b.n	8001f8e <task_sensor_update+0x22a>
    {
		/* Protect shared resource (g_task_sensor_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 8001d96:	b672      	cpsid	i
		if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8001d98:	4b82      	ldr	r3, [pc, #520]	@ (8001fa4 <task_sensor_update+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <task_sensor_update+0x4c>
		{
			g_task_sensor_tick_cnt--;
 8001da0:	4b80      	ldr	r3, [pc, #512]	@ (8001fa4 <task_sensor_update+0x240>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	4a7f      	ldr	r2, [pc, #508]	@ (8001fa4 <task_sensor_update+0x240>)
 8001da8:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8001daa:	2301      	movs	r3, #1
 8001dac:	74fb      	strb	r3, [r7, #19]
 8001dae:	e001      	b.n	8001db4 <task_sensor_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8001db0:	2300      	movs	r3, #0
 8001db2:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8001db4:	b662      	cpsie	i

    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	e0e4      	b.n	8001f86 <task_sensor_update+0x222>
		{
    		/* Update Task Sensor Configuration & Data Pointer */
			p_task_sensor_cfg = &task_sensor_cfg_list[index];
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4a78      	ldr	r2, [pc, #480]	@ (8001fa8 <task_sensor_update+0x244>)
 8001dc8:	4413      	add	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]
			p_task_sensor_dta = &task_sensor_dta_list[index];
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4a76      	ldr	r2, [pc, #472]	@ (8001fac <task_sensor_update+0x248>)
 8001dd2:	4413      	add	r3, r2
 8001dd4:	60bb      	str	r3, [r7, #8]

			if (p_task_sensor_cfg->pressed == HAL_GPIO_ReadPin(p_task_sensor_cfg->gpio_port, p_task_sensor_cfg->pin))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	7a9c      	ldrb	r4, [r3, #10]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	891b      	ldrh	r3, [r3, #8]
 8001de2:	4619      	mov	r1, r3
 8001de4:	4610      	mov	r0, r2
 8001de6:	f7fe febb 	bl	8000b60 <HAL_GPIO_ReadPin>
 8001dea:	4603      	mov	r3, r0
 8001dec:	429c      	cmp	r4, r3
 8001dee:	d103      	bne.n	8001df8 <task_sensor_update+0x94>
			{
				p_task_sensor_dta->event =	EV_BTN_XX_DOWN;
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2201      	movs	r2, #1
 8001df4:	715a      	strb	r2, [r3, #5]
 8001df6:	e002      	b.n	8001dfe <task_sensor_update+0x9a>
				//LOGGER_LOG("  entro al event down");

			}
			else
			{
				p_task_sensor_dta->event =	EV_BTN_XX_UP;
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	715a      	strb	r2, [r3, #5]
			//evento = p_task_sensor_dta->event;
			//estado = p_task_sensor_dta->state;
			//LOGGER_LOG("   %s = %lu\r\n %s = %lu ",GET_NAME(evento), (uint32_t)evento,GET_NAME(estado), (uint32_t)estado );


			switch (p_task_sensor_dta->state)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	791b      	ldrb	r3, [r3, #4]
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	f200 80b3 	bhi.w	8001f6e <task_sensor_update+0x20a>
 8001e08:	a201      	add	r2, pc, #4	@ (adr r2, 8001e10 <task_sensor_update+0xac>)
 8001e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0e:	bf00      	nop
 8001e10:	08001e21 	.word	0x08001e21
 8001e14:	08001e5b 	.word	0x08001e5b
 8001e18:	08001f27 	.word	0x08001f27
 8001e1c:	08001f3d 	.word	0x08001f3d
			{
				case ST_BTN_XX_UP:

					if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	795b      	ldrb	r3, [r3, #5]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	f040 80a4 	bne.w	8001f72 <task_sensor_update+0x20e>
					{
						//put_event_task_system(p_task_sensor_cfg->signal_down);
						p_task_sensor_dta->state = ST_BTN_XX_FALLING;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	711a      	strb	r2, [r3, #4]
						p_task_sensor_dta->tick = DEL_BTN_XX_MAX;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	220a      	movs	r2, #10
 8001e34:	601a      	str	r2, [r3, #0]
						LOGGER_LOG("  entro al estado falling");
 8001e36:	b672      	cpsid	i
 8001e38:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb0 <task_sensor_update+0x24c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a5d      	ldr	r2, [pc, #372]	@ (8001fb4 <task_sensor_update+0x250>)
 8001e3e:	213f      	movs	r1, #63	@ 0x3f
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 ff75 	bl	8002d30 <sniprintf>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4a5b      	ldr	r2, [pc, #364]	@ (8001fb8 <task_sensor_update+0x254>)
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	4b58      	ldr	r3, [pc, #352]	@ (8001fb0 <task_sensor_update+0x24c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fbf5 	bl	8001640 <logger_log_print_>
 8001e56:	b662      	cpsie	i

					}
					break;
 8001e58:	e08b      	b.n	8001f72 <task_sensor_update+0x20e>

				case ST_BTN_XX_FALLING:

					if(EV_BTN_XX_UP == p_task_sensor_dta->event){
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	795b      	ldrb	r3, [r3, #5]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <task_sensor_update+0x104>
						p_task_sensor_dta->state = ST_BTN_XX_UP;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2200      	movs	r2, #0
 8001e66:	711a      	strb	r2, [r3, #4]
					}

					if(EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	795b      	ldrb	r3, [r3, #5]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	f040 8082 	bne.w	8001f76 <task_sensor_update+0x212>
					{
						if(p_task_sensor_dta->tick > 0){
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d017      	beq.n	8001eaa <task_sensor_update+0x146>
							p_task_sensor_dta->tick--;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	1e5a      	subs	r2, r3, #1
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	601a      	str	r2, [r3, #0]
							LOGGER_LOG("  tick = %lu \n",p_task_sensor_dta->tick);
 8001e84:	b672      	cpsid	i
 8001e86:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb0 <task_sensor_update+0x24c>)
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a4b      	ldr	r2, [pc, #300]	@ (8001fbc <task_sensor_update+0x258>)
 8001e90:	213f      	movs	r1, #63	@ 0x3f
 8001e92:	f000 ff4d 	bl	8002d30 <sniprintf>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4a47      	ldr	r2, [pc, #284]	@ (8001fb8 <task_sensor_update+0x254>)
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b44      	ldr	r3, [pc, #272]	@ (8001fb0 <task_sensor_update+0x24c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fbcd 	bl	8001640 <logger_log_print_>
 8001ea6:	b662      	cpsie	i
								put_event_task_system(p_task_sensor_cfg->signal_down);
								LOGGER_LOG("  llego al estado down 2 pasada \n");
							}
						}
					}
					break;
 8001ea8:	e065      	b.n	8001f76 <task_sensor_update+0x212>
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2202      	movs	r2, #2
 8001eae:	711a      	strb	r2, [r3, #4]
							if(p_task_sensor_dta->primera_pasada == false){
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	799b      	ldrb	r3, [r3, #6]
 8001eb4:	f083 0301 	eor.w	r3, r3, #1
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d019      	beq.n	8001ef2 <task_sensor_update+0x18e>
								p_task_sensor_dta->primera_pasada = true;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	719a      	strb	r2, [r3, #6]
								put_event_task_system(p_task_sensor_cfg->signal_up);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	7c1b      	ldrb	r3, [r3, #16]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fab1 	bl	8002430 <put_event_task_system>
								LOGGER_LOG("  llego al estado down 1 pasada \n");
 8001ece:	b672      	cpsid	i
 8001ed0:	4b37      	ldr	r3, [pc, #220]	@ (8001fb0 <task_sensor_update+0x24c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a3a      	ldr	r2, [pc, #232]	@ (8001fc0 <task_sensor_update+0x25c>)
 8001ed6:	213f      	movs	r1, #63	@ 0x3f
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 ff29 	bl	8002d30 <sniprintf>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4a35      	ldr	r2, [pc, #212]	@ (8001fb8 <task_sensor_update+0x254>)
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b32      	ldr	r3, [pc, #200]	@ (8001fb0 <task_sensor_update+0x24c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fba9 	bl	8001640 <logger_log_print_>
 8001eee:	b662      	cpsie	i
					break;
 8001ef0:	e041      	b.n	8001f76 <task_sensor_update+0x212>
								p_task_sensor_dta->primera_pasada = false;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	719a      	strb	r2, [r3, #6]
								put_event_task_system(p_task_sensor_cfg->signal_down);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	7c5b      	ldrb	r3, [r3, #17]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 fa97 	bl	8002430 <put_event_task_system>
								LOGGER_LOG("  llego al estado down 2 pasada \n");
 8001f02:	b672      	cpsid	i
 8001f04:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb0 <task_sensor_update+0x24c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a2e      	ldr	r2, [pc, #184]	@ (8001fc4 <task_sensor_update+0x260>)
 8001f0a:	213f      	movs	r1, #63	@ 0x3f
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f000 ff0f 	bl	8002d30 <sniprintf>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4a28      	ldr	r2, [pc, #160]	@ (8001fb8 <task_sensor_update+0x254>)
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b25      	ldr	r3, [pc, #148]	@ (8001fb0 <task_sensor_update+0x24c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fb8f 	bl	8001640 <logger_log_print_>
 8001f22:	b662      	cpsie	i
					break;
 8001f24:	e027      	b.n	8001f76 <task_sensor_update+0x212>

				case ST_BTN_XX_DOWN:

					if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	795b      	ldrb	r3, [r3, #5]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d125      	bne.n	8001f7a <task_sensor_update+0x216>
					{
						//put_event_task_system(p_task_sensor_cfg->signal_up);
						p_task_sensor_dta->state = ST_BTN_XX_RISING;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2203      	movs	r2, #3
 8001f32:	711a      	strb	r2, [r3, #4]
						p_task_sensor_dta->tick = DEL_BTN_XX_MAX;
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	220a      	movs	r2, #10
 8001f38:	601a      	str	r2, [r3, #0]
					}

					break;
 8001f3a:	e01e      	b.n	8001f7a <task_sensor_update+0x216>

				case ST_BTN_XX_RISING:

					if(EV_BTN_XX_DOWN == p_task_sensor_dta->event){
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	795b      	ldrb	r3, [r3, #5]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d102      	bne.n	8001f4a <task_sensor_update+0x1e6>
						p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2202      	movs	r2, #2
 8001f48:	711a      	strb	r2, [r3, #4]
					}
					if(EV_BTN_XX_UP == p_task_sensor_dta->event){
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	795b      	ldrb	r3, [r3, #5]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d115      	bne.n	8001f7e <task_sensor_update+0x21a>
						if(p_task_sensor_dta->tick >0){
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <task_sensor_update+0x202>
							p_task_sensor_dta->tick--;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	1e5a      	subs	r2, r3, #1
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	601a      	str	r2, [r3, #0]
						}
						else{
							p_task_sensor_dta->state = ST_BTN_XX_UP;
						}
					}
					break;
 8001f64:	e00b      	b.n	8001f7e <task_sensor_update+0x21a>
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	711a      	strb	r2, [r3, #4]
					break;
 8001f6c:	e007      	b.n	8001f7e <task_sensor_update+0x21a>

				default:

					break;
 8001f6e:	bf00      	nop
 8001f70:	e006      	b.n	8001f80 <task_sensor_update+0x21c>
					break;
 8001f72:	bf00      	nop
 8001f74:	e004      	b.n	8001f80 <task_sensor_update+0x21c>
					break;
 8001f76:	bf00      	nop
 8001f78:	e002      	b.n	8001f80 <task_sensor_update+0x21c>
					break;
 8001f7a:	bf00      	nop
 8001f7c:	e000      	b.n	8001f80 <task_sensor_update+0x21c>
					break;
 8001f7e:	bf00      	nop
    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	3301      	adds	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2b05      	cmp	r3, #5
 8001f8a:	f67f af17 	bls.w	8001dbc <task_sensor_update+0x58>
    while (b_time_update_required)
 8001f8e:	7cfb      	ldrb	r3, [r7, #19]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f47f af00 	bne.w	8001d96 <task_sensor_update+0x32>
			}
		}
    }
}
 8001f96:	bf00      	nop
 8001f98:	bf00      	nop
 8001f9a:	371c      	adds	r7, #28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd90      	pop	{r4, r7, pc}
 8001fa0:	20000194 	.word	0x20000194
 8001fa4:	20000198 	.word	0x20000198
 8001fa8:	08004138 	.word	0x08004138
 8001fac:	20000164 	.word	0x20000164
 8001fb0:	080040e4 	.word	0x080040e4
 8001fb4:	08003f58 	.word	0x08003f58
 8001fb8:	20000158 	.word	0x20000158
 8001fbc:	08003f74 	.word	0x08003f74
 8001fc0:	08003f84 	.word	0x08003f84
 8001fc4:	08003fa8 	.word	0x08003fa8

08001fc8 <task_system_init>:
uint32_t g_task_system_cnt;
volatile uint32_t g_task_system_tick_cnt;

/********************** external functions definition ************************/
void task_system_init(void *parameters)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	6078      	str	r0, [r7, #4]
	task_system_st_t	state;
	task_system_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_system_init), p_task_system);
 8001fd0:	b672      	cpsid	i
 8001fd2:	4b48      	ldr	r3, [pc, #288]	@ (80020f4 <task_system_init+0x12c>)
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	4b48      	ldr	r3, [pc, #288]	@ (80020f8 <task_system_init+0x130>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	4b47      	ldr	r3, [pc, #284]	@ (80020fc <task_system_init+0x134>)
 8001fde:	4a48      	ldr	r2, [pc, #288]	@ (8002100 <task_system_init+0x138>)
 8001fe0:	213f      	movs	r1, #63	@ 0x3f
 8001fe2:	f000 fea5 	bl	8002d30 <sniprintf>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4a46      	ldr	r2, [pc, #280]	@ (8002104 <task_system_init+0x13c>)
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	4b41      	ldr	r3, [pc, #260]	@ (80020f4 <task_system_init+0x12c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fb25 	bl	8001640 <logger_log_print_>
 8001ff6:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_system), p_task_system_);
 8001ff8:	b672      	cpsid	i
 8001ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80020f4 <task_system_init+0x12c>)
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	4b42      	ldr	r3, [pc, #264]	@ (8002108 <task_system_init+0x140>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	4b41      	ldr	r3, [pc, #260]	@ (800210c <task_system_init+0x144>)
 8002006:	4a42      	ldr	r2, [pc, #264]	@ (8002110 <task_system_init+0x148>)
 8002008:	213f      	movs	r1, #63	@ 0x3f
 800200a:	f000 fe91 	bl	8002d30 <sniprintf>
 800200e:	4603      	mov	r3, r0
 8002010:	4a3c      	ldr	r2, [pc, #240]	@ (8002104 <task_system_init+0x13c>)
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	4b37      	ldr	r3, [pc, #220]	@ (80020f4 <task_system_init+0x12c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fb11 	bl	8001640 <logger_log_print_>
 800201e:	b662      	cpsie	i

	g_task_system_cnt = G_TASK_SYS_CNT_INI;
 8002020:	4b3c      	ldr	r3, [pc, #240]	@ (8002114 <task_system_init+0x14c>)
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_system_cnt), g_task_system_cnt);
 8002026:	b672      	cpsid	i
 8002028:	4b32      	ldr	r3, [pc, #200]	@ (80020f4 <task_system_init+0x12c>)
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	4b39      	ldr	r3, [pc, #228]	@ (8002114 <task_system_init+0x14c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	4b39      	ldr	r3, [pc, #228]	@ (8002118 <task_system_init+0x150>)
 8002034:	4a39      	ldr	r2, [pc, #228]	@ (800211c <task_system_init+0x154>)
 8002036:	213f      	movs	r1, #63	@ 0x3f
 8002038:	f000 fe7a 	bl	8002d30 <sniprintf>
 800203c:	4603      	mov	r3, r0
 800203e:	4a31      	ldr	r2, [pc, #196]	@ (8002104 <task_system_init+0x13c>)
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b2c      	ldr	r3, [pc, #176]	@ (80020f4 <task_system_init+0x12c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fafa 	bl	8001640 <logger_log_print_>
 800204c:	b662      	cpsie	i

	init_queue_event_task_system();
 800204e:	f000 f9cb 	bl	80023e8 <init_queue_event_task_system>

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_system_dta = &task_system_dta;
 8002052:	4b33      	ldr	r3, [pc, #204]	@ (8002120 <task_system_init+0x158>)
 8002054:	60fb      	str	r3, [r7, #12]

	/* Print out: Task execution FSM */
	state = p_task_system_dta->state;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	791b      	ldrb	r3, [r3, #4]
 800205a:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 800205c:	b672      	cpsid	i
 800205e:	4b25      	ldr	r3, [pc, #148]	@ (80020f4 <task_system_init+0x12c>)
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	7afb      	ldrb	r3, [r7, #11]
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	4b2f      	ldr	r3, [pc, #188]	@ (8002124 <task_system_init+0x15c>)
 8002068:	4a2f      	ldr	r2, [pc, #188]	@ (8002128 <task_system_init+0x160>)
 800206a:	213f      	movs	r1, #63	@ 0x3f
 800206c:	f000 fe60 	bl	8002d30 <sniprintf>
 8002070:	4603      	mov	r3, r0
 8002072:	4a24      	ldr	r2, [pc, #144]	@ (8002104 <task_system_init+0x13c>)
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b1f      	ldr	r3, [pc, #124]	@ (80020f4 <task_system_init+0x12c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fae0 	bl	8001640 <logger_log_print_>
 8002080:	b662      	cpsie	i

	event = p_task_system_dta->event;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	795b      	ldrb	r3, [r3, #5]
 8002086:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8002088:	b672      	cpsid	i
 800208a:	4b1a      	ldr	r3, [pc, #104]	@ (80020f4 <task_system_init+0x12c>)
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	7abb      	ldrb	r3, [r7, #10]
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	4b26      	ldr	r3, [pc, #152]	@ (800212c <task_system_init+0x164>)
 8002094:	4a24      	ldr	r2, [pc, #144]	@ (8002128 <task_system_init+0x160>)
 8002096:	213f      	movs	r1, #63	@ 0x3f
 8002098:	f000 fe4a 	bl	8002d30 <sniprintf>
 800209c:	4603      	mov	r3, r0
 800209e:	4a19      	ldr	r2, [pc, #100]	@ (8002104 <task_system_init+0x13c>)
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <task_system_init+0x12c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff faca 	bl	8001640 <logger_log_print_>
 80020ac:	b662      	cpsie	i

	b_event = p_task_system_dta->flag;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	799b      	ldrb	r3, [r3, #6]
 80020b2:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 80020b4:	b672      	cpsid	i
 80020b6:	4b0f      	ldr	r3, [pc, #60]	@ (80020f4 <task_system_init+0x12c>)
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	7a7b      	ldrb	r3, [r7, #9]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <task_system_init+0xfc>
 80020c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002130 <task_system_init+0x168>)
 80020c2:	e000      	b.n	80020c6 <task_system_init+0xfe>
 80020c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002134 <task_system_init+0x16c>)
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <task_system_init+0x170>)
 80020ca:	4a1c      	ldr	r2, [pc, #112]	@ (800213c <task_system_init+0x174>)
 80020cc:	213f      	movs	r1, #63	@ 0x3f
 80020ce:	f000 fe2f 	bl	8002d30 <sniprintf>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002104 <task_system_init+0x13c>)
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <task_system_init+0x12c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff faaf 	bl	8001640 <logger_log_print_>
 80020e2:	b662      	cpsie	i

	g_task_system_tick_cnt = G_TASK_SYS_TICK_CNT_INI;
 80020e4:	4b16      	ldr	r3, [pc, #88]	@ (8002140 <task_system_init+0x178>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	080040e4 	.word	0x080040e4
 80020f8:	20000070 	.word	0x20000070
 80020fc:	08004010 	.word	0x08004010
 8002100:	08004024 	.word	0x08004024
 8002104:	20000158 	.word	0x20000158
 8002108:	20000074 	.word	0x20000074
 800210c:	0800403c 	.word	0x0800403c
 8002110:	08004048 	.word	0x08004048
 8002114:	2000019c 	.word	0x2000019c
 8002118:	08004058 	.word	0x08004058
 800211c:	0800406c 	.word	0x0800406c
 8002120:	20000068 	.word	0x20000068
 8002124:	0800407c 	.word	0x0800407c
 8002128:	08004084 	.word	0x08004084
 800212c:	08004090 	.word	0x08004090
 8002130:	08004098 	.word	0x08004098
 8002134:	080040a0 	.word	0x080040a0
 8002138:	080040a8 	.word	0x080040a8
 800213c:	080040b0 	.word	0x080040b0
 8002140:	200001a0 	.word	0x200001a0

08002144 <task_system_update>:

void task_system_update(void *parameters)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	task_system_dta_t *p_task_system_dta;
	bool b_time_update_required = false;
 800214c:	2300      	movs	r3, #0
 800214e:	73fb      	strb	r3, [r7, #15]

	/* Update Task System Counter */
	g_task_system_cnt++;
 8002150:	4ba2      	ldr	r3, [pc, #648]	@ (80023dc <task_system_update+0x298>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	4aa1      	ldr	r2, [pc, #644]	@ (80023dc <task_system_update+0x298>)
 8002158:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_system_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 800215a:	b672      	cpsid	i
    if (G_TASK_SYS_TICK_CNT_INI < g_task_system_tick_cnt)
 800215c:	4ba0      	ldr	r3, [pc, #640]	@ (80023e0 <task_system_update+0x29c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d006      	beq.n	8002172 <task_system_update+0x2e>
    {
    	g_task_system_tick_cnt--;
 8002164:	4b9e      	ldr	r3, [pc, #632]	@ (80023e0 <task_system_update+0x29c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	3b01      	subs	r3, #1
 800216a:	4a9d      	ldr	r2, [pc, #628]	@ (80023e0 <task_system_update+0x29c>)
 800216c:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8002172:	b662      	cpsie	i

    while (b_time_update_required)
 8002174:	e128      	b.n	80023c8 <task_system_update+0x284>
    {
		/* Protect shared resource (g_task_system_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 8002176:	b672      	cpsid	i
		if (G_TASK_SYS_TICK_CNT_INI < g_task_system_tick_cnt)
 8002178:	4b99      	ldr	r3, [pc, #612]	@ (80023e0 <task_system_update+0x29c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <task_system_update+0x4c>
		{
			g_task_system_tick_cnt--;
 8002180:	4b97      	ldr	r3, [pc, #604]	@ (80023e0 <task_system_update+0x29c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	3b01      	subs	r3, #1
 8002186:	4a96      	ldr	r2, [pc, #600]	@ (80023e0 <task_system_update+0x29c>)
 8002188:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
 800218e:	e001      	b.n	8002194 <task_system_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8002194:	b662      	cpsie	i

    	/* Update Task System Data Pointer */
		p_task_system_dta = &task_system_dta;
 8002196:	4b93      	ldr	r3, [pc, #588]	@ (80023e4 <task_system_update+0x2a0>)
 8002198:	60bb      	str	r3, [r7, #8]

		if (true == any_event_task_system())
 800219a:	f000 f991 	bl	80024c0 <any_event_task_system>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <task_system_update+0x72>
		{
			p_task_system_dta->flag = true;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2201      	movs	r2, #1
 80021a8:	719a      	strb	r2, [r3, #6]
			p_task_system_dta->event = get_event_task_system();
 80021aa:	f000 f963 	bl	8002474 <get_event_task_system>
 80021ae:	4603      	mov	r3, r0
 80021b0:	461a      	mov	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	715a      	strb	r2, [r3, #5]
		}

		switch (p_task_system_dta->state)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	791b      	ldrb	r3, [r3, #4]
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	f200 80f5 	bhi.w	80023aa <task_system_update+0x266>
 80021c0:	a201      	add	r2, pc, #4	@ (adr r2, 80021c8 <task_system_update+0x84>)
 80021c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c6:	bf00      	nop
 80021c8:	080021e5 	.word	0x080021e5
 80021cc:	0800220f 	.word	0x0800220f
 80021d0:	0800225f 	.word	0x0800225f
 80021d4:	080022af 	.word	0x080022af
 80021d8:	08002303 	.word	0x08002303
 80021dc:	08002329 	.word	0x08002329
 80021e0:	0800235f 	.word	0x0800235f

				break; */

			case ST_SYS_XX_AUTO_NOPRESENTE:

						if ((true == p_task_system_dta->flag) && (EV_SYS_AUTO_PRESENTE == p_task_system_dta->event))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	799b      	ldrb	r3, [r3, #6]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80e0 	beq.w	80023ae <task_system_update+0x26a>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	795b      	ldrb	r3, [r3, #5]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 80db 	bne.w	80023ae <task_system_update+0x26a>
						{
							p_task_system_dta->flag = false;
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2200      	movs	r2, #0
 80021fc:	719a      	strb	r2, [r3, #6]
							put_event_task_actuator(EV_LED_XX_ON, ID_LED_A);
 80021fe:	2100      	movs	r1, #0
 8002200:	2001      	movs	r0, #1
 8002202:	f7ff fcdb 	bl	8001bbc <put_event_task_actuator>
							p_task_system_dta->state = ST_SYS_XX_AUTO_PRESENTE;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2201      	movs	r2, #1
 800220a:	711a      	strb	r2, [r3, #4]
						}

						break;
 800220c:	e0cf      	b.n	80023ae <task_system_update+0x26a>
			case ST_SYS_XX_AUTO_PRESENTE:

						if ((true == p_task_system_dta->flag) && (EV_SYS_BOTON_TICKET_PULSADO == p_task_system_dta->event))
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	799b      	ldrb	r3, [r3, #6]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00e      	beq.n	8002234 <task_system_update+0xf0>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	795b      	ldrb	r3, [r3, #5]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d10a      	bne.n	8002234 <task_system_update+0xf0>
						{
							p_task_system_dta->flag = false;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2200      	movs	r2, #0
 8002222:	719a      	strb	r2, [r3, #6]
							put_event_task_actuator(EV_LED_XX_ON, ID_LED_B); // o LED A?
 8002224:	2101      	movs	r1, #1
 8002226:	2001      	movs	r0, #1
 8002228:	f7ff fcc8 	bl	8001bbc <put_event_task_actuator>
							p_task_system_dta->state = ST_SYS_XX_BOTON_TICKET_PULSADO;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2202      	movs	r2, #2
 8002230:	711a      	strb	r2, [r3, #4]
						{
							p_task_system_dta->flag = false;
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_A);
							p_task_system_dta->state = ST_SYS_XX_AUTO_NOPRESENTE;
						}
						break;
 8002232:	e0be      	b.n	80023b2 <task_system_update+0x26e>
						else if ((true == p_task_system_dta->flag) && (EV_SYS_AUTO_NOPRESENTE == p_task_system_dta->event))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	799b      	ldrb	r3, [r3, #6]
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80ba 	beq.w	80023b2 <task_system_update+0x26e>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	795b      	ldrb	r3, [r3, #5]
 8002242:	2b01      	cmp	r3, #1
 8002244:	f040 80b5 	bne.w	80023b2 <task_system_update+0x26e>
							p_task_system_dta->flag = false;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2200      	movs	r2, #0
 800224c:	719a      	strb	r2, [r3, #6]
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_A);
 800224e:	2100      	movs	r1, #0
 8002250:	2000      	movs	r0, #0
 8002252:	f7ff fcb3 	bl	8001bbc <put_event_task_actuator>
							p_task_system_dta->state = ST_SYS_XX_AUTO_NOPRESENTE;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2200      	movs	r2, #0
 800225a:	711a      	strb	r2, [r3, #4]
						break;
 800225c:	e0a9      	b.n	80023b2 <task_system_update+0x26e>

			case ST_SYS_XX_BOTON_TICKET_PULSADO:

						if ((true == p_task_system_dta->flag) && (EV_SYS_TICKET_RETIRADO == p_task_system_dta->event))
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	799b      	ldrb	r3, [r3, #6]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00e      	beq.n	8002284 <task_system_update+0x140>
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	795b      	ldrb	r3, [r3, #5]
 800226a:	2b04      	cmp	r3, #4
 800226c:	d10a      	bne.n	8002284 <task_system_update+0x140>
						{
							p_task_system_dta->flag = false;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2200      	movs	r2, #0
 8002272:	719a      	strb	r2, [r3, #6]
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_B);
 8002274:	2101      	movs	r1, #1
 8002276:	2000      	movs	r0, #0
 8002278:	f7ff fca0 	bl	8001bbc <put_event_task_actuator>
							p_task_system_dta->state =  ST_SYS_XX_TICKET_RETIRADO;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2203      	movs	r2, #3
 8002280:	711a      	strb	r2, [r3, #4]
						{
							p_task_system_dta->flag = false;
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_A);
							p_task_system_dta->state = ST_SYS_XX_AUTO_NOPRESENTE;
						}
						break;
 8002282:	e098      	b.n	80023b6 <task_system_update+0x272>
						else if ((true == p_task_system_dta->flag) && (EV_SYS_AUTO_NOPRESENTE == p_task_system_dta->event))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	799b      	ldrb	r3, [r3, #6]
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8094 	beq.w	80023b6 <task_system_update+0x272>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	795b      	ldrb	r3, [r3, #5]
 8002292:	2b01      	cmp	r3, #1
 8002294:	f040 808f 	bne.w	80023b6 <task_system_update+0x272>
							p_task_system_dta->flag = false;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2200      	movs	r2, #0
 800229c:	719a      	strb	r2, [r3, #6]
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_A);
 800229e:	2100      	movs	r1, #0
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7ff fc8b 	bl	8001bbc <put_event_task_actuator>
							p_task_system_dta->state = ST_SYS_XX_AUTO_NOPRESENTE;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2200      	movs	r2, #0
 80022aa:	711a      	strb	r2, [r3, #4]
						break;
 80022ac:	e083      	b.n	80023b6 <task_system_update+0x272>

			case ST_SYS_XX_TICKET_RETIRADO:

						if ((true == p_task_system_dta->flag) && (EV_SYS_BARRERA_ARRIBA == p_task_system_dta->event))
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	799b      	ldrb	r3, [r3, #6]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d012      	beq.n	80022dc <task_system_update+0x198>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	795b      	ldrb	r3, [r3, #5]
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d10e      	bne.n	80022dc <task_system_update+0x198>
						{
							p_task_system_dta->flag = false;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2200      	movs	r2, #0
 80022c2:	719a      	strb	r2, [r3, #6]
							put_event_task_actuator(EV_LED_XX_ON, ID_LED_C);
 80022c4:	2102      	movs	r1, #2
 80022c6:	2001      	movs	r0, #1
 80022c8:	f7ff fc78 	bl	8001bbc <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_ON, ID_LED_D);
 80022cc:	2103      	movs	r1, #3
 80022ce:	2001      	movs	r0, #1
 80022d0:	f7ff fc74 	bl	8001bbc <put_event_task_actuator>
							p_task_system_dta->state =  ST_SYS_XX_BARRERA_ARRIBA;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2204      	movs	r2, #4
 80022d8:	711a      	strb	r2, [r3, #4]
						{
							p_task_system_dta->flag = false;
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_A);
							p_task_system_dta->state = ST_SYS_XX_AUTO_NOPRESENTE;
						}
						break;
 80022da:	e06e      	b.n	80023ba <task_system_update+0x276>
						else if ((true == p_task_system_dta->flag) && (EV_SYS_AUTO_NOPRESENTE == p_task_system_dta->event))
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	799b      	ldrb	r3, [r3, #6]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d06a      	beq.n	80023ba <task_system_update+0x276>
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	795b      	ldrb	r3, [r3, #5]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d166      	bne.n	80023ba <task_system_update+0x276>
							p_task_system_dta->flag = false;
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2200      	movs	r2, #0
 80022f0:	719a      	strb	r2, [r3, #6]
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_A);
 80022f2:	2100      	movs	r1, #0
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7ff fc61 	bl	8001bbc <put_event_task_actuator>
							p_task_system_dta->state = ST_SYS_XX_AUTO_NOPRESENTE;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2200      	movs	r2, #0
 80022fe:	711a      	strb	r2, [r3, #4]
						break;
 8002300:	e05b      	b.n	80023ba <task_system_update+0x276>

			case ST_SYS_XX_BARRERA_ARRIBA:

						if ((true == p_task_system_dta->flag) && (EV_SYS_AUTO_PASANDO == p_task_system_dta->event))
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	799b      	ldrb	r3, [r3, #6]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d059      	beq.n	80023be <task_system_update+0x27a>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	795b      	ldrb	r3, [r3, #5]
 800230e:	2b08      	cmp	r3, #8
 8002310:	d155      	bne.n	80023be <task_system_update+0x27a>
						{
							p_task_system_dta->flag = false;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2200      	movs	r2, #0
 8002316:	719a      	strb	r2, [r3, #6]
							 //ver
							put_event_task_actuator(EV_LED_XX_BLINK, ID_LED_D); //ver
 8002318:	2103      	movs	r1, #3
 800231a:	2003      	movs	r0, #3
 800231c:	f7ff fc4e 	bl	8001bbc <put_event_task_actuator>
							p_task_system_dta->state =  ST_SYS_XX_AUTO_PASANDO;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2205      	movs	r2, #5
 8002324:	711a      	strb	r2, [r3, #4]
						}
						break;
 8002326:	e04a      	b.n	80023be <task_system_update+0x27a>

			case ST_SYS_XX_AUTO_PASANDO:

						if ((true == p_task_system_dta->flag) && (EV_SYS_BARRERA_ABAJO == p_task_system_dta->event))
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	799b      	ldrb	r3, [r3, #6]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d048      	beq.n	80023c2 <task_system_update+0x27e>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	795b      	ldrb	r3, [r3, #5]
 8002334:	2b0a      	cmp	r3, #10
 8002336:	d144      	bne.n	80023c2 <task_system_update+0x27e>
						{
							p_task_system_dta->flag = false;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2200      	movs	r2, #0
 800233c:	719a      	strb	r2, [r3, #6]
							put_event_task_actuator(EV_LED_XX_ON, ID_LED_A);
 800233e:	2100      	movs	r1, #0
 8002340:	2001      	movs	r0, #1
 8002342:	f7ff fc3b 	bl	8001bbc <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_D);  /// ver
 8002346:	2103      	movs	r1, #3
 8002348:	2000      	movs	r0, #0
 800234a:	f7ff fc37 	bl	8001bbc <put_event_task_actuator>
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_C);
 800234e:	2102      	movs	r1, #2
 8002350:	2000      	movs	r0, #0
 8002352:	f7ff fc33 	bl	8001bbc <put_event_task_actuator>
							p_task_system_dta->state =  ST_SYS_XX_BARRERA_ABAJO;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2206      	movs	r2, #6
 800235a:	711a      	strb	r2, [r3, #4]
						}
						break;
 800235c:	e031      	b.n	80023c2 <task_system_update+0x27e>
			case ST_SYS_XX_BARRERA_ABAJO:

						if ((true == p_task_system_dta->flag) && (EV_SYS_AUTO_NOPRESENTE == p_task_system_dta->event))
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	799b      	ldrb	r3, [r3, #6]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00e      	beq.n	8002384 <task_system_update+0x240>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	795b      	ldrb	r3, [r3, #5]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d10a      	bne.n	8002384 <task_system_update+0x240>
						{
							p_task_system_dta->flag = false;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2200      	movs	r2, #0
 8002372:	719a      	strb	r2, [r3, #6]
							put_event_task_actuator(EV_LED_XX_OFF, ID_LED_A);
 8002374:	2100      	movs	r1, #0
 8002376:	2000      	movs	r0, #0
 8002378:	f7ff fc20 	bl	8001bbc <put_event_task_actuator>
							p_task_system_dta->state =  ST_SYS_XX_AUTO_NOPRESENTE;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2200      	movs	r2, #0
 8002380:	711a      	strb	r2, [r3, #4]
						{
							p_task_system_dta->flag = false;
							put_event_task_actuator(EV_LED_XX_ON, ID_LED_B);//Tendría que estar prendido, por las dudas (el A o el B??)
							p_task_system_dta->state =  ST_SYS_XX_AUTO_PRESENTE;
						}
						break;
 8002382:	e020      	b.n	80023c6 <task_system_update+0x282>
						else if ((true == p_task_system_dta->flag) && (EV_SYS_AUTO_PRESENTE == p_task_system_dta->event))
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	799b      	ldrb	r3, [r3, #6]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01c      	beq.n	80023c6 <task_system_update+0x282>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	795b      	ldrb	r3, [r3, #5]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d118      	bne.n	80023c6 <task_system_update+0x282>
							p_task_system_dta->flag = false;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2200      	movs	r2, #0
 8002398:	719a      	strb	r2, [r3, #6]
							put_event_task_actuator(EV_LED_XX_ON, ID_LED_B);//Tendría que estar prendido, por las dudas (el A o el B??)
 800239a:	2101      	movs	r1, #1
 800239c:	2001      	movs	r0, #1
 800239e:	f7ff fc0d 	bl	8001bbc <put_event_task_actuator>
							p_task_system_dta->state =  ST_SYS_XX_AUTO_PRESENTE;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2201      	movs	r2, #1
 80023a6:	711a      	strb	r2, [r3, #4]
						break;
 80023a8:	e00d      	b.n	80023c6 <task_system_update+0x282>
			default:

				break;
 80023aa:	bf00      	nop
 80023ac:	e00c      	b.n	80023c8 <task_system_update+0x284>
						break;
 80023ae:	bf00      	nop
 80023b0:	e00a      	b.n	80023c8 <task_system_update+0x284>
						break;
 80023b2:	bf00      	nop
 80023b4:	e008      	b.n	80023c8 <task_system_update+0x284>
						break;
 80023b6:	bf00      	nop
 80023b8:	e006      	b.n	80023c8 <task_system_update+0x284>
						break;
 80023ba:	bf00      	nop
 80023bc:	e004      	b.n	80023c8 <task_system_update+0x284>
						break;
 80023be:	bf00      	nop
 80023c0:	e002      	b.n	80023c8 <task_system_update+0x284>
						break;
 80023c2:	bf00      	nop
 80023c4:	e000      	b.n	80023c8 <task_system_update+0x284>
						break;
 80023c6:	bf00      	nop
    while (b_time_update_required)
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f47f aed3 	bne.w	8002176 <task_system_update+0x32>
		}
	}
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	2000019c 	.word	0x2000019c
 80023e0:	200001a0 	.word	0x200001a0
 80023e4:	20000068 	.word	0x20000068

080023e8 <init_queue_event_task_system>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_system(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 80023ee:	4b0f      	ldr	r3, [pc, #60]	@ (800242c <init_queue_event_task_system+0x44>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 80023f4:	4b0d      	ldr	r3, [pc, #52]	@ (800242c <init_queue_event_task_system+0x44>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 80023fa:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <init_queue_event_task_system+0x44>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 8002400:	2300      	movs	r3, #0
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	e008      	b.n	8002418 <init_queue_event_task_system+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 8002406:	4a09      	ldr	r2, [pc, #36]	@ (800242c <init_queue_event_task_system+0x44>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	330c      	adds	r3, #12
 800240e:	22ff      	movs	r2, #255	@ 0xff
 8002410:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3301      	adds	r3, #1
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b0f      	cmp	r3, #15
 800241c:	d9f3      	bls.n	8002406 <init_queue_event_task_system+0x1e>
}
 800241e:	bf00      	nop
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	200001a4 	.word	0x200001a4

08002430 <put_event_task_system>:

void put_event_task_system(task_system_ev_t event)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 800243a:	4b0d      	ldr	r3, [pc, #52]	@ (8002470 <put_event_task_system+0x40>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	3301      	adds	r3, #1
 8002440:	4a0b      	ldr	r2, [pc, #44]	@ (8002470 <put_event_task_system+0x40>)
 8002442:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 8002444:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <put_event_task_system+0x40>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	4909      	ldr	r1, [pc, #36]	@ (8002470 <put_event_task_system+0x40>)
 800244c:	600a      	str	r2, [r1, #0]
 800244e:	4a08      	ldr	r2, [pc, #32]	@ (8002470 <put_event_task_system+0x40>)
 8002450:	4413      	add	r3, r2
 8002452:	79fa      	ldrb	r2, [r7, #7]
 8002454:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 8002456:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <put_event_task_system+0x40>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b10      	cmp	r3, #16
 800245c:	d102      	bne.n	8002464 <put_event_task_system+0x34>
		queue_task_a.head = 0;
 800245e:	4b04      	ldr	r3, [pc, #16]	@ (8002470 <put_event_task_system+0x40>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	200001a4 	.word	0x200001a4

08002474 <get_event_task_system>:

task_system_ev_t get_event_task_system(void)

{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
	task_system_ev_t event;

	queue_task_a.count--;
 800247a:	4b10      	ldr	r3, [pc, #64]	@ (80024bc <get_event_task_system+0x48>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	3b01      	subs	r3, #1
 8002480:	4a0e      	ldr	r2, [pc, #56]	@ (80024bc <get_event_task_system+0x48>)
 8002482:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 8002484:	4b0d      	ldr	r3, [pc, #52]	@ (80024bc <get_event_task_system+0x48>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a0c      	ldr	r2, [pc, #48]	@ (80024bc <get_event_task_system+0x48>)
 800248a:	4413      	add	r3, r2
 800248c:	7b1b      	ldrb	r3, [r3, #12]
 800248e:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 8002490:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <get_event_task_system+0x48>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	4909      	ldr	r1, [pc, #36]	@ (80024bc <get_event_task_system+0x48>)
 8002498:	604a      	str	r2, [r1, #4]
 800249a:	4a08      	ldr	r2, [pc, #32]	@ (80024bc <get_event_task_system+0x48>)
 800249c:	4413      	add	r3, r2
 800249e:	22ff      	movs	r2, #255	@ 0xff
 80024a0:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 80024a2:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <get_event_task_system+0x48>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b10      	cmp	r3, #16
 80024a8:	d102      	bne.n	80024b0 <get_event_task_system+0x3c>
		queue_task_a.tail = 0;
 80024aa:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <get_event_task_system+0x48>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	605a      	str	r2, [r3, #4]

	return event;
 80024b0:	79fb      	ldrb	r3, [r7, #7]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	200001a4 	.word	0x200001a4

080024c0 <any_event_task_system>:

bool any_event_task_system(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 80024c4:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <any_event_task_system+0x20>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <any_event_task_system+0x20>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	bf14      	ite	ne
 80024d0:	2301      	movne	r3, #1
 80024d2:	2300      	moveq	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	200001a4 	.word	0x200001a4

080024e4 <findslot>:
 80024e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002510 <findslot+0x2c>)
 80024e6:	b510      	push	{r4, lr}
 80024e8:	4604      	mov	r4, r0
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	b118      	cbz	r0, 80024f6 <findslot+0x12>
 80024ee:	6a03      	ldr	r3, [r0, #32]
 80024f0:	b90b      	cbnz	r3, 80024f6 <findslot+0x12>
 80024f2:	f000 fbd5 	bl	8002ca0 <__sinit>
 80024f6:	2c13      	cmp	r4, #19
 80024f8:	d807      	bhi.n	800250a <findslot+0x26>
 80024fa:	4806      	ldr	r0, [pc, #24]	@ (8002514 <findslot+0x30>)
 80024fc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002500:	3201      	adds	r2, #1
 8002502:	d002      	beq.n	800250a <findslot+0x26>
 8002504:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002508:	bd10      	pop	{r4, pc}
 800250a:	2000      	movs	r0, #0
 800250c:	e7fc      	b.n	8002508 <findslot+0x24>
 800250e:	bf00      	nop
 8002510:	2000008c 	.word	0x2000008c
 8002514:	200001cc 	.word	0x200001cc

08002518 <error>:
 8002518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251a:	4604      	mov	r4, r0
 800251c:	f000 fcce 	bl	8002ebc <__errno>
 8002520:	2613      	movs	r6, #19
 8002522:	4605      	mov	r5, r0
 8002524:	2700      	movs	r7, #0
 8002526:	4630      	mov	r0, r6
 8002528:	4639      	mov	r1, r7
 800252a:	beab      	bkpt	0x00ab
 800252c:	4606      	mov	r6, r0
 800252e:	4620      	mov	r0, r4
 8002530:	602e      	str	r6, [r5, #0]
 8002532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002534 <checkerror>:
 8002534:	1c43      	adds	r3, r0, #1
 8002536:	d101      	bne.n	800253c <checkerror+0x8>
 8002538:	f7ff bfee 	b.w	8002518 <error>
 800253c:	4770      	bx	lr

0800253e <_swiread>:
 800253e:	b530      	push	{r4, r5, lr}
 8002540:	b085      	sub	sp, #20
 8002542:	2406      	movs	r4, #6
 8002544:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002548:	9203      	str	r2, [sp, #12]
 800254a:	ad01      	add	r5, sp, #4
 800254c:	4620      	mov	r0, r4
 800254e:	4629      	mov	r1, r5
 8002550:	beab      	bkpt	0x00ab
 8002552:	4604      	mov	r4, r0
 8002554:	4620      	mov	r0, r4
 8002556:	f7ff ffed 	bl	8002534 <checkerror>
 800255a:	b005      	add	sp, #20
 800255c:	bd30      	pop	{r4, r5, pc}

0800255e <_read>:
 800255e:	b570      	push	{r4, r5, r6, lr}
 8002560:	460e      	mov	r6, r1
 8002562:	4614      	mov	r4, r2
 8002564:	f7ff ffbe 	bl	80024e4 <findslot>
 8002568:	4605      	mov	r5, r0
 800256a:	b930      	cbnz	r0, 800257a <_read+0x1c>
 800256c:	f000 fca6 	bl	8002ebc <__errno>
 8002570:	2309      	movs	r3, #9
 8002572:	6003      	str	r3, [r0, #0]
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	bd70      	pop	{r4, r5, r6, pc}
 800257a:	4622      	mov	r2, r4
 800257c:	4631      	mov	r1, r6
 800257e:	6800      	ldr	r0, [r0, #0]
 8002580:	f7ff ffdd 	bl	800253e <_swiread>
 8002584:	1c43      	adds	r3, r0, #1
 8002586:	d0f5      	beq.n	8002574 <_read+0x16>
 8002588:	686b      	ldr	r3, [r5, #4]
 800258a:	1a20      	subs	r0, r4, r0
 800258c:	4403      	add	r3, r0
 800258e:	606b      	str	r3, [r5, #4]
 8002590:	e7f2      	b.n	8002578 <_read+0x1a>

08002592 <_swilseek>:
 8002592:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002594:	460c      	mov	r4, r1
 8002596:	4616      	mov	r6, r2
 8002598:	f7ff ffa4 	bl	80024e4 <findslot>
 800259c:	4605      	mov	r5, r0
 800259e:	b940      	cbnz	r0, 80025b2 <_swilseek+0x20>
 80025a0:	f000 fc8c 	bl	8002ebc <__errno>
 80025a4:	2309      	movs	r3, #9
 80025a6:	6003      	str	r3, [r0, #0]
 80025a8:	f04f 34ff 	mov.w	r4, #4294967295
 80025ac:	4620      	mov	r0, r4
 80025ae:	b003      	add	sp, #12
 80025b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025b2:	2e02      	cmp	r6, #2
 80025b4:	d903      	bls.n	80025be <_swilseek+0x2c>
 80025b6:	f000 fc81 	bl	8002ebc <__errno>
 80025ba:	2316      	movs	r3, #22
 80025bc:	e7f3      	b.n	80025a6 <_swilseek+0x14>
 80025be:	2e01      	cmp	r6, #1
 80025c0:	d112      	bne.n	80025e8 <_swilseek+0x56>
 80025c2:	6843      	ldr	r3, [r0, #4]
 80025c4:	18e4      	adds	r4, r4, r3
 80025c6:	d4f6      	bmi.n	80025b6 <_swilseek+0x24>
 80025c8:	682b      	ldr	r3, [r5, #0]
 80025ca:	260a      	movs	r6, #10
 80025cc:	466f      	mov	r7, sp
 80025ce:	e9cd 3400 	strd	r3, r4, [sp]
 80025d2:	4630      	mov	r0, r6
 80025d4:	4639      	mov	r1, r7
 80025d6:	beab      	bkpt	0x00ab
 80025d8:	4606      	mov	r6, r0
 80025da:	4630      	mov	r0, r6
 80025dc:	f7ff ffaa 	bl	8002534 <checkerror>
 80025e0:	2800      	cmp	r0, #0
 80025e2:	dbe1      	blt.n	80025a8 <_swilseek+0x16>
 80025e4:	606c      	str	r4, [r5, #4]
 80025e6:	e7e1      	b.n	80025ac <_swilseek+0x1a>
 80025e8:	2e02      	cmp	r6, #2
 80025ea:	6803      	ldr	r3, [r0, #0]
 80025ec:	d1ec      	bne.n	80025c8 <_swilseek+0x36>
 80025ee:	260c      	movs	r6, #12
 80025f0:	466f      	mov	r7, sp
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	4630      	mov	r0, r6
 80025f6:	4639      	mov	r1, r7
 80025f8:	beab      	bkpt	0x00ab
 80025fa:	4606      	mov	r6, r0
 80025fc:	4630      	mov	r0, r6
 80025fe:	f7ff ff99 	bl	8002534 <checkerror>
 8002602:	1c43      	adds	r3, r0, #1
 8002604:	d0d0      	beq.n	80025a8 <_swilseek+0x16>
 8002606:	4404      	add	r4, r0
 8002608:	e7de      	b.n	80025c8 <_swilseek+0x36>

0800260a <_lseek>:
 800260a:	f7ff bfc2 	b.w	8002592 <_swilseek>

0800260e <_swiwrite>:
 800260e:	b530      	push	{r4, r5, lr}
 8002610:	b085      	sub	sp, #20
 8002612:	2405      	movs	r4, #5
 8002614:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002618:	9203      	str	r2, [sp, #12]
 800261a:	ad01      	add	r5, sp, #4
 800261c:	4620      	mov	r0, r4
 800261e:	4629      	mov	r1, r5
 8002620:	beab      	bkpt	0x00ab
 8002622:	4604      	mov	r4, r0
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff ff85 	bl	8002534 <checkerror>
 800262a:	b005      	add	sp, #20
 800262c:	bd30      	pop	{r4, r5, pc}

0800262e <_write>:
 800262e:	b570      	push	{r4, r5, r6, lr}
 8002630:	460e      	mov	r6, r1
 8002632:	4615      	mov	r5, r2
 8002634:	f7ff ff56 	bl	80024e4 <findslot>
 8002638:	4604      	mov	r4, r0
 800263a:	b930      	cbnz	r0, 800264a <_write+0x1c>
 800263c:	f000 fc3e 	bl	8002ebc <__errno>
 8002640:	2309      	movs	r3, #9
 8002642:	6003      	str	r3, [r0, #0]
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	bd70      	pop	{r4, r5, r6, pc}
 800264a:	462a      	mov	r2, r5
 800264c:	4631      	mov	r1, r6
 800264e:	6800      	ldr	r0, [r0, #0]
 8002650:	f7ff ffdd 	bl	800260e <_swiwrite>
 8002654:	1e03      	subs	r3, r0, #0
 8002656:	dbf5      	blt.n	8002644 <_write+0x16>
 8002658:	6862      	ldr	r2, [r4, #4]
 800265a:	1ae8      	subs	r0, r5, r3
 800265c:	4402      	add	r2, r0
 800265e:	42ab      	cmp	r3, r5
 8002660:	6062      	str	r2, [r4, #4]
 8002662:	d1f1      	bne.n	8002648 <_write+0x1a>
 8002664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002668:	2000      	movs	r0, #0
 800266a:	f7ff bf55 	b.w	8002518 <error>

0800266e <_swiclose>:
 800266e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002670:	2402      	movs	r4, #2
 8002672:	9001      	str	r0, [sp, #4]
 8002674:	ad01      	add	r5, sp, #4
 8002676:	4620      	mov	r0, r4
 8002678:	4629      	mov	r1, r5
 800267a:	beab      	bkpt	0x00ab
 800267c:	4604      	mov	r4, r0
 800267e:	4620      	mov	r0, r4
 8002680:	f7ff ff58 	bl	8002534 <checkerror>
 8002684:	b003      	add	sp, #12
 8002686:	bd30      	pop	{r4, r5, pc}

08002688 <_close>:
 8002688:	b538      	push	{r3, r4, r5, lr}
 800268a:	4605      	mov	r5, r0
 800268c:	f7ff ff2a 	bl	80024e4 <findslot>
 8002690:	4604      	mov	r4, r0
 8002692:	b930      	cbnz	r0, 80026a2 <_close+0x1a>
 8002694:	f000 fc12 	bl	8002ebc <__errno>
 8002698:	2309      	movs	r3, #9
 800269a:	6003      	str	r3, [r0, #0]
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	bd38      	pop	{r3, r4, r5, pc}
 80026a2:	3d01      	subs	r5, #1
 80026a4:	2d01      	cmp	r5, #1
 80026a6:	d809      	bhi.n	80026bc <_close+0x34>
 80026a8:	4b07      	ldr	r3, [pc, #28]	@ (80026c8 <_close+0x40>)
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d104      	bne.n	80026bc <_close+0x34>
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
 80026b6:	2000      	movs	r0, #0
 80026b8:	6023      	str	r3, [r4, #0]
 80026ba:	e7f1      	b.n	80026a0 <_close+0x18>
 80026bc:	6820      	ldr	r0, [r4, #0]
 80026be:	f7ff ffd6 	bl	800266e <_swiclose>
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d0f5      	beq.n	80026b2 <_close+0x2a>
 80026c6:	e7eb      	b.n	80026a0 <_close+0x18>
 80026c8:	200001cc 	.word	0x200001cc

080026cc <_swistat>:
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	460c      	mov	r4, r1
 80026d0:	f7ff ff08 	bl	80024e4 <findslot>
 80026d4:	4605      	mov	r5, r0
 80026d6:	b930      	cbnz	r0, 80026e6 <_swistat+0x1a>
 80026d8:	f000 fbf0 	bl	8002ebc <__errno>
 80026dc:	2309      	movs	r3, #9
 80026de:	6003      	str	r3, [r0, #0]
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295
 80026e4:	bd70      	pop	{r4, r5, r6, pc}
 80026e6:	6863      	ldr	r3, [r4, #4]
 80026e8:	260c      	movs	r6, #12
 80026ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026ee:	6063      	str	r3, [r4, #4]
 80026f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026f4:	64a3      	str	r3, [r4, #72]	@ 0x48
 80026f6:	4630      	mov	r0, r6
 80026f8:	4629      	mov	r1, r5
 80026fa:	beab      	bkpt	0x00ab
 80026fc:	4605      	mov	r5, r0
 80026fe:	4628      	mov	r0, r5
 8002700:	f7ff ff18 	bl	8002534 <checkerror>
 8002704:	1c43      	adds	r3, r0, #1
 8002706:	d0eb      	beq.n	80026e0 <_swistat+0x14>
 8002708:	6120      	str	r0, [r4, #16]
 800270a:	2000      	movs	r0, #0
 800270c:	e7ea      	b.n	80026e4 <_swistat+0x18>

0800270e <_fstat>:
 800270e:	460b      	mov	r3, r1
 8002710:	b510      	push	{r4, lr}
 8002712:	2100      	movs	r1, #0
 8002714:	4604      	mov	r4, r0
 8002716:	2258      	movs	r2, #88	@ 0x58
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fb80 	bl	8002e1e <memset>
 800271e:	4601      	mov	r1, r0
 8002720:	4620      	mov	r0, r4
 8002722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002726:	f7ff bfd1 	b.w	80026cc <_swistat>

0800272a <_stat>:
 800272a:	b538      	push	{r3, r4, r5, lr}
 800272c:	460d      	mov	r5, r1
 800272e:	4604      	mov	r4, r0
 8002730:	2258      	movs	r2, #88	@ 0x58
 8002732:	2100      	movs	r1, #0
 8002734:	4628      	mov	r0, r5
 8002736:	f000 fb72 	bl	8002e1e <memset>
 800273a:	4620      	mov	r0, r4
 800273c:	2100      	movs	r1, #0
 800273e:	f000 f811 	bl	8002764 <_swiopen>
 8002742:	1c43      	adds	r3, r0, #1
 8002744:	4604      	mov	r4, r0
 8002746:	d00b      	beq.n	8002760 <_stat+0x36>
 8002748:	686b      	ldr	r3, [r5, #4]
 800274a:	4629      	mov	r1, r5
 800274c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002750:	606b      	str	r3, [r5, #4]
 8002752:	f7ff ffbb 	bl	80026cc <_swistat>
 8002756:	4605      	mov	r5, r0
 8002758:	4620      	mov	r0, r4
 800275a:	f7ff ff95 	bl	8002688 <_close>
 800275e:	462c      	mov	r4, r5
 8002760:	4620      	mov	r0, r4
 8002762:	bd38      	pop	{r3, r4, r5, pc}

08002764 <_swiopen>:
 8002764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002768:	4682      	mov	sl, r0
 800276a:	460e      	mov	r6, r1
 800276c:	2400      	movs	r4, #0
 800276e:	4f28      	ldr	r7, [pc, #160]	@ (8002810 <_swiopen+0xac>)
 8002770:	b096      	sub	sp, #88	@ 0x58
 8002772:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8002776:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800277a:	3301      	adds	r3, #1
 800277c:	d00c      	beq.n	8002798 <_swiopen+0x34>
 800277e:	3401      	adds	r4, #1
 8002780:	2c14      	cmp	r4, #20
 8002782:	d1f6      	bne.n	8002772 <_swiopen+0xe>
 8002784:	f000 fb9a 	bl	8002ebc <__errno>
 8002788:	2318      	movs	r3, #24
 800278a:	f04f 34ff 	mov.w	r4, #4294967295
 800278e:	6003      	str	r3, [r0, #0]
 8002790:	4620      	mov	r0, r4
 8002792:	b016      	add	sp, #88	@ 0x58
 8002794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002798:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800279c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80027a0:	46e9      	mov	r9, sp
 80027a2:	d109      	bne.n	80027b8 <_swiopen+0x54>
 80027a4:	4649      	mov	r1, r9
 80027a6:	4650      	mov	r0, sl
 80027a8:	f7ff ffbf 	bl	800272a <_stat>
 80027ac:	3001      	adds	r0, #1
 80027ae:	d003      	beq.n	80027b8 <_swiopen+0x54>
 80027b0:	f000 fb84 	bl	8002ebc <__errno>
 80027b4:	2311      	movs	r3, #17
 80027b6:	e7e8      	b.n	800278a <_swiopen+0x26>
 80027b8:	f240 6301 	movw	r3, #1537	@ 0x601
 80027bc:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80027c0:	07b2      	lsls	r2, r6, #30
 80027c2:	bf48      	it	mi
 80027c4:	f045 0502 	orrmi.w	r5, r5, #2
 80027c8:	421e      	tst	r6, r3
 80027ca:	bf18      	it	ne
 80027cc:	f045 0504 	orrne.w	r5, r5, #4
 80027d0:	0733      	lsls	r3, r6, #28
 80027d2:	bf48      	it	mi
 80027d4:	f025 0504 	bicmi.w	r5, r5, #4
 80027d8:	4650      	mov	r0, sl
 80027da:	bf48      	it	mi
 80027dc:	f045 0508 	orrmi.w	r5, r5, #8
 80027e0:	f8cd a000 	str.w	sl, [sp]
 80027e4:	f7fd fcb2 	bl	800014c <strlen>
 80027e8:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80027ec:	2501      	movs	r5, #1
 80027ee:	4628      	mov	r0, r5
 80027f0:	4649      	mov	r1, r9
 80027f2:	beab      	bkpt	0x00ab
 80027f4:	4605      	mov	r5, r0
 80027f6:	2d00      	cmp	r5, #0
 80027f8:	db05      	blt.n	8002806 <_swiopen+0xa2>
 80027fa:	2300      	movs	r3, #0
 80027fc:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8002800:	4447      	add	r7, r8
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	e7c4      	b.n	8002790 <_swiopen+0x2c>
 8002806:	4628      	mov	r0, r5
 8002808:	f7ff fe86 	bl	8002518 <error>
 800280c:	4604      	mov	r4, r0
 800280e:	e7bf      	b.n	8002790 <_swiopen+0x2c>
 8002810:	200001cc 	.word	0x200001cc

08002814 <_get_semihosting_exts>:
 8002814:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002818:	4606      	mov	r6, r0
 800281a:	460f      	mov	r7, r1
 800281c:	4829      	ldr	r0, [pc, #164]	@ (80028c4 <_get_semihosting_exts+0xb0>)
 800281e:	2100      	movs	r1, #0
 8002820:	4615      	mov	r5, r2
 8002822:	f7ff ff9f 	bl	8002764 <_swiopen>
 8002826:	4604      	mov	r4, r0
 8002828:	462a      	mov	r2, r5
 800282a:	2100      	movs	r1, #0
 800282c:	4630      	mov	r0, r6
 800282e:	f000 faf6 	bl	8002e1e <memset>
 8002832:	1c63      	adds	r3, r4, #1
 8002834:	d014      	beq.n	8002860 <_get_semihosting_exts+0x4c>
 8002836:	4620      	mov	r0, r4
 8002838:	f7ff fe54 	bl	80024e4 <findslot>
 800283c:	f04f 080c 	mov.w	r8, #12
 8002840:	4681      	mov	r9, r0
 8002842:	4640      	mov	r0, r8
 8002844:	4649      	mov	r1, r9
 8002846:	beab      	bkpt	0x00ab
 8002848:	4680      	mov	r8, r0
 800284a:	4640      	mov	r0, r8
 800284c:	f7ff fe72 	bl	8002534 <checkerror>
 8002850:	2803      	cmp	r0, #3
 8002852:	dd02      	ble.n	800285a <_get_semihosting_exts+0x46>
 8002854:	1ec3      	subs	r3, r0, #3
 8002856:	42ab      	cmp	r3, r5
 8002858:	dc07      	bgt.n	800286a <_get_semihosting_exts+0x56>
 800285a:	4620      	mov	r0, r4
 800285c:	f7ff ff14 	bl	8002688 <_close>
 8002860:	f04f 30ff 	mov.w	r0, #4294967295
 8002864:	b003      	add	sp, #12
 8002866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800286a:	2204      	movs	r2, #4
 800286c:	4620      	mov	r0, r4
 800286e:	eb0d 0102 	add.w	r1, sp, r2
 8002872:	f7ff fe74 	bl	800255e <_read>
 8002876:	2803      	cmp	r0, #3
 8002878:	ddef      	ble.n	800285a <_get_semihosting_exts+0x46>
 800287a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800287e:	2b53      	cmp	r3, #83	@ 0x53
 8002880:	d1eb      	bne.n	800285a <_get_semihosting_exts+0x46>
 8002882:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002886:	2b48      	cmp	r3, #72	@ 0x48
 8002888:	d1e7      	bne.n	800285a <_get_semihosting_exts+0x46>
 800288a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800288e:	2b46      	cmp	r3, #70	@ 0x46
 8002890:	d1e3      	bne.n	800285a <_get_semihosting_exts+0x46>
 8002892:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002896:	2b42      	cmp	r3, #66	@ 0x42
 8002898:	d1df      	bne.n	800285a <_get_semihosting_exts+0x46>
 800289a:	2201      	movs	r2, #1
 800289c:	4639      	mov	r1, r7
 800289e:	4620      	mov	r0, r4
 80028a0:	f7ff fe77 	bl	8002592 <_swilseek>
 80028a4:	2800      	cmp	r0, #0
 80028a6:	dbd8      	blt.n	800285a <_get_semihosting_exts+0x46>
 80028a8:	462a      	mov	r2, r5
 80028aa:	4631      	mov	r1, r6
 80028ac:	4620      	mov	r0, r4
 80028ae:	f7ff fe56 	bl	800255e <_read>
 80028b2:	4605      	mov	r5, r0
 80028b4:	4620      	mov	r0, r4
 80028b6:	f7ff fee7 	bl	8002688 <_close>
 80028ba:	4628      	mov	r0, r5
 80028bc:	f7ff fe3a 	bl	8002534 <checkerror>
 80028c0:	e7d0      	b.n	8002864 <_get_semihosting_exts+0x50>
 80028c2:	bf00      	nop
 80028c4:	080041b0 	.word	0x080041b0

080028c8 <initialise_semihosting_exts>:
 80028c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028ca:	2100      	movs	r1, #0
 80028cc:	2201      	movs	r2, #1
 80028ce:	4d09      	ldr	r5, [pc, #36]	@ (80028f4 <initialise_semihosting_exts+0x2c>)
 80028d0:	4c09      	ldr	r4, [pc, #36]	@ (80028f8 <initialise_semihosting_exts+0x30>)
 80028d2:	a801      	add	r0, sp, #4
 80028d4:	6029      	str	r1, [r5, #0]
 80028d6:	6022      	str	r2, [r4, #0]
 80028d8:	f7ff ff9c 	bl	8002814 <_get_semihosting_exts>
 80028dc:	2800      	cmp	r0, #0
 80028de:	dd07      	ble.n	80028f0 <initialise_semihosting_exts+0x28>
 80028e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80028e4:	f003 0201 	and.w	r2, r3, #1
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	602a      	str	r2, [r5, #0]
 80028ee:	6023      	str	r3, [r4, #0]
 80028f0:	b003      	add	sp, #12
 80028f2:	bd30      	pop	{r4, r5, pc}
 80028f4:	2000007c 	.word	0x2000007c
 80028f8:	20000078 	.word	0x20000078

080028fc <_has_ext_stdout_stderr>:
 80028fc:	b510      	push	{r4, lr}
 80028fe:	4c04      	ldr	r4, [pc, #16]	@ (8002910 <_has_ext_stdout_stderr+0x14>)
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	da01      	bge.n	800290a <_has_ext_stdout_stderr+0xe>
 8002906:	f7ff ffdf 	bl	80028c8 <initialise_semihosting_exts>
 800290a:	6820      	ldr	r0, [r4, #0]
 800290c:	bd10      	pop	{r4, pc}
 800290e:	bf00      	nop
 8002910:	20000078 	.word	0x20000078

08002914 <initialise_monitor_handles>:
 8002914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002918:	2303      	movs	r3, #3
 800291a:	2400      	movs	r4, #0
 800291c:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 80029c0 <initialise_monitor_handles+0xac>
 8002920:	b085      	sub	sp, #20
 8002922:	f8cd 9004 	str.w	r9, [sp, #4]
 8002926:	af01      	add	r7, sp, #4
 8002928:	9303      	str	r3, [sp, #12]
 800292a:	2501      	movs	r5, #1
 800292c:	9402      	str	r4, [sp, #8]
 800292e:	4628      	mov	r0, r5
 8002930:	4639      	mov	r1, r7
 8002932:	beab      	bkpt	0x00ab
 8002934:	4605      	mov	r5, r0
 8002936:	f04f 32ff 	mov.w	r2, #4294967295
 800293a:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 80029c4 <initialise_monitor_handles+0xb0>
 800293e:	4623      	mov	r3, r4
 8002940:	4c21      	ldr	r4, [pc, #132]	@ (80029c8 <initialise_monitor_handles+0xb4>)
 8002942:	f8c8 5000 	str.w	r5, [r8]
 8002946:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800294a:	3301      	adds	r3, #1
 800294c:	2b14      	cmp	r3, #20
 800294e:	d1fa      	bne.n	8002946 <initialise_monitor_handles+0x32>
 8002950:	f7ff ffd4 	bl	80028fc <_has_ext_stdout_stderr>
 8002954:	4d1d      	ldr	r5, [pc, #116]	@ (80029cc <initialise_monitor_handles+0xb8>)
 8002956:	b1d0      	cbz	r0, 800298e <initialise_monitor_handles+0x7a>
 8002958:	f04f 0a03 	mov.w	sl, #3
 800295c:	2304      	movs	r3, #4
 800295e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002962:	2601      	movs	r6, #1
 8002964:	f8cd a00c 	str.w	sl, [sp, #12]
 8002968:	9302      	str	r3, [sp, #8]
 800296a:	4630      	mov	r0, r6
 800296c:	4639      	mov	r1, r7
 800296e:	beab      	bkpt	0x00ab
 8002970:	4683      	mov	fp, r0
 8002972:	4b17      	ldr	r3, [pc, #92]	@ (80029d0 <initialise_monitor_handles+0xbc>)
 8002974:	f8cd 9004 	str.w	r9, [sp, #4]
 8002978:	f8c3 b000 	str.w	fp, [r3]
 800297c:	2308      	movs	r3, #8
 800297e:	f8cd a00c 	str.w	sl, [sp, #12]
 8002982:	9302      	str	r3, [sp, #8]
 8002984:	4630      	mov	r0, r6
 8002986:	4639      	mov	r1, r7
 8002988:	beab      	bkpt	0x00ab
 800298a:	4606      	mov	r6, r0
 800298c:	602e      	str	r6, [r5, #0]
 800298e:	2600      	movs	r6, #0
 8002990:	682b      	ldr	r3, [r5, #0]
 8002992:	6066      	str	r6, [r4, #4]
 8002994:	3301      	adds	r3, #1
 8002996:	bf02      	ittt	eq
 8002998:	4b0d      	ldreq	r3, [pc, #52]	@ (80029d0 <initialise_monitor_handles+0xbc>)
 800299a:	681b      	ldreq	r3, [r3, #0]
 800299c:	602b      	streq	r3, [r5, #0]
 800299e:	f8d8 3000 	ldr.w	r3, [r8]
 80029a2:	6023      	str	r3, [r4, #0]
 80029a4:	f7ff ffaa 	bl	80028fc <_has_ext_stdout_stderr>
 80029a8:	b130      	cbz	r0, 80029b8 <initialise_monitor_handles+0xa4>
 80029aa:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <initialise_monitor_handles+0xbc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80029b2:	682b      	ldr	r3, [r5, #0]
 80029b4:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80029b8:	b005      	add	sp, #20
 80029ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029be:	bf00      	nop
 80029c0:	080041c6 	.word	0x080041c6
 80029c4:	200001c8 	.word	0x200001c8
 80029c8:	200001cc 	.word	0x200001cc
 80029cc:	200001c0 	.word	0x200001c0
 80029d0:	200001c4 	.word	0x200001c4

080029d4 <_isatty>:
 80029d4:	b570      	push	{r4, r5, r6, lr}
 80029d6:	f7ff fd85 	bl	80024e4 <findslot>
 80029da:	2409      	movs	r4, #9
 80029dc:	4605      	mov	r5, r0
 80029de:	b920      	cbnz	r0, 80029ea <_isatty+0x16>
 80029e0:	f000 fa6c 	bl	8002ebc <__errno>
 80029e4:	6004      	str	r4, [r0, #0]
 80029e6:	2000      	movs	r0, #0
 80029e8:	bd70      	pop	{r4, r5, r6, pc}
 80029ea:	4620      	mov	r0, r4
 80029ec:	4629      	mov	r1, r5
 80029ee:	beab      	bkpt	0x00ab
 80029f0:	4604      	mov	r4, r0
 80029f2:	2c01      	cmp	r4, #1
 80029f4:	4620      	mov	r0, r4
 80029f6:	d0f7      	beq.n	80029e8 <_isatty+0x14>
 80029f8:	f000 fa60 	bl	8002ebc <__errno>
 80029fc:	2513      	movs	r5, #19
 80029fe:	4604      	mov	r4, r0
 8002a00:	2600      	movs	r6, #0
 8002a02:	4628      	mov	r0, r5
 8002a04:	4631      	mov	r1, r6
 8002a06:	beab      	bkpt	0x00ab
 8002a08:	4605      	mov	r5, r0
 8002a0a:	6025      	str	r5, [r4, #0]
 8002a0c:	e7eb      	b.n	80029e6 <_isatty+0x12>
	...

08002a10 <__sflush_r>:
 8002a10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a16:	0716      	lsls	r6, r2, #28
 8002a18:	4605      	mov	r5, r0
 8002a1a:	460c      	mov	r4, r1
 8002a1c:	d454      	bmi.n	8002ac8 <__sflush_r+0xb8>
 8002a1e:	684b      	ldr	r3, [r1, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	dc02      	bgt.n	8002a2a <__sflush_r+0x1a>
 8002a24:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	dd48      	ble.n	8002abc <__sflush_r+0xac>
 8002a2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a2c:	2e00      	cmp	r6, #0
 8002a2e:	d045      	beq.n	8002abc <__sflush_r+0xac>
 8002a30:	2300      	movs	r3, #0
 8002a32:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002a36:	682f      	ldr	r7, [r5, #0]
 8002a38:	6a21      	ldr	r1, [r4, #32]
 8002a3a:	602b      	str	r3, [r5, #0]
 8002a3c:	d030      	beq.n	8002aa0 <__sflush_r+0x90>
 8002a3e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002a40:	89a3      	ldrh	r3, [r4, #12]
 8002a42:	0759      	lsls	r1, r3, #29
 8002a44:	d505      	bpl.n	8002a52 <__sflush_r+0x42>
 8002a46:	6863      	ldr	r3, [r4, #4]
 8002a48:	1ad2      	subs	r2, r2, r3
 8002a4a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002a4c:	b10b      	cbz	r3, 8002a52 <__sflush_r+0x42>
 8002a4e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a50:	1ad2      	subs	r2, r2, r3
 8002a52:	2300      	movs	r3, #0
 8002a54:	4628      	mov	r0, r5
 8002a56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a58:	6a21      	ldr	r1, [r4, #32]
 8002a5a:	47b0      	blx	r6
 8002a5c:	1c43      	adds	r3, r0, #1
 8002a5e:	89a3      	ldrh	r3, [r4, #12]
 8002a60:	d106      	bne.n	8002a70 <__sflush_r+0x60>
 8002a62:	6829      	ldr	r1, [r5, #0]
 8002a64:	291d      	cmp	r1, #29
 8002a66:	d82b      	bhi.n	8002ac0 <__sflush_r+0xb0>
 8002a68:	4a28      	ldr	r2, [pc, #160]	@ (8002b0c <__sflush_r+0xfc>)
 8002a6a:	410a      	asrs	r2, r1
 8002a6c:	07d6      	lsls	r6, r2, #31
 8002a6e:	d427      	bmi.n	8002ac0 <__sflush_r+0xb0>
 8002a70:	2200      	movs	r2, #0
 8002a72:	6062      	str	r2, [r4, #4]
 8002a74:	6922      	ldr	r2, [r4, #16]
 8002a76:	04d9      	lsls	r1, r3, #19
 8002a78:	6022      	str	r2, [r4, #0]
 8002a7a:	d504      	bpl.n	8002a86 <__sflush_r+0x76>
 8002a7c:	1c42      	adds	r2, r0, #1
 8002a7e:	d101      	bne.n	8002a84 <__sflush_r+0x74>
 8002a80:	682b      	ldr	r3, [r5, #0]
 8002a82:	b903      	cbnz	r3, 8002a86 <__sflush_r+0x76>
 8002a84:	6560      	str	r0, [r4, #84]	@ 0x54
 8002a86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002a88:	602f      	str	r7, [r5, #0]
 8002a8a:	b1b9      	cbz	r1, 8002abc <__sflush_r+0xac>
 8002a8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002a90:	4299      	cmp	r1, r3
 8002a92:	d002      	beq.n	8002a9a <__sflush_r+0x8a>
 8002a94:	4628      	mov	r0, r5
 8002a96:	f000 fa3f 	bl	8002f18 <_free_r>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8002a9e:	e00d      	b.n	8002abc <__sflush_r+0xac>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	47b0      	blx	r6
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	1c50      	adds	r0, r2, #1
 8002aaa:	d1c9      	bne.n	8002a40 <__sflush_r+0x30>
 8002aac:	682b      	ldr	r3, [r5, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0c6      	beq.n	8002a40 <__sflush_r+0x30>
 8002ab2:	2b1d      	cmp	r3, #29
 8002ab4:	d001      	beq.n	8002aba <__sflush_r+0xaa>
 8002ab6:	2b16      	cmp	r3, #22
 8002ab8:	d11d      	bne.n	8002af6 <__sflush_r+0xe6>
 8002aba:	602f      	str	r7, [r5, #0]
 8002abc:	2000      	movs	r0, #0
 8002abe:	e021      	b.n	8002b04 <__sflush_r+0xf4>
 8002ac0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ac4:	b21b      	sxth	r3, r3
 8002ac6:	e01a      	b.n	8002afe <__sflush_r+0xee>
 8002ac8:	690f      	ldr	r7, [r1, #16]
 8002aca:	2f00      	cmp	r7, #0
 8002acc:	d0f6      	beq.n	8002abc <__sflush_r+0xac>
 8002ace:	0793      	lsls	r3, r2, #30
 8002ad0:	bf18      	it	ne
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	680e      	ldr	r6, [r1, #0]
 8002ad6:	bf08      	it	eq
 8002ad8:	694b      	ldreq	r3, [r1, #20]
 8002ada:	1bf6      	subs	r6, r6, r7
 8002adc:	600f      	str	r7, [r1, #0]
 8002ade:	608b      	str	r3, [r1, #8]
 8002ae0:	2e00      	cmp	r6, #0
 8002ae2:	ddeb      	ble.n	8002abc <__sflush_r+0xac>
 8002ae4:	4633      	mov	r3, r6
 8002ae6:	463a      	mov	r2, r7
 8002ae8:	4628      	mov	r0, r5
 8002aea:	6a21      	ldr	r1, [r4, #32]
 8002aec:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002af0:	47e0      	blx	ip
 8002af2:	2800      	cmp	r0, #0
 8002af4:	dc07      	bgt.n	8002b06 <__sflush_r+0xf6>
 8002af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002afe:	f04f 30ff 	mov.w	r0, #4294967295
 8002b02:	81a3      	strh	r3, [r4, #12]
 8002b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b06:	4407      	add	r7, r0
 8002b08:	1a36      	subs	r6, r6, r0
 8002b0a:	e7e9      	b.n	8002ae0 <__sflush_r+0xd0>
 8002b0c:	dfbffffe 	.word	0xdfbffffe

08002b10 <_fflush_r>:
 8002b10:	b538      	push	{r3, r4, r5, lr}
 8002b12:	690b      	ldr	r3, [r1, #16]
 8002b14:	4605      	mov	r5, r0
 8002b16:	460c      	mov	r4, r1
 8002b18:	b913      	cbnz	r3, 8002b20 <_fflush_r+0x10>
 8002b1a:	2500      	movs	r5, #0
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	bd38      	pop	{r3, r4, r5, pc}
 8002b20:	b118      	cbz	r0, 8002b2a <_fflush_r+0x1a>
 8002b22:	6a03      	ldr	r3, [r0, #32]
 8002b24:	b90b      	cbnz	r3, 8002b2a <_fflush_r+0x1a>
 8002b26:	f000 f8bb 	bl	8002ca0 <__sinit>
 8002b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f3      	beq.n	8002b1a <_fflush_r+0xa>
 8002b32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002b34:	07d0      	lsls	r0, r2, #31
 8002b36:	d404      	bmi.n	8002b42 <_fflush_r+0x32>
 8002b38:	0599      	lsls	r1, r3, #22
 8002b3a:	d402      	bmi.n	8002b42 <_fflush_r+0x32>
 8002b3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b3e:	f000 f9e8 	bl	8002f12 <__retarget_lock_acquire_recursive>
 8002b42:	4628      	mov	r0, r5
 8002b44:	4621      	mov	r1, r4
 8002b46:	f7ff ff63 	bl	8002a10 <__sflush_r>
 8002b4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b4c:	4605      	mov	r5, r0
 8002b4e:	07da      	lsls	r2, r3, #31
 8002b50:	d4e4      	bmi.n	8002b1c <_fflush_r+0xc>
 8002b52:	89a3      	ldrh	r3, [r4, #12]
 8002b54:	059b      	lsls	r3, r3, #22
 8002b56:	d4e1      	bmi.n	8002b1c <_fflush_r+0xc>
 8002b58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b5a:	f000 f9db 	bl	8002f14 <__retarget_lock_release_recursive>
 8002b5e:	e7dd      	b.n	8002b1c <_fflush_r+0xc>

08002b60 <fflush>:
 8002b60:	4601      	mov	r1, r0
 8002b62:	b920      	cbnz	r0, 8002b6e <fflush+0xe>
 8002b64:	4a04      	ldr	r2, [pc, #16]	@ (8002b78 <fflush+0x18>)
 8002b66:	4905      	ldr	r1, [pc, #20]	@ (8002b7c <fflush+0x1c>)
 8002b68:	4805      	ldr	r0, [pc, #20]	@ (8002b80 <fflush+0x20>)
 8002b6a:	f000 b8b1 	b.w	8002cd0 <_fwalk_sglue>
 8002b6e:	4b05      	ldr	r3, [pc, #20]	@ (8002b84 <fflush+0x24>)
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	f7ff bfcd 	b.w	8002b10 <_fflush_r>
 8002b76:	bf00      	nop
 8002b78:	20000080 	.word	0x20000080
 8002b7c:	08002b11 	.word	0x08002b11
 8002b80:	20000090 	.word	0x20000090
 8002b84:	2000008c 	.word	0x2000008c

08002b88 <std>:
 8002b88:	2300      	movs	r3, #0
 8002b8a:	b510      	push	{r4, lr}
 8002b8c:	4604      	mov	r4, r0
 8002b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8002b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b96:	6083      	str	r3, [r0, #8]
 8002b98:	8181      	strh	r1, [r0, #12]
 8002b9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b9c:	81c2      	strh	r2, [r0, #14]
 8002b9e:	6183      	str	r3, [r0, #24]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	2208      	movs	r2, #8
 8002ba4:	305c      	adds	r0, #92	@ 0x5c
 8002ba6:	f000 f93a 	bl	8002e1e <memset>
 8002baa:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <std+0x58>)
 8002bac:	6224      	str	r4, [r4, #32]
 8002bae:	6263      	str	r3, [r4, #36]	@ 0x24
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002be4 <std+0x5c>)
 8002bb2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002be8 <std+0x60>)
 8002bb6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bec <std+0x64>)
 8002bba:	6323      	str	r3, [r4, #48]	@ 0x30
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <std+0x68>)
 8002bbe:	429c      	cmp	r4, r3
 8002bc0:	d006      	beq.n	8002bd0 <std+0x48>
 8002bc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002bc6:	4294      	cmp	r4, r2
 8002bc8:	d002      	beq.n	8002bd0 <std+0x48>
 8002bca:	33d0      	adds	r3, #208	@ 0xd0
 8002bcc:	429c      	cmp	r4, r3
 8002bce:	d105      	bne.n	8002bdc <std+0x54>
 8002bd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bd8:	f000 b99a 	b.w	8002f10 <__retarget_lock_init_recursive>
 8002bdc:	bd10      	pop	{r4, pc}
 8002bde:	bf00      	nop
 8002be0:	08002d99 	.word	0x08002d99
 8002be4:	08002dbb 	.word	0x08002dbb
 8002be8:	08002df3 	.word	0x08002df3
 8002bec:	08002e17 	.word	0x08002e17
 8002bf0:	2000026c 	.word	0x2000026c

08002bf4 <stdio_exit_handler>:
 8002bf4:	4a02      	ldr	r2, [pc, #8]	@ (8002c00 <stdio_exit_handler+0xc>)
 8002bf6:	4903      	ldr	r1, [pc, #12]	@ (8002c04 <stdio_exit_handler+0x10>)
 8002bf8:	4803      	ldr	r0, [pc, #12]	@ (8002c08 <stdio_exit_handler+0x14>)
 8002bfa:	f000 b869 	b.w	8002cd0 <_fwalk_sglue>
 8002bfe:	bf00      	nop
 8002c00:	20000080 	.word	0x20000080
 8002c04:	08002b11 	.word	0x08002b11
 8002c08:	20000090 	.word	0x20000090

08002c0c <cleanup_stdio>:
 8002c0c:	6841      	ldr	r1, [r0, #4]
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <cleanup_stdio+0x34>)
 8002c10:	b510      	push	{r4, lr}
 8002c12:	4299      	cmp	r1, r3
 8002c14:	4604      	mov	r4, r0
 8002c16:	d001      	beq.n	8002c1c <cleanup_stdio+0x10>
 8002c18:	f7ff ff7a 	bl	8002b10 <_fflush_r>
 8002c1c:	68a1      	ldr	r1, [r4, #8]
 8002c1e:	4b09      	ldr	r3, [pc, #36]	@ (8002c44 <cleanup_stdio+0x38>)
 8002c20:	4299      	cmp	r1, r3
 8002c22:	d002      	beq.n	8002c2a <cleanup_stdio+0x1e>
 8002c24:	4620      	mov	r0, r4
 8002c26:	f7ff ff73 	bl	8002b10 <_fflush_r>
 8002c2a:	68e1      	ldr	r1, [r4, #12]
 8002c2c:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <cleanup_stdio+0x3c>)
 8002c2e:	4299      	cmp	r1, r3
 8002c30:	d004      	beq.n	8002c3c <cleanup_stdio+0x30>
 8002c32:	4620      	mov	r0, r4
 8002c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c38:	f7ff bf6a 	b.w	8002b10 <_fflush_r>
 8002c3c:	bd10      	pop	{r4, pc}
 8002c3e:	bf00      	nop
 8002c40:	2000026c 	.word	0x2000026c
 8002c44:	200002d4 	.word	0x200002d4
 8002c48:	2000033c 	.word	0x2000033c

08002c4c <global_stdio_init.part.0>:
 8002c4c:	b510      	push	{r4, lr}
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c7c <global_stdio_init.part.0+0x30>)
 8002c50:	4c0b      	ldr	r4, [pc, #44]	@ (8002c80 <global_stdio_init.part.0+0x34>)
 8002c52:	4a0c      	ldr	r2, [pc, #48]	@ (8002c84 <global_stdio_init.part.0+0x38>)
 8002c54:	4620      	mov	r0, r4
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	2104      	movs	r1, #4
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f7ff ff94 	bl	8002b88 <std>
 8002c60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002c64:	2201      	movs	r2, #1
 8002c66:	2109      	movs	r1, #9
 8002c68:	f7ff ff8e 	bl	8002b88 <std>
 8002c6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c70:	2202      	movs	r2, #2
 8002c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c76:	2112      	movs	r1, #18
 8002c78:	f7ff bf86 	b.w	8002b88 <std>
 8002c7c:	200003a4 	.word	0x200003a4
 8002c80:	2000026c 	.word	0x2000026c
 8002c84:	08002bf5 	.word	0x08002bf5

08002c88 <__sfp_lock_acquire>:
 8002c88:	4801      	ldr	r0, [pc, #4]	@ (8002c90 <__sfp_lock_acquire+0x8>)
 8002c8a:	f000 b942 	b.w	8002f12 <__retarget_lock_acquire_recursive>
 8002c8e:	bf00      	nop
 8002c90:	200003ad 	.word	0x200003ad

08002c94 <__sfp_lock_release>:
 8002c94:	4801      	ldr	r0, [pc, #4]	@ (8002c9c <__sfp_lock_release+0x8>)
 8002c96:	f000 b93d 	b.w	8002f14 <__retarget_lock_release_recursive>
 8002c9a:	bf00      	nop
 8002c9c:	200003ad 	.word	0x200003ad

08002ca0 <__sinit>:
 8002ca0:	b510      	push	{r4, lr}
 8002ca2:	4604      	mov	r4, r0
 8002ca4:	f7ff fff0 	bl	8002c88 <__sfp_lock_acquire>
 8002ca8:	6a23      	ldr	r3, [r4, #32]
 8002caa:	b11b      	cbz	r3, 8002cb4 <__sinit+0x14>
 8002cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cb0:	f7ff bff0 	b.w	8002c94 <__sfp_lock_release>
 8002cb4:	4b04      	ldr	r3, [pc, #16]	@ (8002cc8 <__sinit+0x28>)
 8002cb6:	6223      	str	r3, [r4, #32]
 8002cb8:	4b04      	ldr	r3, [pc, #16]	@ (8002ccc <__sinit+0x2c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f5      	bne.n	8002cac <__sinit+0xc>
 8002cc0:	f7ff ffc4 	bl	8002c4c <global_stdio_init.part.0>
 8002cc4:	e7f2      	b.n	8002cac <__sinit+0xc>
 8002cc6:	bf00      	nop
 8002cc8:	08002c0d 	.word	0x08002c0d
 8002ccc:	200003a4 	.word	0x200003a4

08002cd0 <_fwalk_sglue>:
 8002cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cd4:	4607      	mov	r7, r0
 8002cd6:	4688      	mov	r8, r1
 8002cd8:	4614      	mov	r4, r2
 8002cda:	2600      	movs	r6, #0
 8002cdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ce0:	f1b9 0901 	subs.w	r9, r9, #1
 8002ce4:	d505      	bpl.n	8002cf2 <_fwalk_sglue+0x22>
 8002ce6:	6824      	ldr	r4, [r4, #0]
 8002ce8:	2c00      	cmp	r4, #0
 8002cea:	d1f7      	bne.n	8002cdc <_fwalk_sglue+0xc>
 8002cec:	4630      	mov	r0, r6
 8002cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cf2:	89ab      	ldrh	r3, [r5, #12]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d907      	bls.n	8002d08 <_fwalk_sglue+0x38>
 8002cf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	d003      	beq.n	8002d08 <_fwalk_sglue+0x38>
 8002d00:	4629      	mov	r1, r5
 8002d02:	4638      	mov	r0, r7
 8002d04:	47c0      	blx	r8
 8002d06:	4306      	orrs	r6, r0
 8002d08:	3568      	adds	r5, #104	@ 0x68
 8002d0a:	e7e9      	b.n	8002ce0 <_fwalk_sglue+0x10>

08002d0c <iprintf>:
 8002d0c:	b40f      	push	{r0, r1, r2, r3}
 8002d0e:	b507      	push	{r0, r1, r2, lr}
 8002d10:	4906      	ldr	r1, [pc, #24]	@ (8002d2c <iprintf+0x20>)
 8002d12:	ab04      	add	r3, sp, #16
 8002d14:	6808      	ldr	r0, [r1, #0]
 8002d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d1a:	6881      	ldr	r1, [r0, #8]
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	f000 fb71 	bl	8003404 <_vfiprintf_r>
 8002d22:	b003      	add	sp, #12
 8002d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d28:	b004      	add	sp, #16
 8002d2a:	4770      	bx	lr
 8002d2c:	2000008c 	.word	0x2000008c

08002d30 <sniprintf>:
 8002d30:	b40c      	push	{r2, r3}
 8002d32:	b530      	push	{r4, r5, lr}
 8002d34:	4b17      	ldr	r3, [pc, #92]	@ (8002d94 <sniprintf+0x64>)
 8002d36:	1e0c      	subs	r4, r1, #0
 8002d38:	681d      	ldr	r5, [r3, #0]
 8002d3a:	b09d      	sub	sp, #116	@ 0x74
 8002d3c:	da08      	bge.n	8002d50 <sniprintf+0x20>
 8002d3e:	238b      	movs	r3, #139	@ 0x8b
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	602b      	str	r3, [r5, #0]
 8002d46:	b01d      	add	sp, #116	@ 0x74
 8002d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d4c:	b002      	add	sp, #8
 8002d4e:	4770      	bx	lr
 8002d50:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002d54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002d58:	bf0c      	ite	eq
 8002d5a:	4623      	moveq	r3, r4
 8002d5c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002d60:	9304      	str	r3, [sp, #16]
 8002d62:	9307      	str	r3, [sp, #28]
 8002d64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d68:	9002      	str	r0, [sp, #8]
 8002d6a:	9006      	str	r0, [sp, #24]
 8002d6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002d70:	4628      	mov	r0, r5
 8002d72:	ab21      	add	r3, sp, #132	@ 0x84
 8002d74:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002d76:	a902      	add	r1, sp, #8
 8002d78:	9301      	str	r3, [sp, #4]
 8002d7a:	f000 fa1f 	bl	80031bc <_svfiprintf_r>
 8002d7e:	1c43      	adds	r3, r0, #1
 8002d80:	bfbc      	itt	lt
 8002d82:	238b      	movlt	r3, #139	@ 0x8b
 8002d84:	602b      	strlt	r3, [r5, #0]
 8002d86:	2c00      	cmp	r4, #0
 8002d88:	d0dd      	beq.n	8002d46 <sniprintf+0x16>
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	9b02      	ldr	r3, [sp, #8]
 8002d8e:	701a      	strb	r2, [r3, #0]
 8002d90:	e7d9      	b.n	8002d46 <sniprintf+0x16>
 8002d92:	bf00      	nop
 8002d94:	2000008c 	.word	0x2000008c

08002d98 <__sread>:
 8002d98:	b510      	push	{r4, lr}
 8002d9a:	460c      	mov	r4, r1
 8002d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002da0:	f000 f868 	bl	8002e74 <_read_r>
 8002da4:	2800      	cmp	r0, #0
 8002da6:	bfab      	itete	ge
 8002da8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002daa:	89a3      	ldrhlt	r3, [r4, #12]
 8002dac:	181b      	addge	r3, r3, r0
 8002dae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002db2:	bfac      	ite	ge
 8002db4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002db6:	81a3      	strhlt	r3, [r4, #12]
 8002db8:	bd10      	pop	{r4, pc}

08002dba <__swrite>:
 8002dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dbe:	461f      	mov	r7, r3
 8002dc0:	898b      	ldrh	r3, [r1, #12]
 8002dc2:	4605      	mov	r5, r0
 8002dc4:	05db      	lsls	r3, r3, #23
 8002dc6:	460c      	mov	r4, r1
 8002dc8:	4616      	mov	r6, r2
 8002dca:	d505      	bpl.n	8002dd8 <__swrite+0x1e>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dd4:	f000 f83c 	bl	8002e50 <_lseek_r>
 8002dd8:	89a3      	ldrh	r3, [r4, #12]
 8002dda:	4632      	mov	r2, r6
 8002ddc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002de0:	81a3      	strh	r3, [r4, #12]
 8002de2:	4628      	mov	r0, r5
 8002de4:	463b      	mov	r3, r7
 8002de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dee:	f000 b853 	b.w	8002e98 <_write_r>

08002df2 <__sseek>:
 8002df2:	b510      	push	{r4, lr}
 8002df4:	460c      	mov	r4, r1
 8002df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dfa:	f000 f829 	bl	8002e50 <_lseek_r>
 8002dfe:	1c43      	adds	r3, r0, #1
 8002e00:	89a3      	ldrh	r3, [r4, #12]
 8002e02:	bf15      	itete	ne
 8002e04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002e06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002e0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002e0e:	81a3      	strheq	r3, [r4, #12]
 8002e10:	bf18      	it	ne
 8002e12:	81a3      	strhne	r3, [r4, #12]
 8002e14:	bd10      	pop	{r4, pc}

08002e16 <__sclose>:
 8002e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e1a:	f000 b809 	b.w	8002e30 <_close_r>

08002e1e <memset>:
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4402      	add	r2, r0
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d100      	bne.n	8002e28 <memset+0xa>
 8002e26:	4770      	bx	lr
 8002e28:	f803 1b01 	strb.w	r1, [r3], #1
 8002e2c:	e7f9      	b.n	8002e22 <memset+0x4>
	...

08002e30 <_close_r>:
 8002e30:	b538      	push	{r3, r4, r5, lr}
 8002e32:	2300      	movs	r3, #0
 8002e34:	4d05      	ldr	r5, [pc, #20]	@ (8002e4c <_close_r+0x1c>)
 8002e36:	4604      	mov	r4, r0
 8002e38:	4608      	mov	r0, r1
 8002e3a:	602b      	str	r3, [r5, #0]
 8002e3c:	f7ff fc24 	bl	8002688 <_close>
 8002e40:	1c43      	adds	r3, r0, #1
 8002e42:	d102      	bne.n	8002e4a <_close_r+0x1a>
 8002e44:	682b      	ldr	r3, [r5, #0]
 8002e46:	b103      	cbz	r3, 8002e4a <_close_r+0x1a>
 8002e48:	6023      	str	r3, [r4, #0]
 8002e4a:	bd38      	pop	{r3, r4, r5, pc}
 8002e4c:	200003a8 	.word	0x200003a8

08002e50 <_lseek_r>:
 8002e50:	b538      	push	{r3, r4, r5, lr}
 8002e52:	4604      	mov	r4, r0
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	2200      	movs	r2, #0
 8002e5a:	4d05      	ldr	r5, [pc, #20]	@ (8002e70 <_lseek_r+0x20>)
 8002e5c:	602a      	str	r2, [r5, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f7ff fbd3 	bl	800260a <_lseek>
 8002e64:	1c43      	adds	r3, r0, #1
 8002e66:	d102      	bne.n	8002e6e <_lseek_r+0x1e>
 8002e68:	682b      	ldr	r3, [r5, #0]
 8002e6a:	b103      	cbz	r3, 8002e6e <_lseek_r+0x1e>
 8002e6c:	6023      	str	r3, [r4, #0]
 8002e6e:	bd38      	pop	{r3, r4, r5, pc}
 8002e70:	200003a8 	.word	0x200003a8

08002e74 <_read_r>:
 8002e74:	b538      	push	{r3, r4, r5, lr}
 8002e76:	4604      	mov	r4, r0
 8002e78:	4608      	mov	r0, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	4d05      	ldr	r5, [pc, #20]	@ (8002e94 <_read_r+0x20>)
 8002e80:	602a      	str	r2, [r5, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	f7ff fb6b 	bl	800255e <_read>
 8002e88:	1c43      	adds	r3, r0, #1
 8002e8a:	d102      	bne.n	8002e92 <_read_r+0x1e>
 8002e8c:	682b      	ldr	r3, [r5, #0]
 8002e8e:	b103      	cbz	r3, 8002e92 <_read_r+0x1e>
 8002e90:	6023      	str	r3, [r4, #0]
 8002e92:	bd38      	pop	{r3, r4, r5, pc}
 8002e94:	200003a8 	.word	0x200003a8

08002e98 <_write_r>:
 8002e98:	b538      	push	{r3, r4, r5, lr}
 8002e9a:	4604      	mov	r4, r0
 8002e9c:	4608      	mov	r0, r1
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	4d05      	ldr	r5, [pc, #20]	@ (8002eb8 <_write_r+0x20>)
 8002ea4:	602a      	str	r2, [r5, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f7ff fbc1 	bl	800262e <_write>
 8002eac:	1c43      	adds	r3, r0, #1
 8002eae:	d102      	bne.n	8002eb6 <_write_r+0x1e>
 8002eb0:	682b      	ldr	r3, [r5, #0]
 8002eb2:	b103      	cbz	r3, 8002eb6 <_write_r+0x1e>
 8002eb4:	6023      	str	r3, [r4, #0]
 8002eb6:	bd38      	pop	{r3, r4, r5, pc}
 8002eb8:	200003a8 	.word	0x200003a8

08002ebc <__errno>:
 8002ebc:	4b01      	ldr	r3, [pc, #4]	@ (8002ec4 <__errno+0x8>)
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	2000008c 	.word	0x2000008c

08002ec8 <__libc_init_array>:
 8002ec8:	b570      	push	{r4, r5, r6, lr}
 8002eca:	2600      	movs	r6, #0
 8002ecc:	4d0c      	ldr	r5, [pc, #48]	@ (8002f00 <__libc_init_array+0x38>)
 8002ece:	4c0d      	ldr	r4, [pc, #52]	@ (8002f04 <__libc_init_array+0x3c>)
 8002ed0:	1b64      	subs	r4, r4, r5
 8002ed2:	10a4      	asrs	r4, r4, #2
 8002ed4:	42a6      	cmp	r6, r4
 8002ed6:	d109      	bne.n	8002eec <__libc_init_array+0x24>
 8002ed8:	f000 fed2 	bl	8003c80 <_init>
 8002edc:	2600      	movs	r6, #0
 8002ede:	4d0a      	ldr	r5, [pc, #40]	@ (8002f08 <__libc_init_array+0x40>)
 8002ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8002f0c <__libc_init_array+0x44>)
 8002ee2:	1b64      	subs	r4, r4, r5
 8002ee4:	10a4      	asrs	r4, r4, #2
 8002ee6:	42a6      	cmp	r6, r4
 8002ee8:	d105      	bne.n	8002ef6 <__libc_init_array+0x2e>
 8002eea:	bd70      	pop	{r4, r5, r6, pc}
 8002eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef0:	4798      	blx	r3
 8002ef2:	3601      	adds	r6, #1
 8002ef4:	e7ee      	b.n	8002ed4 <__libc_init_array+0xc>
 8002ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002efa:	4798      	blx	r3
 8002efc:	3601      	adds	r6, #1
 8002efe:	e7f2      	b.n	8002ee6 <__libc_init_array+0x1e>
 8002f00:	08004208 	.word	0x08004208
 8002f04:	08004208 	.word	0x08004208
 8002f08:	08004208 	.word	0x08004208
 8002f0c:	0800420c 	.word	0x0800420c

08002f10 <__retarget_lock_init_recursive>:
 8002f10:	4770      	bx	lr

08002f12 <__retarget_lock_acquire_recursive>:
 8002f12:	4770      	bx	lr

08002f14 <__retarget_lock_release_recursive>:
 8002f14:	4770      	bx	lr
	...

08002f18 <_free_r>:
 8002f18:	b538      	push	{r3, r4, r5, lr}
 8002f1a:	4605      	mov	r5, r0
 8002f1c:	2900      	cmp	r1, #0
 8002f1e:	d040      	beq.n	8002fa2 <_free_r+0x8a>
 8002f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f24:	1f0c      	subs	r4, r1, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bfb8      	it	lt
 8002f2a:	18e4      	addlt	r4, r4, r3
 8002f2c:	f000 f8de 	bl	80030ec <__malloc_lock>
 8002f30:	4a1c      	ldr	r2, [pc, #112]	@ (8002fa4 <_free_r+0x8c>)
 8002f32:	6813      	ldr	r3, [r2, #0]
 8002f34:	b933      	cbnz	r3, 8002f44 <_free_r+0x2c>
 8002f36:	6063      	str	r3, [r4, #4]
 8002f38:	6014      	str	r4, [r2, #0]
 8002f3a:	4628      	mov	r0, r5
 8002f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f40:	f000 b8da 	b.w	80030f8 <__malloc_unlock>
 8002f44:	42a3      	cmp	r3, r4
 8002f46:	d908      	bls.n	8002f5a <_free_r+0x42>
 8002f48:	6820      	ldr	r0, [r4, #0]
 8002f4a:	1821      	adds	r1, r4, r0
 8002f4c:	428b      	cmp	r3, r1
 8002f4e:	bf01      	itttt	eq
 8002f50:	6819      	ldreq	r1, [r3, #0]
 8002f52:	685b      	ldreq	r3, [r3, #4]
 8002f54:	1809      	addeq	r1, r1, r0
 8002f56:	6021      	streq	r1, [r4, #0]
 8002f58:	e7ed      	b.n	8002f36 <_free_r+0x1e>
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	b10b      	cbz	r3, 8002f64 <_free_r+0x4c>
 8002f60:	42a3      	cmp	r3, r4
 8002f62:	d9fa      	bls.n	8002f5a <_free_r+0x42>
 8002f64:	6811      	ldr	r1, [r2, #0]
 8002f66:	1850      	adds	r0, r2, r1
 8002f68:	42a0      	cmp	r0, r4
 8002f6a:	d10b      	bne.n	8002f84 <_free_r+0x6c>
 8002f6c:	6820      	ldr	r0, [r4, #0]
 8002f6e:	4401      	add	r1, r0
 8002f70:	1850      	adds	r0, r2, r1
 8002f72:	4283      	cmp	r3, r0
 8002f74:	6011      	str	r1, [r2, #0]
 8002f76:	d1e0      	bne.n	8002f3a <_free_r+0x22>
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4408      	add	r0, r1
 8002f7e:	6010      	str	r0, [r2, #0]
 8002f80:	6053      	str	r3, [r2, #4]
 8002f82:	e7da      	b.n	8002f3a <_free_r+0x22>
 8002f84:	d902      	bls.n	8002f8c <_free_r+0x74>
 8002f86:	230c      	movs	r3, #12
 8002f88:	602b      	str	r3, [r5, #0]
 8002f8a:	e7d6      	b.n	8002f3a <_free_r+0x22>
 8002f8c:	6820      	ldr	r0, [r4, #0]
 8002f8e:	1821      	adds	r1, r4, r0
 8002f90:	428b      	cmp	r3, r1
 8002f92:	bf01      	itttt	eq
 8002f94:	6819      	ldreq	r1, [r3, #0]
 8002f96:	685b      	ldreq	r3, [r3, #4]
 8002f98:	1809      	addeq	r1, r1, r0
 8002f9a:	6021      	streq	r1, [r4, #0]
 8002f9c:	6063      	str	r3, [r4, #4]
 8002f9e:	6054      	str	r4, [r2, #4]
 8002fa0:	e7cb      	b.n	8002f3a <_free_r+0x22>
 8002fa2:	bd38      	pop	{r3, r4, r5, pc}
 8002fa4:	200003b4 	.word	0x200003b4

08002fa8 <sbrk_aligned>:
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	4e0f      	ldr	r6, [pc, #60]	@ (8002fe8 <sbrk_aligned+0x40>)
 8002fac:	460c      	mov	r4, r1
 8002fae:	6831      	ldr	r1, [r6, #0]
 8002fb0:	4605      	mov	r5, r0
 8002fb2:	b911      	cbnz	r1, 8002fba <sbrk_aligned+0x12>
 8002fb4:	f000 fd7e 	bl	8003ab4 <_sbrk_r>
 8002fb8:	6030      	str	r0, [r6, #0]
 8002fba:	4621      	mov	r1, r4
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	f000 fd79 	bl	8003ab4 <_sbrk_r>
 8002fc2:	1c43      	adds	r3, r0, #1
 8002fc4:	d103      	bne.n	8002fce <sbrk_aligned+0x26>
 8002fc6:	f04f 34ff 	mov.w	r4, #4294967295
 8002fca:	4620      	mov	r0, r4
 8002fcc:	bd70      	pop	{r4, r5, r6, pc}
 8002fce:	1cc4      	adds	r4, r0, #3
 8002fd0:	f024 0403 	bic.w	r4, r4, #3
 8002fd4:	42a0      	cmp	r0, r4
 8002fd6:	d0f8      	beq.n	8002fca <sbrk_aligned+0x22>
 8002fd8:	1a21      	subs	r1, r4, r0
 8002fda:	4628      	mov	r0, r5
 8002fdc:	f000 fd6a 	bl	8003ab4 <_sbrk_r>
 8002fe0:	3001      	adds	r0, #1
 8002fe2:	d1f2      	bne.n	8002fca <sbrk_aligned+0x22>
 8002fe4:	e7ef      	b.n	8002fc6 <sbrk_aligned+0x1e>
 8002fe6:	bf00      	nop
 8002fe8:	200003b0 	.word	0x200003b0

08002fec <_malloc_r>:
 8002fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ff0:	1ccd      	adds	r5, r1, #3
 8002ff2:	f025 0503 	bic.w	r5, r5, #3
 8002ff6:	3508      	adds	r5, #8
 8002ff8:	2d0c      	cmp	r5, #12
 8002ffa:	bf38      	it	cc
 8002ffc:	250c      	movcc	r5, #12
 8002ffe:	2d00      	cmp	r5, #0
 8003000:	4606      	mov	r6, r0
 8003002:	db01      	blt.n	8003008 <_malloc_r+0x1c>
 8003004:	42a9      	cmp	r1, r5
 8003006:	d904      	bls.n	8003012 <_malloc_r+0x26>
 8003008:	230c      	movs	r3, #12
 800300a:	6033      	str	r3, [r6, #0]
 800300c:	2000      	movs	r0, #0
 800300e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003012:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80030e8 <_malloc_r+0xfc>
 8003016:	f000 f869 	bl	80030ec <__malloc_lock>
 800301a:	f8d8 3000 	ldr.w	r3, [r8]
 800301e:	461c      	mov	r4, r3
 8003020:	bb44      	cbnz	r4, 8003074 <_malloc_r+0x88>
 8003022:	4629      	mov	r1, r5
 8003024:	4630      	mov	r0, r6
 8003026:	f7ff ffbf 	bl	8002fa8 <sbrk_aligned>
 800302a:	1c43      	adds	r3, r0, #1
 800302c:	4604      	mov	r4, r0
 800302e:	d158      	bne.n	80030e2 <_malloc_r+0xf6>
 8003030:	f8d8 4000 	ldr.w	r4, [r8]
 8003034:	4627      	mov	r7, r4
 8003036:	2f00      	cmp	r7, #0
 8003038:	d143      	bne.n	80030c2 <_malloc_r+0xd6>
 800303a:	2c00      	cmp	r4, #0
 800303c:	d04b      	beq.n	80030d6 <_malloc_r+0xea>
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	4639      	mov	r1, r7
 8003042:	4630      	mov	r0, r6
 8003044:	eb04 0903 	add.w	r9, r4, r3
 8003048:	f000 fd34 	bl	8003ab4 <_sbrk_r>
 800304c:	4581      	cmp	r9, r0
 800304e:	d142      	bne.n	80030d6 <_malloc_r+0xea>
 8003050:	6821      	ldr	r1, [r4, #0]
 8003052:	4630      	mov	r0, r6
 8003054:	1a6d      	subs	r5, r5, r1
 8003056:	4629      	mov	r1, r5
 8003058:	f7ff ffa6 	bl	8002fa8 <sbrk_aligned>
 800305c:	3001      	adds	r0, #1
 800305e:	d03a      	beq.n	80030d6 <_malloc_r+0xea>
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	442b      	add	r3, r5
 8003064:	6023      	str	r3, [r4, #0]
 8003066:	f8d8 3000 	ldr.w	r3, [r8]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	bb62      	cbnz	r2, 80030c8 <_malloc_r+0xdc>
 800306e:	f8c8 7000 	str.w	r7, [r8]
 8003072:	e00f      	b.n	8003094 <_malloc_r+0xa8>
 8003074:	6822      	ldr	r2, [r4, #0]
 8003076:	1b52      	subs	r2, r2, r5
 8003078:	d420      	bmi.n	80030bc <_malloc_r+0xd0>
 800307a:	2a0b      	cmp	r2, #11
 800307c:	d917      	bls.n	80030ae <_malloc_r+0xc2>
 800307e:	1961      	adds	r1, r4, r5
 8003080:	42a3      	cmp	r3, r4
 8003082:	6025      	str	r5, [r4, #0]
 8003084:	bf18      	it	ne
 8003086:	6059      	strne	r1, [r3, #4]
 8003088:	6863      	ldr	r3, [r4, #4]
 800308a:	bf08      	it	eq
 800308c:	f8c8 1000 	streq.w	r1, [r8]
 8003090:	5162      	str	r2, [r4, r5]
 8003092:	604b      	str	r3, [r1, #4]
 8003094:	4630      	mov	r0, r6
 8003096:	f000 f82f 	bl	80030f8 <__malloc_unlock>
 800309a:	f104 000b 	add.w	r0, r4, #11
 800309e:	1d23      	adds	r3, r4, #4
 80030a0:	f020 0007 	bic.w	r0, r0, #7
 80030a4:	1ac2      	subs	r2, r0, r3
 80030a6:	bf1c      	itt	ne
 80030a8:	1a1b      	subne	r3, r3, r0
 80030aa:	50a3      	strne	r3, [r4, r2]
 80030ac:	e7af      	b.n	800300e <_malloc_r+0x22>
 80030ae:	6862      	ldr	r2, [r4, #4]
 80030b0:	42a3      	cmp	r3, r4
 80030b2:	bf0c      	ite	eq
 80030b4:	f8c8 2000 	streq.w	r2, [r8]
 80030b8:	605a      	strne	r2, [r3, #4]
 80030ba:	e7eb      	b.n	8003094 <_malloc_r+0xa8>
 80030bc:	4623      	mov	r3, r4
 80030be:	6864      	ldr	r4, [r4, #4]
 80030c0:	e7ae      	b.n	8003020 <_malloc_r+0x34>
 80030c2:	463c      	mov	r4, r7
 80030c4:	687f      	ldr	r7, [r7, #4]
 80030c6:	e7b6      	b.n	8003036 <_malloc_r+0x4a>
 80030c8:	461a      	mov	r2, r3
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	42a3      	cmp	r3, r4
 80030ce:	d1fb      	bne.n	80030c8 <_malloc_r+0xdc>
 80030d0:	2300      	movs	r3, #0
 80030d2:	6053      	str	r3, [r2, #4]
 80030d4:	e7de      	b.n	8003094 <_malloc_r+0xa8>
 80030d6:	230c      	movs	r3, #12
 80030d8:	4630      	mov	r0, r6
 80030da:	6033      	str	r3, [r6, #0]
 80030dc:	f000 f80c 	bl	80030f8 <__malloc_unlock>
 80030e0:	e794      	b.n	800300c <_malloc_r+0x20>
 80030e2:	6005      	str	r5, [r0, #0]
 80030e4:	e7d6      	b.n	8003094 <_malloc_r+0xa8>
 80030e6:	bf00      	nop
 80030e8:	200003b4 	.word	0x200003b4

080030ec <__malloc_lock>:
 80030ec:	4801      	ldr	r0, [pc, #4]	@ (80030f4 <__malloc_lock+0x8>)
 80030ee:	f7ff bf10 	b.w	8002f12 <__retarget_lock_acquire_recursive>
 80030f2:	bf00      	nop
 80030f4:	200003ac 	.word	0x200003ac

080030f8 <__malloc_unlock>:
 80030f8:	4801      	ldr	r0, [pc, #4]	@ (8003100 <__malloc_unlock+0x8>)
 80030fa:	f7ff bf0b 	b.w	8002f14 <__retarget_lock_release_recursive>
 80030fe:	bf00      	nop
 8003100:	200003ac 	.word	0x200003ac

08003104 <__ssputs_r>:
 8003104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003108:	461f      	mov	r7, r3
 800310a:	688e      	ldr	r6, [r1, #8]
 800310c:	4682      	mov	sl, r0
 800310e:	42be      	cmp	r6, r7
 8003110:	460c      	mov	r4, r1
 8003112:	4690      	mov	r8, r2
 8003114:	680b      	ldr	r3, [r1, #0]
 8003116:	d82d      	bhi.n	8003174 <__ssputs_r+0x70>
 8003118:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800311c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003120:	d026      	beq.n	8003170 <__ssputs_r+0x6c>
 8003122:	6965      	ldr	r5, [r4, #20]
 8003124:	6909      	ldr	r1, [r1, #16]
 8003126:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800312a:	eba3 0901 	sub.w	r9, r3, r1
 800312e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003132:	1c7b      	adds	r3, r7, #1
 8003134:	444b      	add	r3, r9
 8003136:	106d      	asrs	r5, r5, #1
 8003138:	429d      	cmp	r5, r3
 800313a:	bf38      	it	cc
 800313c:	461d      	movcc	r5, r3
 800313e:	0553      	lsls	r3, r2, #21
 8003140:	d527      	bpl.n	8003192 <__ssputs_r+0x8e>
 8003142:	4629      	mov	r1, r5
 8003144:	f7ff ff52 	bl	8002fec <_malloc_r>
 8003148:	4606      	mov	r6, r0
 800314a:	b360      	cbz	r0, 80031a6 <__ssputs_r+0xa2>
 800314c:	464a      	mov	r2, r9
 800314e:	6921      	ldr	r1, [r4, #16]
 8003150:	f000 fcce 	bl	8003af0 <memcpy>
 8003154:	89a3      	ldrh	r3, [r4, #12]
 8003156:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800315a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800315e:	81a3      	strh	r3, [r4, #12]
 8003160:	6126      	str	r6, [r4, #16]
 8003162:	444e      	add	r6, r9
 8003164:	6026      	str	r6, [r4, #0]
 8003166:	463e      	mov	r6, r7
 8003168:	6165      	str	r5, [r4, #20]
 800316a:	eba5 0509 	sub.w	r5, r5, r9
 800316e:	60a5      	str	r5, [r4, #8]
 8003170:	42be      	cmp	r6, r7
 8003172:	d900      	bls.n	8003176 <__ssputs_r+0x72>
 8003174:	463e      	mov	r6, r7
 8003176:	4632      	mov	r2, r6
 8003178:	4641      	mov	r1, r8
 800317a:	6820      	ldr	r0, [r4, #0]
 800317c:	f000 fc80 	bl	8003a80 <memmove>
 8003180:	2000      	movs	r0, #0
 8003182:	68a3      	ldr	r3, [r4, #8]
 8003184:	1b9b      	subs	r3, r3, r6
 8003186:	60a3      	str	r3, [r4, #8]
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	4433      	add	r3, r6
 800318c:	6023      	str	r3, [r4, #0]
 800318e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003192:	462a      	mov	r2, r5
 8003194:	f000 fcba 	bl	8003b0c <_realloc_r>
 8003198:	4606      	mov	r6, r0
 800319a:	2800      	cmp	r0, #0
 800319c:	d1e0      	bne.n	8003160 <__ssputs_r+0x5c>
 800319e:	4650      	mov	r0, sl
 80031a0:	6921      	ldr	r1, [r4, #16]
 80031a2:	f7ff feb9 	bl	8002f18 <_free_r>
 80031a6:	230c      	movs	r3, #12
 80031a8:	f8ca 3000 	str.w	r3, [sl]
 80031ac:	89a3      	ldrh	r3, [r4, #12]
 80031ae:	f04f 30ff 	mov.w	r0, #4294967295
 80031b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031b6:	81a3      	strh	r3, [r4, #12]
 80031b8:	e7e9      	b.n	800318e <__ssputs_r+0x8a>
	...

080031bc <_svfiprintf_r>:
 80031bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c0:	4698      	mov	r8, r3
 80031c2:	898b      	ldrh	r3, [r1, #12]
 80031c4:	4607      	mov	r7, r0
 80031c6:	061b      	lsls	r3, r3, #24
 80031c8:	460d      	mov	r5, r1
 80031ca:	4614      	mov	r4, r2
 80031cc:	b09d      	sub	sp, #116	@ 0x74
 80031ce:	d510      	bpl.n	80031f2 <_svfiprintf_r+0x36>
 80031d0:	690b      	ldr	r3, [r1, #16]
 80031d2:	b973      	cbnz	r3, 80031f2 <_svfiprintf_r+0x36>
 80031d4:	2140      	movs	r1, #64	@ 0x40
 80031d6:	f7ff ff09 	bl	8002fec <_malloc_r>
 80031da:	6028      	str	r0, [r5, #0]
 80031dc:	6128      	str	r0, [r5, #16]
 80031de:	b930      	cbnz	r0, 80031ee <_svfiprintf_r+0x32>
 80031e0:	230c      	movs	r3, #12
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295
 80031e8:	b01d      	add	sp, #116	@ 0x74
 80031ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ee:	2340      	movs	r3, #64	@ 0x40
 80031f0:	616b      	str	r3, [r5, #20]
 80031f2:	2300      	movs	r3, #0
 80031f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80031f6:	2320      	movs	r3, #32
 80031f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80031fc:	2330      	movs	r3, #48	@ 0x30
 80031fe:	f04f 0901 	mov.w	r9, #1
 8003202:	f8cd 800c 	str.w	r8, [sp, #12]
 8003206:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80033a0 <_svfiprintf_r+0x1e4>
 800320a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800320e:	4623      	mov	r3, r4
 8003210:	469a      	mov	sl, r3
 8003212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003216:	b10a      	cbz	r2, 800321c <_svfiprintf_r+0x60>
 8003218:	2a25      	cmp	r2, #37	@ 0x25
 800321a:	d1f9      	bne.n	8003210 <_svfiprintf_r+0x54>
 800321c:	ebba 0b04 	subs.w	fp, sl, r4
 8003220:	d00b      	beq.n	800323a <_svfiprintf_r+0x7e>
 8003222:	465b      	mov	r3, fp
 8003224:	4622      	mov	r2, r4
 8003226:	4629      	mov	r1, r5
 8003228:	4638      	mov	r0, r7
 800322a:	f7ff ff6b 	bl	8003104 <__ssputs_r>
 800322e:	3001      	adds	r0, #1
 8003230:	f000 80a7 	beq.w	8003382 <_svfiprintf_r+0x1c6>
 8003234:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003236:	445a      	add	r2, fp
 8003238:	9209      	str	r2, [sp, #36]	@ 0x24
 800323a:	f89a 3000 	ldrb.w	r3, [sl]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 809f 	beq.w	8003382 <_svfiprintf_r+0x1c6>
 8003244:	2300      	movs	r3, #0
 8003246:	f04f 32ff 	mov.w	r2, #4294967295
 800324a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800324e:	f10a 0a01 	add.w	sl, sl, #1
 8003252:	9304      	str	r3, [sp, #16]
 8003254:	9307      	str	r3, [sp, #28]
 8003256:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800325a:	931a      	str	r3, [sp, #104]	@ 0x68
 800325c:	4654      	mov	r4, sl
 800325e:	2205      	movs	r2, #5
 8003260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003264:	484e      	ldr	r0, [pc, #312]	@ (80033a0 <_svfiprintf_r+0x1e4>)
 8003266:	f000 fc35 	bl	8003ad4 <memchr>
 800326a:	9a04      	ldr	r2, [sp, #16]
 800326c:	b9d8      	cbnz	r0, 80032a6 <_svfiprintf_r+0xea>
 800326e:	06d0      	lsls	r0, r2, #27
 8003270:	bf44      	itt	mi
 8003272:	2320      	movmi	r3, #32
 8003274:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003278:	0711      	lsls	r1, r2, #28
 800327a:	bf44      	itt	mi
 800327c:	232b      	movmi	r3, #43	@ 0x2b
 800327e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003282:	f89a 3000 	ldrb.w	r3, [sl]
 8003286:	2b2a      	cmp	r3, #42	@ 0x2a
 8003288:	d015      	beq.n	80032b6 <_svfiprintf_r+0xfa>
 800328a:	4654      	mov	r4, sl
 800328c:	2000      	movs	r0, #0
 800328e:	f04f 0c0a 	mov.w	ip, #10
 8003292:	9a07      	ldr	r2, [sp, #28]
 8003294:	4621      	mov	r1, r4
 8003296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800329a:	3b30      	subs	r3, #48	@ 0x30
 800329c:	2b09      	cmp	r3, #9
 800329e:	d94b      	bls.n	8003338 <_svfiprintf_r+0x17c>
 80032a0:	b1b0      	cbz	r0, 80032d0 <_svfiprintf_r+0x114>
 80032a2:	9207      	str	r2, [sp, #28]
 80032a4:	e014      	b.n	80032d0 <_svfiprintf_r+0x114>
 80032a6:	eba0 0308 	sub.w	r3, r0, r8
 80032aa:	fa09 f303 	lsl.w	r3, r9, r3
 80032ae:	4313      	orrs	r3, r2
 80032b0:	46a2      	mov	sl, r4
 80032b2:	9304      	str	r3, [sp, #16]
 80032b4:	e7d2      	b.n	800325c <_svfiprintf_r+0xa0>
 80032b6:	9b03      	ldr	r3, [sp, #12]
 80032b8:	1d19      	adds	r1, r3, #4
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	9103      	str	r1, [sp, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bfbb      	ittet	lt
 80032c2:	425b      	neglt	r3, r3
 80032c4:	f042 0202 	orrlt.w	r2, r2, #2
 80032c8:	9307      	strge	r3, [sp, #28]
 80032ca:	9307      	strlt	r3, [sp, #28]
 80032cc:	bfb8      	it	lt
 80032ce:	9204      	strlt	r2, [sp, #16]
 80032d0:	7823      	ldrb	r3, [r4, #0]
 80032d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80032d4:	d10a      	bne.n	80032ec <_svfiprintf_r+0x130>
 80032d6:	7863      	ldrb	r3, [r4, #1]
 80032d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80032da:	d132      	bne.n	8003342 <_svfiprintf_r+0x186>
 80032dc:	9b03      	ldr	r3, [sp, #12]
 80032de:	3402      	adds	r4, #2
 80032e0:	1d1a      	adds	r2, r3, #4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	9203      	str	r2, [sp, #12]
 80032e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80032ea:	9305      	str	r3, [sp, #20]
 80032ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80033a4 <_svfiprintf_r+0x1e8>
 80032f0:	2203      	movs	r2, #3
 80032f2:	4650      	mov	r0, sl
 80032f4:	7821      	ldrb	r1, [r4, #0]
 80032f6:	f000 fbed 	bl	8003ad4 <memchr>
 80032fa:	b138      	cbz	r0, 800330c <_svfiprintf_r+0x150>
 80032fc:	2240      	movs	r2, #64	@ 0x40
 80032fe:	9b04      	ldr	r3, [sp, #16]
 8003300:	eba0 000a 	sub.w	r0, r0, sl
 8003304:	4082      	lsls	r2, r0
 8003306:	4313      	orrs	r3, r2
 8003308:	3401      	adds	r4, #1
 800330a:	9304      	str	r3, [sp, #16]
 800330c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003310:	2206      	movs	r2, #6
 8003312:	4825      	ldr	r0, [pc, #148]	@ (80033a8 <_svfiprintf_r+0x1ec>)
 8003314:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003318:	f000 fbdc 	bl	8003ad4 <memchr>
 800331c:	2800      	cmp	r0, #0
 800331e:	d036      	beq.n	800338e <_svfiprintf_r+0x1d2>
 8003320:	4b22      	ldr	r3, [pc, #136]	@ (80033ac <_svfiprintf_r+0x1f0>)
 8003322:	bb1b      	cbnz	r3, 800336c <_svfiprintf_r+0x1b0>
 8003324:	9b03      	ldr	r3, [sp, #12]
 8003326:	3307      	adds	r3, #7
 8003328:	f023 0307 	bic.w	r3, r3, #7
 800332c:	3308      	adds	r3, #8
 800332e:	9303      	str	r3, [sp, #12]
 8003330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003332:	4433      	add	r3, r6
 8003334:	9309      	str	r3, [sp, #36]	@ 0x24
 8003336:	e76a      	b.n	800320e <_svfiprintf_r+0x52>
 8003338:	460c      	mov	r4, r1
 800333a:	2001      	movs	r0, #1
 800333c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003340:	e7a8      	b.n	8003294 <_svfiprintf_r+0xd8>
 8003342:	2300      	movs	r3, #0
 8003344:	f04f 0c0a 	mov.w	ip, #10
 8003348:	4619      	mov	r1, r3
 800334a:	3401      	adds	r4, #1
 800334c:	9305      	str	r3, [sp, #20]
 800334e:	4620      	mov	r0, r4
 8003350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003354:	3a30      	subs	r2, #48	@ 0x30
 8003356:	2a09      	cmp	r2, #9
 8003358:	d903      	bls.n	8003362 <_svfiprintf_r+0x1a6>
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0c6      	beq.n	80032ec <_svfiprintf_r+0x130>
 800335e:	9105      	str	r1, [sp, #20]
 8003360:	e7c4      	b.n	80032ec <_svfiprintf_r+0x130>
 8003362:	4604      	mov	r4, r0
 8003364:	2301      	movs	r3, #1
 8003366:	fb0c 2101 	mla	r1, ip, r1, r2
 800336a:	e7f0      	b.n	800334e <_svfiprintf_r+0x192>
 800336c:	ab03      	add	r3, sp, #12
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	462a      	mov	r2, r5
 8003372:	4638      	mov	r0, r7
 8003374:	4b0e      	ldr	r3, [pc, #56]	@ (80033b0 <_svfiprintf_r+0x1f4>)
 8003376:	a904      	add	r1, sp, #16
 8003378:	f3af 8000 	nop.w
 800337c:	1c42      	adds	r2, r0, #1
 800337e:	4606      	mov	r6, r0
 8003380:	d1d6      	bne.n	8003330 <_svfiprintf_r+0x174>
 8003382:	89ab      	ldrh	r3, [r5, #12]
 8003384:	065b      	lsls	r3, r3, #25
 8003386:	f53f af2d 	bmi.w	80031e4 <_svfiprintf_r+0x28>
 800338a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800338c:	e72c      	b.n	80031e8 <_svfiprintf_r+0x2c>
 800338e:	ab03      	add	r3, sp, #12
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	462a      	mov	r2, r5
 8003394:	4638      	mov	r0, r7
 8003396:	4b06      	ldr	r3, [pc, #24]	@ (80033b0 <_svfiprintf_r+0x1f4>)
 8003398:	a904      	add	r1, sp, #16
 800339a:	f000 f9bd 	bl	8003718 <_printf_i>
 800339e:	e7ed      	b.n	800337c <_svfiprintf_r+0x1c0>
 80033a0:	080041ca 	.word	0x080041ca
 80033a4:	080041d0 	.word	0x080041d0
 80033a8:	080041d4 	.word	0x080041d4
 80033ac:	00000000 	.word	0x00000000
 80033b0:	08003105 	.word	0x08003105

080033b4 <__sfputc_r>:
 80033b4:	6893      	ldr	r3, [r2, #8]
 80033b6:	b410      	push	{r4}
 80033b8:	3b01      	subs	r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	6093      	str	r3, [r2, #8]
 80033be:	da07      	bge.n	80033d0 <__sfputc_r+0x1c>
 80033c0:	6994      	ldr	r4, [r2, #24]
 80033c2:	42a3      	cmp	r3, r4
 80033c4:	db01      	blt.n	80033ca <__sfputc_r+0x16>
 80033c6:	290a      	cmp	r1, #10
 80033c8:	d102      	bne.n	80033d0 <__sfputc_r+0x1c>
 80033ca:	bc10      	pop	{r4}
 80033cc:	f000 bac4 	b.w	8003958 <__swbuf_r>
 80033d0:	6813      	ldr	r3, [r2, #0]
 80033d2:	1c58      	adds	r0, r3, #1
 80033d4:	6010      	str	r0, [r2, #0]
 80033d6:	7019      	strb	r1, [r3, #0]
 80033d8:	4608      	mov	r0, r1
 80033da:	bc10      	pop	{r4}
 80033dc:	4770      	bx	lr

080033de <__sfputs_r>:
 80033de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e0:	4606      	mov	r6, r0
 80033e2:	460f      	mov	r7, r1
 80033e4:	4614      	mov	r4, r2
 80033e6:	18d5      	adds	r5, r2, r3
 80033e8:	42ac      	cmp	r4, r5
 80033ea:	d101      	bne.n	80033f0 <__sfputs_r+0x12>
 80033ec:	2000      	movs	r0, #0
 80033ee:	e007      	b.n	8003400 <__sfputs_r+0x22>
 80033f0:	463a      	mov	r2, r7
 80033f2:	4630      	mov	r0, r6
 80033f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033f8:	f7ff ffdc 	bl	80033b4 <__sfputc_r>
 80033fc:	1c43      	adds	r3, r0, #1
 80033fe:	d1f3      	bne.n	80033e8 <__sfputs_r+0xa>
 8003400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003404 <_vfiprintf_r>:
 8003404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003408:	460d      	mov	r5, r1
 800340a:	4614      	mov	r4, r2
 800340c:	4698      	mov	r8, r3
 800340e:	4606      	mov	r6, r0
 8003410:	b09d      	sub	sp, #116	@ 0x74
 8003412:	b118      	cbz	r0, 800341c <_vfiprintf_r+0x18>
 8003414:	6a03      	ldr	r3, [r0, #32]
 8003416:	b90b      	cbnz	r3, 800341c <_vfiprintf_r+0x18>
 8003418:	f7ff fc42 	bl	8002ca0 <__sinit>
 800341c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800341e:	07d9      	lsls	r1, r3, #31
 8003420:	d405      	bmi.n	800342e <_vfiprintf_r+0x2a>
 8003422:	89ab      	ldrh	r3, [r5, #12]
 8003424:	059a      	lsls	r2, r3, #22
 8003426:	d402      	bmi.n	800342e <_vfiprintf_r+0x2a>
 8003428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800342a:	f7ff fd72 	bl	8002f12 <__retarget_lock_acquire_recursive>
 800342e:	89ab      	ldrh	r3, [r5, #12]
 8003430:	071b      	lsls	r3, r3, #28
 8003432:	d501      	bpl.n	8003438 <_vfiprintf_r+0x34>
 8003434:	692b      	ldr	r3, [r5, #16]
 8003436:	b99b      	cbnz	r3, 8003460 <_vfiprintf_r+0x5c>
 8003438:	4629      	mov	r1, r5
 800343a:	4630      	mov	r0, r6
 800343c:	f000 faca 	bl	80039d4 <__swsetup_r>
 8003440:	b170      	cbz	r0, 8003460 <_vfiprintf_r+0x5c>
 8003442:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003444:	07dc      	lsls	r4, r3, #31
 8003446:	d504      	bpl.n	8003452 <_vfiprintf_r+0x4e>
 8003448:	f04f 30ff 	mov.w	r0, #4294967295
 800344c:	b01d      	add	sp, #116	@ 0x74
 800344e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003452:	89ab      	ldrh	r3, [r5, #12]
 8003454:	0598      	lsls	r0, r3, #22
 8003456:	d4f7      	bmi.n	8003448 <_vfiprintf_r+0x44>
 8003458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800345a:	f7ff fd5b 	bl	8002f14 <__retarget_lock_release_recursive>
 800345e:	e7f3      	b.n	8003448 <_vfiprintf_r+0x44>
 8003460:	2300      	movs	r3, #0
 8003462:	9309      	str	r3, [sp, #36]	@ 0x24
 8003464:	2320      	movs	r3, #32
 8003466:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800346a:	2330      	movs	r3, #48	@ 0x30
 800346c:	f04f 0901 	mov.w	r9, #1
 8003470:	f8cd 800c 	str.w	r8, [sp, #12]
 8003474:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003620 <_vfiprintf_r+0x21c>
 8003478:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800347c:	4623      	mov	r3, r4
 800347e:	469a      	mov	sl, r3
 8003480:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003484:	b10a      	cbz	r2, 800348a <_vfiprintf_r+0x86>
 8003486:	2a25      	cmp	r2, #37	@ 0x25
 8003488:	d1f9      	bne.n	800347e <_vfiprintf_r+0x7a>
 800348a:	ebba 0b04 	subs.w	fp, sl, r4
 800348e:	d00b      	beq.n	80034a8 <_vfiprintf_r+0xa4>
 8003490:	465b      	mov	r3, fp
 8003492:	4622      	mov	r2, r4
 8003494:	4629      	mov	r1, r5
 8003496:	4630      	mov	r0, r6
 8003498:	f7ff ffa1 	bl	80033de <__sfputs_r>
 800349c:	3001      	adds	r0, #1
 800349e:	f000 80a7 	beq.w	80035f0 <_vfiprintf_r+0x1ec>
 80034a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80034a4:	445a      	add	r2, fp
 80034a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80034a8:	f89a 3000 	ldrb.w	r3, [sl]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 809f 	beq.w	80035f0 <_vfiprintf_r+0x1ec>
 80034b2:	2300      	movs	r3, #0
 80034b4:	f04f 32ff 	mov.w	r2, #4294967295
 80034b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034bc:	f10a 0a01 	add.w	sl, sl, #1
 80034c0:	9304      	str	r3, [sp, #16]
 80034c2:	9307      	str	r3, [sp, #28]
 80034c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80034c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80034ca:	4654      	mov	r4, sl
 80034cc:	2205      	movs	r2, #5
 80034ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034d2:	4853      	ldr	r0, [pc, #332]	@ (8003620 <_vfiprintf_r+0x21c>)
 80034d4:	f000 fafe 	bl	8003ad4 <memchr>
 80034d8:	9a04      	ldr	r2, [sp, #16]
 80034da:	b9d8      	cbnz	r0, 8003514 <_vfiprintf_r+0x110>
 80034dc:	06d1      	lsls	r1, r2, #27
 80034de:	bf44      	itt	mi
 80034e0:	2320      	movmi	r3, #32
 80034e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80034e6:	0713      	lsls	r3, r2, #28
 80034e8:	bf44      	itt	mi
 80034ea:	232b      	movmi	r3, #43	@ 0x2b
 80034ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80034f0:	f89a 3000 	ldrb.w	r3, [sl]
 80034f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80034f6:	d015      	beq.n	8003524 <_vfiprintf_r+0x120>
 80034f8:	4654      	mov	r4, sl
 80034fa:	2000      	movs	r0, #0
 80034fc:	f04f 0c0a 	mov.w	ip, #10
 8003500:	9a07      	ldr	r2, [sp, #28]
 8003502:	4621      	mov	r1, r4
 8003504:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003508:	3b30      	subs	r3, #48	@ 0x30
 800350a:	2b09      	cmp	r3, #9
 800350c:	d94b      	bls.n	80035a6 <_vfiprintf_r+0x1a2>
 800350e:	b1b0      	cbz	r0, 800353e <_vfiprintf_r+0x13a>
 8003510:	9207      	str	r2, [sp, #28]
 8003512:	e014      	b.n	800353e <_vfiprintf_r+0x13a>
 8003514:	eba0 0308 	sub.w	r3, r0, r8
 8003518:	fa09 f303 	lsl.w	r3, r9, r3
 800351c:	4313      	orrs	r3, r2
 800351e:	46a2      	mov	sl, r4
 8003520:	9304      	str	r3, [sp, #16]
 8003522:	e7d2      	b.n	80034ca <_vfiprintf_r+0xc6>
 8003524:	9b03      	ldr	r3, [sp, #12]
 8003526:	1d19      	adds	r1, r3, #4
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	9103      	str	r1, [sp, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	bfbb      	ittet	lt
 8003530:	425b      	neglt	r3, r3
 8003532:	f042 0202 	orrlt.w	r2, r2, #2
 8003536:	9307      	strge	r3, [sp, #28]
 8003538:	9307      	strlt	r3, [sp, #28]
 800353a:	bfb8      	it	lt
 800353c:	9204      	strlt	r2, [sp, #16]
 800353e:	7823      	ldrb	r3, [r4, #0]
 8003540:	2b2e      	cmp	r3, #46	@ 0x2e
 8003542:	d10a      	bne.n	800355a <_vfiprintf_r+0x156>
 8003544:	7863      	ldrb	r3, [r4, #1]
 8003546:	2b2a      	cmp	r3, #42	@ 0x2a
 8003548:	d132      	bne.n	80035b0 <_vfiprintf_r+0x1ac>
 800354a:	9b03      	ldr	r3, [sp, #12]
 800354c:	3402      	adds	r4, #2
 800354e:	1d1a      	adds	r2, r3, #4
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	9203      	str	r2, [sp, #12]
 8003554:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003558:	9305      	str	r3, [sp, #20]
 800355a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003624 <_vfiprintf_r+0x220>
 800355e:	2203      	movs	r2, #3
 8003560:	4650      	mov	r0, sl
 8003562:	7821      	ldrb	r1, [r4, #0]
 8003564:	f000 fab6 	bl	8003ad4 <memchr>
 8003568:	b138      	cbz	r0, 800357a <_vfiprintf_r+0x176>
 800356a:	2240      	movs	r2, #64	@ 0x40
 800356c:	9b04      	ldr	r3, [sp, #16]
 800356e:	eba0 000a 	sub.w	r0, r0, sl
 8003572:	4082      	lsls	r2, r0
 8003574:	4313      	orrs	r3, r2
 8003576:	3401      	adds	r4, #1
 8003578:	9304      	str	r3, [sp, #16]
 800357a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800357e:	2206      	movs	r2, #6
 8003580:	4829      	ldr	r0, [pc, #164]	@ (8003628 <_vfiprintf_r+0x224>)
 8003582:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003586:	f000 faa5 	bl	8003ad4 <memchr>
 800358a:	2800      	cmp	r0, #0
 800358c:	d03f      	beq.n	800360e <_vfiprintf_r+0x20a>
 800358e:	4b27      	ldr	r3, [pc, #156]	@ (800362c <_vfiprintf_r+0x228>)
 8003590:	bb1b      	cbnz	r3, 80035da <_vfiprintf_r+0x1d6>
 8003592:	9b03      	ldr	r3, [sp, #12]
 8003594:	3307      	adds	r3, #7
 8003596:	f023 0307 	bic.w	r3, r3, #7
 800359a:	3308      	adds	r3, #8
 800359c:	9303      	str	r3, [sp, #12]
 800359e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035a0:	443b      	add	r3, r7
 80035a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80035a4:	e76a      	b.n	800347c <_vfiprintf_r+0x78>
 80035a6:	460c      	mov	r4, r1
 80035a8:	2001      	movs	r0, #1
 80035aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80035ae:	e7a8      	b.n	8003502 <_vfiprintf_r+0xfe>
 80035b0:	2300      	movs	r3, #0
 80035b2:	f04f 0c0a 	mov.w	ip, #10
 80035b6:	4619      	mov	r1, r3
 80035b8:	3401      	adds	r4, #1
 80035ba:	9305      	str	r3, [sp, #20]
 80035bc:	4620      	mov	r0, r4
 80035be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035c2:	3a30      	subs	r2, #48	@ 0x30
 80035c4:	2a09      	cmp	r2, #9
 80035c6:	d903      	bls.n	80035d0 <_vfiprintf_r+0x1cc>
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0c6      	beq.n	800355a <_vfiprintf_r+0x156>
 80035cc:	9105      	str	r1, [sp, #20]
 80035ce:	e7c4      	b.n	800355a <_vfiprintf_r+0x156>
 80035d0:	4604      	mov	r4, r0
 80035d2:	2301      	movs	r3, #1
 80035d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80035d8:	e7f0      	b.n	80035bc <_vfiprintf_r+0x1b8>
 80035da:	ab03      	add	r3, sp, #12
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	462a      	mov	r2, r5
 80035e0:	4630      	mov	r0, r6
 80035e2:	4b13      	ldr	r3, [pc, #76]	@ (8003630 <_vfiprintf_r+0x22c>)
 80035e4:	a904      	add	r1, sp, #16
 80035e6:	f3af 8000 	nop.w
 80035ea:	4607      	mov	r7, r0
 80035ec:	1c78      	adds	r0, r7, #1
 80035ee:	d1d6      	bne.n	800359e <_vfiprintf_r+0x19a>
 80035f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80035f2:	07d9      	lsls	r1, r3, #31
 80035f4:	d405      	bmi.n	8003602 <_vfiprintf_r+0x1fe>
 80035f6:	89ab      	ldrh	r3, [r5, #12]
 80035f8:	059a      	lsls	r2, r3, #22
 80035fa:	d402      	bmi.n	8003602 <_vfiprintf_r+0x1fe>
 80035fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80035fe:	f7ff fc89 	bl	8002f14 <__retarget_lock_release_recursive>
 8003602:	89ab      	ldrh	r3, [r5, #12]
 8003604:	065b      	lsls	r3, r3, #25
 8003606:	f53f af1f 	bmi.w	8003448 <_vfiprintf_r+0x44>
 800360a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800360c:	e71e      	b.n	800344c <_vfiprintf_r+0x48>
 800360e:	ab03      	add	r3, sp, #12
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	462a      	mov	r2, r5
 8003614:	4630      	mov	r0, r6
 8003616:	4b06      	ldr	r3, [pc, #24]	@ (8003630 <_vfiprintf_r+0x22c>)
 8003618:	a904      	add	r1, sp, #16
 800361a:	f000 f87d 	bl	8003718 <_printf_i>
 800361e:	e7e4      	b.n	80035ea <_vfiprintf_r+0x1e6>
 8003620:	080041ca 	.word	0x080041ca
 8003624:	080041d0 	.word	0x080041d0
 8003628:	080041d4 	.word	0x080041d4
 800362c:	00000000 	.word	0x00000000
 8003630:	080033df 	.word	0x080033df

08003634 <_printf_common>:
 8003634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003638:	4616      	mov	r6, r2
 800363a:	4698      	mov	r8, r3
 800363c:	688a      	ldr	r2, [r1, #8]
 800363e:	690b      	ldr	r3, [r1, #16]
 8003640:	4607      	mov	r7, r0
 8003642:	4293      	cmp	r3, r2
 8003644:	bfb8      	it	lt
 8003646:	4613      	movlt	r3, r2
 8003648:	6033      	str	r3, [r6, #0]
 800364a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800364e:	460c      	mov	r4, r1
 8003650:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003654:	b10a      	cbz	r2, 800365a <_printf_common+0x26>
 8003656:	3301      	adds	r3, #1
 8003658:	6033      	str	r3, [r6, #0]
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	0699      	lsls	r1, r3, #26
 800365e:	bf42      	ittt	mi
 8003660:	6833      	ldrmi	r3, [r6, #0]
 8003662:	3302      	addmi	r3, #2
 8003664:	6033      	strmi	r3, [r6, #0]
 8003666:	6825      	ldr	r5, [r4, #0]
 8003668:	f015 0506 	ands.w	r5, r5, #6
 800366c:	d106      	bne.n	800367c <_printf_common+0x48>
 800366e:	f104 0a19 	add.w	sl, r4, #25
 8003672:	68e3      	ldr	r3, [r4, #12]
 8003674:	6832      	ldr	r2, [r6, #0]
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	42ab      	cmp	r3, r5
 800367a:	dc2b      	bgt.n	80036d4 <_printf_common+0xa0>
 800367c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003680:	6822      	ldr	r2, [r4, #0]
 8003682:	3b00      	subs	r3, #0
 8003684:	bf18      	it	ne
 8003686:	2301      	movne	r3, #1
 8003688:	0692      	lsls	r2, r2, #26
 800368a:	d430      	bmi.n	80036ee <_printf_common+0xba>
 800368c:	4641      	mov	r1, r8
 800368e:	4638      	mov	r0, r7
 8003690:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003694:	47c8      	blx	r9
 8003696:	3001      	adds	r0, #1
 8003698:	d023      	beq.n	80036e2 <_printf_common+0xae>
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	6922      	ldr	r2, [r4, #16]
 800369e:	f003 0306 	and.w	r3, r3, #6
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	bf14      	ite	ne
 80036a6:	2500      	movne	r5, #0
 80036a8:	6833      	ldreq	r3, [r6, #0]
 80036aa:	f04f 0600 	mov.w	r6, #0
 80036ae:	bf08      	it	eq
 80036b0:	68e5      	ldreq	r5, [r4, #12]
 80036b2:	f104 041a 	add.w	r4, r4, #26
 80036b6:	bf08      	it	eq
 80036b8:	1aed      	subeq	r5, r5, r3
 80036ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80036be:	bf08      	it	eq
 80036c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036c4:	4293      	cmp	r3, r2
 80036c6:	bfc4      	itt	gt
 80036c8:	1a9b      	subgt	r3, r3, r2
 80036ca:	18ed      	addgt	r5, r5, r3
 80036cc:	42b5      	cmp	r5, r6
 80036ce:	d11a      	bne.n	8003706 <_printf_common+0xd2>
 80036d0:	2000      	movs	r0, #0
 80036d2:	e008      	b.n	80036e6 <_printf_common+0xb2>
 80036d4:	2301      	movs	r3, #1
 80036d6:	4652      	mov	r2, sl
 80036d8:	4641      	mov	r1, r8
 80036da:	4638      	mov	r0, r7
 80036dc:	47c8      	blx	r9
 80036de:	3001      	adds	r0, #1
 80036e0:	d103      	bne.n	80036ea <_printf_common+0xb6>
 80036e2:	f04f 30ff 	mov.w	r0, #4294967295
 80036e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ea:	3501      	adds	r5, #1
 80036ec:	e7c1      	b.n	8003672 <_printf_common+0x3e>
 80036ee:	2030      	movs	r0, #48	@ 0x30
 80036f0:	18e1      	adds	r1, r4, r3
 80036f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80036fc:	4422      	add	r2, r4
 80036fe:	3302      	adds	r3, #2
 8003700:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003704:	e7c2      	b.n	800368c <_printf_common+0x58>
 8003706:	2301      	movs	r3, #1
 8003708:	4622      	mov	r2, r4
 800370a:	4641      	mov	r1, r8
 800370c:	4638      	mov	r0, r7
 800370e:	47c8      	blx	r9
 8003710:	3001      	adds	r0, #1
 8003712:	d0e6      	beq.n	80036e2 <_printf_common+0xae>
 8003714:	3601      	adds	r6, #1
 8003716:	e7d9      	b.n	80036cc <_printf_common+0x98>

08003718 <_printf_i>:
 8003718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800371c:	7e0f      	ldrb	r7, [r1, #24]
 800371e:	4691      	mov	r9, r2
 8003720:	2f78      	cmp	r7, #120	@ 0x78
 8003722:	4680      	mov	r8, r0
 8003724:	460c      	mov	r4, r1
 8003726:	469a      	mov	sl, r3
 8003728:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800372a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800372e:	d807      	bhi.n	8003740 <_printf_i+0x28>
 8003730:	2f62      	cmp	r7, #98	@ 0x62
 8003732:	d80a      	bhi.n	800374a <_printf_i+0x32>
 8003734:	2f00      	cmp	r7, #0
 8003736:	f000 80d3 	beq.w	80038e0 <_printf_i+0x1c8>
 800373a:	2f58      	cmp	r7, #88	@ 0x58
 800373c:	f000 80ba 	beq.w	80038b4 <_printf_i+0x19c>
 8003740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003744:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003748:	e03a      	b.n	80037c0 <_printf_i+0xa8>
 800374a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800374e:	2b15      	cmp	r3, #21
 8003750:	d8f6      	bhi.n	8003740 <_printf_i+0x28>
 8003752:	a101      	add	r1, pc, #4	@ (adr r1, 8003758 <_printf_i+0x40>)
 8003754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003758:	080037b1 	.word	0x080037b1
 800375c:	080037c5 	.word	0x080037c5
 8003760:	08003741 	.word	0x08003741
 8003764:	08003741 	.word	0x08003741
 8003768:	08003741 	.word	0x08003741
 800376c:	08003741 	.word	0x08003741
 8003770:	080037c5 	.word	0x080037c5
 8003774:	08003741 	.word	0x08003741
 8003778:	08003741 	.word	0x08003741
 800377c:	08003741 	.word	0x08003741
 8003780:	08003741 	.word	0x08003741
 8003784:	080038c7 	.word	0x080038c7
 8003788:	080037ef 	.word	0x080037ef
 800378c:	08003881 	.word	0x08003881
 8003790:	08003741 	.word	0x08003741
 8003794:	08003741 	.word	0x08003741
 8003798:	080038e9 	.word	0x080038e9
 800379c:	08003741 	.word	0x08003741
 80037a0:	080037ef 	.word	0x080037ef
 80037a4:	08003741 	.word	0x08003741
 80037a8:	08003741 	.word	0x08003741
 80037ac:	08003889 	.word	0x08003889
 80037b0:	6833      	ldr	r3, [r6, #0]
 80037b2:	1d1a      	adds	r2, r3, #4
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6032      	str	r2, [r6, #0]
 80037b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80037c0:	2301      	movs	r3, #1
 80037c2:	e09e      	b.n	8003902 <_printf_i+0x1ea>
 80037c4:	6833      	ldr	r3, [r6, #0]
 80037c6:	6820      	ldr	r0, [r4, #0]
 80037c8:	1d19      	adds	r1, r3, #4
 80037ca:	6031      	str	r1, [r6, #0]
 80037cc:	0606      	lsls	r6, r0, #24
 80037ce:	d501      	bpl.n	80037d4 <_printf_i+0xbc>
 80037d0:	681d      	ldr	r5, [r3, #0]
 80037d2:	e003      	b.n	80037dc <_printf_i+0xc4>
 80037d4:	0645      	lsls	r5, r0, #25
 80037d6:	d5fb      	bpl.n	80037d0 <_printf_i+0xb8>
 80037d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80037dc:	2d00      	cmp	r5, #0
 80037de:	da03      	bge.n	80037e8 <_printf_i+0xd0>
 80037e0:	232d      	movs	r3, #45	@ 0x2d
 80037e2:	426d      	negs	r5, r5
 80037e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037e8:	230a      	movs	r3, #10
 80037ea:	4859      	ldr	r0, [pc, #356]	@ (8003950 <_printf_i+0x238>)
 80037ec:	e011      	b.n	8003812 <_printf_i+0xfa>
 80037ee:	6821      	ldr	r1, [r4, #0]
 80037f0:	6833      	ldr	r3, [r6, #0]
 80037f2:	0608      	lsls	r0, r1, #24
 80037f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80037f8:	d402      	bmi.n	8003800 <_printf_i+0xe8>
 80037fa:	0649      	lsls	r1, r1, #25
 80037fc:	bf48      	it	mi
 80037fe:	b2ad      	uxthmi	r5, r5
 8003800:	2f6f      	cmp	r7, #111	@ 0x6f
 8003802:	6033      	str	r3, [r6, #0]
 8003804:	bf14      	ite	ne
 8003806:	230a      	movne	r3, #10
 8003808:	2308      	moveq	r3, #8
 800380a:	4851      	ldr	r0, [pc, #324]	@ (8003950 <_printf_i+0x238>)
 800380c:	2100      	movs	r1, #0
 800380e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003812:	6866      	ldr	r6, [r4, #4]
 8003814:	2e00      	cmp	r6, #0
 8003816:	bfa8      	it	ge
 8003818:	6821      	ldrge	r1, [r4, #0]
 800381a:	60a6      	str	r6, [r4, #8]
 800381c:	bfa4      	itt	ge
 800381e:	f021 0104 	bicge.w	r1, r1, #4
 8003822:	6021      	strge	r1, [r4, #0]
 8003824:	b90d      	cbnz	r5, 800382a <_printf_i+0x112>
 8003826:	2e00      	cmp	r6, #0
 8003828:	d04b      	beq.n	80038c2 <_printf_i+0x1aa>
 800382a:	4616      	mov	r6, r2
 800382c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003830:	fb03 5711 	mls	r7, r3, r1, r5
 8003834:	5dc7      	ldrb	r7, [r0, r7]
 8003836:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800383a:	462f      	mov	r7, r5
 800383c:	42bb      	cmp	r3, r7
 800383e:	460d      	mov	r5, r1
 8003840:	d9f4      	bls.n	800382c <_printf_i+0x114>
 8003842:	2b08      	cmp	r3, #8
 8003844:	d10b      	bne.n	800385e <_printf_i+0x146>
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	07df      	lsls	r7, r3, #31
 800384a:	d508      	bpl.n	800385e <_printf_i+0x146>
 800384c:	6923      	ldr	r3, [r4, #16]
 800384e:	6861      	ldr	r1, [r4, #4]
 8003850:	4299      	cmp	r1, r3
 8003852:	bfde      	ittt	le
 8003854:	2330      	movle	r3, #48	@ 0x30
 8003856:	f806 3c01 	strble.w	r3, [r6, #-1]
 800385a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800385e:	1b92      	subs	r2, r2, r6
 8003860:	6122      	str	r2, [r4, #16]
 8003862:	464b      	mov	r3, r9
 8003864:	4621      	mov	r1, r4
 8003866:	4640      	mov	r0, r8
 8003868:	f8cd a000 	str.w	sl, [sp]
 800386c:	aa03      	add	r2, sp, #12
 800386e:	f7ff fee1 	bl	8003634 <_printf_common>
 8003872:	3001      	adds	r0, #1
 8003874:	d14a      	bne.n	800390c <_printf_i+0x1f4>
 8003876:	f04f 30ff 	mov.w	r0, #4294967295
 800387a:	b004      	add	sp, #16
 800387c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	f043 0320 	orr.w	r3, r3, #32
 8003886:	6023      	str	r3, [r4, #0]
 8003888:	2778      	movs	r7, #120	@ 0x78
 800388a:	4832      	ldr	r0, [pc, #200]	@ (8003954 <_printf_i+0x23c>)
 800388c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	6831      	ldr	r1, [r6, #0]
 8003894:	061f      	lsls	r7, r3, #24
 8003896:	f851 5b04 	ldr.w	r5, [r1], #4
 800389a:	d402      	bmi.n	80038a2 <_printf_i+0x18a>
 800389c:	065f      	lsls	r7, r3, #25
 800389e:	bf48      	it	mi
 80038a0:	b2ad      	uxthmi	r5, r5
 80038a2:	6031      	str	r1, [r6, #0]
 80038a4:	07d9      	lsls	r1, r3, #31
 80038a6:	bf44      	itt	mi
 80038a8:	f043 0320 	orrmi.w	r3, r3, #32
 80038ac:	6023      	strmi	r3, [r4, #0]
 80038ae:	b11d      	cbz	r5, 80038b8 <_printf_i+0x1a0>
 80038b0:	2310      	movs	r3, #16
 80038b2:	e7ab      	b.n	800380c <_printf_i+0xf4>
 80038b4:	4826      	ldr	r0, [pc, #152]	@ (8003950 <_printf_i+0x238>)
 80038b6:	e7e9      	b.n	800388c <_printf_i+0x174>
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	f023 0320 	bic.w	r3, r3, #32
 80038be:	6023      	str	r3, [r4, #0]
 80038c0:	e7f6      	b.n	80038b0 <_printf_i+0x198>
 80038c2:	4616      	mov	r6, r2
 80038c4:	e7bd      	b.n	8003842 <_printf_i+0x12a>
 80038c6:	6833      	ldr	r3, [r6, #0]
 80038c8:	6825      	ldr	r5, [r4, #0]
 80038ca:	1d18      	adds	r0, r3, #4
 80038cc:	6961      	ldr	r1, [r4, #20]
 80038ce:	6030      	str	r0, [r6, #0]
 80038d0:	062e      	lsls	r6, r5, #24
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	d501      	bpl.n	80038da <_printf_i+0x1c2>
 80038d6:	6019      	str	r1, [r3, #0]
 80038d8:	e002      	b.n	80038e0 <_printf_i+0x1c8>
 80038da:	0668      	lsls	r0, r5, #25
 80038dc:	d5fb      	bpl.n	80038d6 <_printf_i+0x1be>
 80038de:	8019      	strh	r1, [r3, #0]
 80038e0:	2300      	movs	r3, #0
 80038e2:	4616      	mov	r6, r2
 80038e4:	6123      	str	r3, [r4, #16]
 80038e6:	e7bc      	b.n	8003862 <_printf_i+0x14a>
 80038e8:	6833      	ldr	r3, [r6, #0]
 80038ea:	2100      	movs	r1, #0
 80038ec:	1d1a      	adds	r2, r3, #4
 80038ee:	6032      	str	r2, [r6, #0]
 80038f0:	681e      	ldr	r6, [r3, #0]
 80038f2:	6862      	ldr	r2, [r4, #4]
 80038f4:	4630      	mov	r0, r6
 80038f6:	f000 f8ed 	bl	8003ad4 <memchr>
 80038fa:	b108      	cbz	r0, 8003900 <_printf_i+0x1e8>
 80038fc:	1b80      	subs	r0, r0, r6
 80038fe:	6060      	str	r0, [r4, #4]
 8003900:	6863      	ldr	r3, [r4, #4]
 8003902:	6123      	str	r3, [r4, #16]
 8003904:	2300      	movs	r3, #0
 8003906:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800390a:	e7aa      	b.n	8003862 <_printf_i+0x14a>
 800390c:	4632      	mov	r2, r6
 800390e:	4649      	mov	r1, r9
 8003910:	4640      	mov	r0, r8
 8003912:	6923      	ldr	r3, [r4, #16]
 8003914:	47d0      	blx	sl
 8003916:	3001      	adds	r0, #1
 8003918:	d0ad      	beq.n	8003876 <_printf_i+0x15e>
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	079b      	lsls	r3, r3, #30
 800391e:	d413      	bmi.n	8003948 <_printf_i+0x230>
 8003920:	68e0      	ldr	r0, [r4, #12]
 8003922:	9b03      	ldr	r3, [sp, #12]
 8003924:	4298      	cmp	r0, r3
 8003926:	bfb8      	it	lt
 8003928:	4618      	movlt	r0, r3
 800392a:	e7a6      	b.n	800387a <_printf_i+0x162>
 800392c:	2301      	movs	r3, #1
 800392e:	4632      	mov	r2, r6
 8003930:	4649      	mov	r1, r9
 8003932:	4640      	mov	r0, r8
 8003934:	47d0      	blx	sl
 8003936:	3001      	adds	r0, #1
 8003938:	d09d      	beq.n	8003876 <_printf_i+0x15e>
 800393a:	3501      	adds	r5, #1
 800393c:	68e3      	ldr	r3, [r4, #12]
 800393e:	9903      	ldr	r1, [sp, #12]
 8003940:	1a5b      	subs	r3, r3, r1
 8003942:	42ab      	cmp	r3, r5
 8003944:	dcf2      	bgt.n	800392c <_printf_i+0x214>
 8003946:	e7eb      	b.n	8003920 <_printf_i+0x208>
 8003948:	2500      	movs	r5, #0
 800394a:	f104 0619 	add.w	r6, r4, #25
 800394e:	e7f5      	b.n	800393c <_printf_i+0x224>
 8003950:	080041db 	.word	0x080041db
 8003954:	080041ec 	.word	0x080041ec

08003958 <__swbuf_r>:
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	460e      	mov	r6, r1
 800395c:	4614      	mov	r4, r2
 800395e:	4605      	mov	r5, r0
 8003960:	b118      	cbz	r0, 800396a <__swbuf_r+0x12>
 8003962:	6a03      	ldr	r3, [r0, #32]
 8003964:	b90b      	cbnz	r3, 800396a <__swbuf_r+0x12>
 8003966:	f7ff f99b 	bl	8002ca0 <__sinit>
 800396a:	69a3      	ldr	r3, [r4, #24]
 800396c:	60a3      	str	r3, [r4, #8]
 800396e:	89a3      	ldrh	r3, [r4, #12]
 8003970:	071a      	lsls	r2, r3, #28
 8003972:	d501      	bpl.n	8003978 <__swbuf_r+0x20>
 8003974:	6923      	ldr	r3, [r4, #16]
 8003976:	b943      	cbnz	r3, 800398a <__swbuf_r+0x32>
 8003978:	4621      	mov	r1, r4
 800397a:	4628      	mov	r0, r5
 800397c:	f000 f82a 	bl	80039d4 <__swsetup_r>
 8003980:	b118      	cbz	r0, 800398a <__swbuf_r+0x32>
 8003982:	f04f 37ff 	mov.w	r7, #4294967295
 8003986:	4638      	mov	r0, r7
 8003988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	6922      	ldr	r2, [r4, #16]
 800398e:	b2f6      	uxtb	r6, r6
 8003990:	1a98      	subs	r0, r3, r2
 8003992:	6963      	ldr	r3, [r4, #20]
 8003994:	4637      	mov	r7, r6
 8003996:	4283      	cmp	r3, r0
 8003998:	dc05      	bgt.n	80039a6 <__swbuf_r+0x4e>
 800399a:	4621      	mov	r1, r4
 800399c:	4628      	mov	r0, r5
 800399e:	f7ff f8b7 	bl	8002b10 <_fflush_r>
 80039a2:	2800      	cmp	r0, #0
 80039a4:	d1ed      	bne.n	8003982 <__swbuf_r+0x2a>
 80039a6:	68a3      	ldr	r3, [r4, #8]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	60a3      	str	r3, [r4, #8]
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	6022      	str	r2, [r4, #0]
 80039b2:	701e      	strb	r6, [r3, #0]
 80039b4:	6962      	ldr	r2, [r4, #20]
 80039b6:	1c43      	adds	r3, r0, #1
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d004      	beq.n	80039c6 <__swbuf_r+0x6e>
 80039bc:	89a3      	ldrh	r3, [r4, #12]
 80039be:	07db      	lsls	r3, r3, #31
 80039c0:	d5e1      	bpl.n	8003986 <__swbuf_r+0x2e>
 80039c2:	2e0a      	cmp	r6, #10
 80039c4:	d1df      	bne.n	8003986 <__swbuf_r+0x2e>
 80039c6:	4621      	mov	r1, r4
 80039c8:	4628      	mov	r0, r5
 80039ca:	f7ff f8a1 	bl	8002b10 <_fflush_r>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d0d9      	beq.n	8003986 <__swbuf_r+0x2e>
 80039d2:	e7d6      	b.n	8003982 <__swbuf_r+0x2a>

080039d4 <__swsetup_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4b29      	ldr	r3, [pc, #164]	@ (8003a7c <__swsetup_r+0xa8>)
 80039d8:	4605      	mov	r5, r0
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	460c      	mov	r4, r1
 80039de:	b118      	cbz	r0, 80039e8 <__swsetup_r+0x14>
 80039e0:	6a03      	ldr	r3, [r0, #32]
 80039e2:	b90b      	cbnz	r3, 80039e8 <__swsetup_r+0x14>
 80039e4:	f7ff f95c 	bl	8002ca0 <__sinit>
 80039e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ec:	0719      	lsls	r1, r3, #28
 80039ee:	d422      	bmi.n	8003a36 <__swsetup_r+0x62>
 80039f0:	06da      	lsls	r2, r3, #27
 80039f2:	d407      	bmi.n	8003a04 <__swsetup_r+0x30>
 80039f4:	2209      	movs	r2, #9
 80039f6:	602a      	str	r2, [r5, #0]
 80039f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003a00:	81a3      	strh	r3, [r4, #12]
 8003a02:	e033      	b.n	8003a6c <__swsetup_r+0x98>
 8003a04:	0758      	lsls	r0, r3, #29
 8003a06:	d512      	bpl.n	8003a2e <__swsetup_r+0x5a>
 8003a08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a0a:	b141      	cbz	r1, 8003a1e <__swsetup_r+0x4a>
 8003a0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a10:	4299      	cmp	r1, r3
 8003a12:	d002      	beq.n	8003a1a <__swsetup_r+0x46>
 8003a14:	4628      	mov	r0, r5
 8003a16:	f7ff fa7f 	bl	8002f18 <_free_r>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a1e:	89a3      	ldrh	r3, [r4, #12]
 8003a20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a24:	81a3      	strh	r3, [r4, #12]
 8003a26:	2300      	movs	r3, #0
 8003a28:	6063      	str	r3, [r4, #4]
 8003a2a:	6923      	ldr	r3, [r4, #16]
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	89a3      	ldrh	r3, [r4, #12]
 8003a30:	f043 0308 	orr.w	r3, r3, #8
 8003a34:	81a3      	strh	r3, [r4, #12]
 8003a36:	6923      	ldr	r3, [r4, #16]
 8003a38:	b94b      	cbnz	r3, 8003a4e <__swsetup_r+0x7a>
 8003a3a:	89a3      	ldrh	r3, [r4, #12]
 8003a3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a44:	d003      	beq.n	8003a4e <__swsetup_r+0x7a>
 8003a46:	4621      	mov	r1, r4
 8003a48:	4628      	mov	r0, r5
 8003a4a:	f000 f8b2 	bl	8003bb2 <__smakebuf_r>
 8003a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a52:	f013 0201 	ands.w	r2, r3, #1
 8003a56:	d00a      	beq.n	8003a6e <__swsetup_r+0x9a>
 8003a58:	2200      	movs	r2, #0
 8003a5a:	60a2      	str	r2, [r4, #8]
 8003a5c:	6962      	ldr	r2, [r4, #20]
 8003a5e:	4252      	negs	r2, r2
 8003a60:	61a2      	str	r2, [r4, #24]
 8003a62:	6922      	ldr	r2, [r4, #16]
 8003a64:	b942      	cbnz	r2, 8003a78 <__swsetup_r+0xa4>
 8003a66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003a6a:	d1c5      	bne.n	80039f8 <__swsetup_r+0x24>
 8003a6c:	bd38      	pop	{r3, r4, r5, pc}
 8003a6e:	0799      	lsls	r1, r3, #30
 8003a70:	bf58      	it	pl
 8003a72:	6962      	ldrpl	r2, [r4, #20]
 8003a74:	60a2      	str	r2, [r4, #8]
 8003a76:	e7f4      	b.n	8003a62 <__swsetup_r+0x8e>
 8003a78:	2000      	movs	r0, #0
 8003a7a:	e7f7      	b.n	8003a6c <__swsetup_r+0x98>
 8003a7c:	2000008c 	.word	0x2000008c

08003a80 <memmove>:
 8003a80:	4288      	cmp	r0, r1
 8003a82:	b510      	push	{r4, lr}
 8003a84:	eb01 0402 	add.w	r4, r1, r2
 8003a88:	d902      	bls.n	8003a90 <memmove+0x10>
 8003a8a:	4284      	cmp	r4, r0
 8003a8c:	4623      	mov	r3, r4
 8003a8e:	d807      	bhi.n	8003aa0 <memmove+0x20>
 8003a90:	1e43      	subs	r3, r0, #1
 8003a92:	42a1      	cmp	r1, r4
 8003a94:	d008      	beq.n	8003aa8 <memmove+0x28>
 8003a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a9e:	e7f8      	b.n	8003a92 <memmove+0x12>
 8003aa0:	4601      	mov	r1, r0
 8003aa2:	4402      	add	r2, r0
 8003aa4:	428a      	cmp	r2, r1
 8003aa6:	d100      	bne.n	8003aaa <memmove+0x2a>
 8003aa8:	bd10      	pop	{r4, pc}
 8003aaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003aae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ab2:	e7f7      	b.n	8003aa4 <memmove+0x24>

08003ab4 <_sbrk_r>:
 8003ab4:	b538      	push	{r3, r4, r5, lr}
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	4d05      	ldr	r5, [pc, #20]	@ (8003ad0 <_sbrk_r+0x1c>)
 8003aba:	4604      	mov	r4, r0
 8003abc:	4608      	mov	r0, r1
 8003abe:	602b      	str	r3, [r5, #0]
 8003ac0:	f7fc fcce 	bl	8000460 <_sbrk>
 8003ac4:	1c43      	adds	r3, r0, #1
 8003ac6:	d102      	bne.n	8003ace <_sbrk_r+0x1a>
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	b103      	cbz	r3, 8003ace <_sbrk_r+0x1a>
 8003acc:	6023      	str	r3, [r4, #0]
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
 8003ad0:	200003a8 	.word	0x200003a8

08003ad4 <memchr>:
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	b510      	push	{r4, lr}
 8003ad8:	b2c9      	uxtb	r1, r1
 8003ada:	4402      	add	r2, r0
 8003adc:	4293      	cmp	r3, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	d101      	bne.n	8003ae6 <memchr+0x12>
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	e003      	b.n	8003aee <memchr+0x1a>
 8003ae6:	7804      	ldrb	r4, [r0, #0]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	428c      	cmp	r4, r1
 8003aec:	d1f6      	bne.n	8003adc <memchr+0x8>
 8003aee:	bd10      	pop	{r4, pc}

08003af0 <memcpy>:
 8003af0:	440a      	add	r2, r1
 8003af2:	4291      	cmp	r1, r2
 8003af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003af8:	d100      	bne.n	8003afc <memcpy+0xc>
 8003afa:	4770      	bx	lr
 8003afc:	b510      	push	{r4, lr}
 8003afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b02:	4291      	cmp	r1, r2
 8003b04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b08:	d1f9      	bne.n	8003afe <memcpy+0xe>
 8003b0a:	bd10      	pop	{r4, pc}

08003b0c <_realloc_r>:
 8003b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b10:	4680      	mov	r8, r0
 8003b12:	4615      	mov	r5, r2
 8003b14:	460c      	mov	r4, r1
 8003b16:	b921      	cbnz	r1, 8003b22 <_realloc_r+0x16>
 8003b18:	4611      	mov	r1, r2
 8003b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b1e:	f7ff ba65 	b.w	8002fec <_malloc_r>
 8003b22:	b92a      	cbnz	r2, 8003b30 <_realloc_r+0x24>
 8003b24:	f7ff f9f8 	bl	8002f18 <_free_r>
 8003b28:	2400      	movs	r4, #0
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b30:	f000 f89e 	bl	8003c70 <_malloc_usable_size_r>
 8003b34:	4285      	cmp	r5, r0
 8003b36:	4606      	mov	r6, r0
 8003b38:	d802      	bhi.n	8003b40 <_realloc_r+0x34>
 8003b3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003b3e:	d8f4      	bhi.n	8003b2a <_realloc_r+0x1e>
 8003b40:	4629      	mov	r1, r5
 8003b42:	4640      	mov	r0, r8
 8003b44:	f7ff fa52 	bl	8002fec <_malloc_r>
 8003b48:	4607      	mov	r7, r0
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	d0ec      	beq.n	8003b28 <_realloc_r+0x1c>
 8003b4e:	42b5      	cmp	r5, r6
 8003b50:	462a      	mov	r2, r5
 8003b52:	4621      	mov	r1, r4
 8003b54:	bf28      	it	cs
 8003b56:	4632      	movcs	r2, r6
 8003b58:	f7ff ffca 	bl	8003af0 <memcpy>
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	4640      	mov	r0, r8
 8003b60:	f7ff f9da 	bl	8002f18 <_free_r>
 8003b64:	463c      	mov	r4, r7
 8003b66:	e7e0      	b.n	8003b2a <_realloc_r+0x1e>

08003b68 <__swhatbuf_r>:
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	460c      	mov	r4, r1
 8003b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b70:	4615      	mov	r5, r2
 8003b72:	2900      	cmp	r1, #0
 8003b74:	461e      	mov	r6, r3
 8003b76:	b096      	sub	sp, #88	@ 0x58
 8003b78:	da0c      	bge.n	8003b94 <__swhatbuf_r+0x2c>
 8003b7a:	89a3      	ldrh	r3, [r4, #12]
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b82:	bf14      	ite	ne
 8003b84:	2340      	movne	r3, #64	@ 0x40
 8003b86:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	6031      	str	r1, [r6, #0]
 8003b8e:	602b      	str	r3, [r5, #0]
 8003b90:	b016      	add	sp, #88	@ 0x58
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
 8003b94:	466a      	mov	r2, sp
 8003b96:	f000 f849 	bl	8003c2c <_fstat_r>
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	dbed      	blt.n	8003b7a <__swhatbuf_r+0x12>
 8003b9e:	9901      	ldr	r1, [sp, #4]
 8003ba0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003ba4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003ba8:	4259      	negs	r1, r3
 8003baa:	4159      	adcs	r1, r3
 8003bac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bb0:	e7eb      	b.n	8003b8a <__swhatbuf_r+0x22>

08003bb2 <__smakebuf_r>:
 8003bb2:	898b      	ldrh	r3, [r1, #12]
 8003bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bb6:	079d      	lsls	r5, r3, #30
 8003bb8:	4606      	mov	r6, r0
 8003bba:	460c      	mov	r4, r1
 8003bbc:	d507      	bpl.n	8003bce <__smakebuf_r+0x1c>
 8003bbe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003bc2:	6023      	str	r3, [r4, #0]
 8003bc4:	6123      	str	r3, [r4, #16]
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	6163      	str	r3, [r4, #20]
 8003bca:	b003      	add	sp, #12
 8003bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bce:	466a      	mov	r2, sp
 8003bd0:	ab01      	add	r3, sp, #4
 8003bd2:	f7ff ffc9 	bl	8003b68 <__swhatbuf_r>
 8003bd6:	9f00      	ldr	r7, [sp, #0]
 8003bd8:	4605      	mov	r5, r0
 8003bda:	4639      	mov	r1, r7
 8003bdc:	4630      	mov	r0, r6
 8003bde:	f7ff fa05 	bl	8002fec <_malloc_r>
 8003be2:	b948      	cbnz	r0, 8003bf8 <__smakebuf_r+0x46>
 8003be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003be8:	059a      	lsls	r2, r3, #22
 8003bea:	d4ee      	bmi.n	8003bca <__smakebuf_r+0x18>
 8003bec:	f023 0303 	bic.w	r3, r3, #3
 8003bf0:	f043 0302 	orr.w	r3, r3, #2
 8003bf4:	81a3      	strh	r3, [r4, #12]
 8003bf6:	e7e2      	b.n	8003bbe <__smakebuf_r+0xc>
 8003bf8:	89a3      	ldrh	r3, [r4, #12]
 8003bfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c02:	81a3      	strh	r3, [r4, #12]
 8003c04:	9b01      	ldr	r3, [sp, #4]
 8003c06:	6020      	str	r0, [r4, #0]
 8003c08:	b15b      	cbz	r3, 8003c22 <__smakebuf_r+0x70>
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c10:	f000 f81e 	bl	8003c50 <_isatty_r>
 8003c14:	b128      	cbz	r0, 8003c22 <__smakebuf_r+0x70>
 8003c16:	89a3      	ldrh	r3, [r4, #12]
 8003c18:	f023 0303 	bic.w	r3, r3, #3
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	81a3      	strh	r3, [r4, #12]
 8003c22:	89a3      	ldrh	r3, [r4, #12]
 8003c24:	431d      	orrs	r5, r3
 8003c26:	81a5      	strh	r5, [r4, #12]
 8003c28:	e7cf      	b.n	8003bca <__smakebuf_r+0x18>
	...

08003c2c <_fstat_r>:
 8003c2c:	b538      	push	{r3, r4, r5, lr}
 8003c2e:	2300      	movs	r3, #0
 8003c30:	4d06      	ldr	r5, [pc, #24]	@ (8003c4c <_fstat_r+0x20>)
 8003c32:	4604      	mov	r4, r0
 8003c34:	4608      	mov	r0, r1
 8003c36:	4611      	mov	r1, r2
 8003c38:	602b      	str	r3, [r5, #0]
 8003c3a:	f7fe fd68 	bl	800270e <_fstat>
 8003c3e:	1c43      	adds	r3, r0, #1
 8003c40:	d102      	bne.n	8003c48 <_fstat_r+0x1c>
 8003c42:	682b      	ldr	r3, [r5, #0]
 8003c44:	b103      	cbz	r3, 8003c48 <_fstat_r+0x1c>
 8003c46:	6023      	str	r3, [r4, #0]
 8003c48:	bd38      	pop	{r3, r4, r5, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200003a8 	.word	0x200003a8

08003c50 <_isatty_r>:
 8003c50:	b538      	push	{r3, r4, r5, lr}
 8003c52:	2300      	movs	r3, #0
 8003c54:	4d05      	ldr	r5, [pc, #20]	@ (8003c6c <_isatty_r+0x1c>)
 8003c56:	4604      	mov	r4, r0
 8003c58:	4608      	mov	r0, r1
 8003c5a:	602b      	str	r3, [r5, #0]
 8003c5c:	f7fe feba 	bl	80029d4 <_isatty>
 8003c60:	1c43      	adds	r3, r0, #1
 8003c62:	d102      	bne.n	8003c6a <_isatty_r+0x1a>
 8003c64:	682b      	ldr	r3, [r5, #0]
 8003c66:	b103      	cbz	r3, 8003c6a <_isatty_r+0x1a>
 8003c68:	6023      	str	r3, [r4, #0]
 8003c6a:	bd38      	pop	{r3, r4, r5, pc}
 8003c6c:	200003a8 	.word	0x200003a8

08003c70 <_malloc_usable_size_r>:
 8003c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c74:	1f18      	subs	r0, r3, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	bfbc      	itt	lt
 8003c7a:	580b      	ldrlt	r3, [r1, r0]
 8003c7c:	18c0      	addlt	r0, r0, r3
 8003c7e:	4770      	bx	lr

08003c80 <_init>:
 8003c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c82:	bf00      	nop
 8003c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c86:	bc08      	pop	{r3}
 8003c88:	469e      	mov	lr, r3
 8003c8a:	4770      	bx	lr

08003c8c <_fini>:
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	bf00      	nop
 8003c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c92:	bc08      	pop	{r3}
 8003c94:	469e      	mov	lr, r3
 8003c96:	4770      	bx	lr
